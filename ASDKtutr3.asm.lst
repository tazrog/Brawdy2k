------- FILE ASDKtutr3.asm LEVEL 1 PASS 3
      1  10000 ????						;--------------------------------------------------------
      2  10000 ????						;--------------------------------------------------------
      3  10000 ????						;----The Abstract Assembly Development Kit:		--
      4  10000 ????						;----an Assembly Language Programming Framework	--
      5  10000 ????						;----For the Atari 2600 VCS				--
      6  10000 ????						;--------------------------------------------------------
      7  10000 ????						;---- Brought to you by:				--
      8  10000 ????						;---- Mr SQL, RELATIONALFRAMEWORK.COM			--
      9  10000 ????						;--------------------------------------------------------
     10  10000 ????						;----Anyone may use this kit however they wish 	--
     11  10000 ????						;----No strings attached.				--
     12  10000 ????						;--------------------------------------------------------
     13  10000 ????						;--------------------------------------------------------
     14  10000 ????						;----							--
     15  10000 ????						;----Source is fully commented and the doc's also	--
     16  10000 ????						;----explain the abstract calls to the 		--
     17  10000 ????						;----phantom hardware for rendering			--
     18  10000 ????						;----large scrolling WYSIWYG bitmaps, and setting	--
     19  10000 ????						;----or checking the bits, panning the camera & scaling-- 
     20  10000 ????						;--------------------------------------------------------
     21  10000 ????				       processor	6502	;				  --
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"	;				  --
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE ASDKtutr3.asm
     23  0000 ????						;;    include "macro.h" ;				  --
     24  0000 ????						;-------------------------------------------------------- 
     25  0000 ????
     26 U0080 ????				      seg.u	RIOT_vars
     27 U0080					      org	$80
     28 U0080
     29 U0080
     30 U1000 ????				      seg.u	FA_RAM_vars
     31 U1000					      org	$1000
     32 U1000
     33 U1000
     34 U1000							;------------------------------------------------------------------------------
     35 U1000							;--- RAM VARIABLE MAP
     36 U1000							;------------------------------------------------------------------------------
     37 U1000							; SuperChip Reminder: if you want to write:
     38 U1000							; use $F000-$F07F, but if you want to read, use $F080-$F0FF.
     39 U1000							; now using the CBS RAM superchip for 256 extra bytes of RAM
     40 U1000							; to renders the large 240 byte virtual worlds dynamic
     41 U1000							;------------------------------------------------------------------------------
     42 U1000
     43 U1000
     44 U1000							;DYNAMICSYNC = $8c
ASDKtutr3.asm (45): error: EQU: Value mismatch.
     45 U1000		       00 8c	   o	      =	$8c
     46 U1000
     47 U1000							;--- two bytes for music engine, pointer & sustain (score is ROM data block)
     48 U1000		       00 80	   MUSICINDEX =	$80	; storage location (1st byte in RAM)
     49 U1000		       00 81	   SUSTAINFORFRAMES =	$81	; 129
     50 U1000
     51 U1000		       00 82	   a	      =	$82	; 10 bytes for variables, a-j
     52 U1000		       00 83	   b	      =	$83	; note: vars a,b,c,d,e are temp vars so use the stack if you need to preserve them!
     53 U1000		       00 84	   c	      =	$84
     54 U1000		       00 85	   d	      =	$85
     55 U1000		       00 86	   e	      =	$86	; music engine is using this (it shouldn't) so also a temp var, push to preserve
     56 U1000		       00 87	   f	      =	$87
     57 U1000		       00 88	   g	      =	$88
     58 U1000		       00 89	   h	      =	$89
     59 U1000		       00 8a	   i	      =	$8a
     60 U1000		       00 8b	   j	      =	$8b
     61 U1000							;REVBT = $8d
     62 U1000							; REVBT var and ReverseB (Reversebyte) routine are not used at all.
     63 U1000		       00 8d	   YIndex     =	$8d	; reusing this location then, will be used to calculate BYTErowoffset as a large virtual world Y value for concept (not necessary)
     64 U1000
     65 U1000		       00 8e	   PLAYFIELDINDEX =	$8e
     66 U1000		       00 8f	   PLAYFIELDINDEXstep =	$8f	; 18 bytes for variables so far...
     67 U1000
     68 U1000							;reserving another 15 bytes, $90-9F
     69 U1000							; --- virtual world variables
     70 U1000		       00 90	   BITIndex   =	$90
     71 U1000		       00 9d	   BYTErowoffset =	$9d	; incs 1 y position in virtual world for each rowsize (12 bytes);goes	with BITIndex (x position)
     72 U1000
     73 U1000		       00 91	   p0	      =	$91
     74 U1000		       00 92	   p1	      =	$92
     75 U1000		       00 93	   p2	      =	$93
     76 U1000
     77 U1000							;-- Scrolling Demo Vars
     78 U1000		       00 94	   scrollspeed =	$94	; scrollspeed!
     79 U1000		       00 95	   scrollspeedinit =	$95	; scrollspeed fade... changed to scroll direction (not so intuitive)
     80 U1000							;-- End Scrolling Demo vars
     81 U1000							;--------------------------- SCROLLOUT Game Vars
     82 U1000		       00 96	   px	      =	$96	; used for game status ( no player x!)
     83 U1000		       00 97	   py	      =	$97	; player y (there is no player X in Scrollout, it's always on the left)
     84 U1000
     85 U1000		       00 98	   bx	      =	$98	; ball x
     86 U1000		       00 99	   by	      =	$99	; ball y
     87 U1000
     88 U1000		       00 9a	   bitx       =	$9a
     89 U1000		       00 9b	   bity       =	$9b
     90 U1000		       00 9c	   bitstatus  =	$9c
     91 U1000							; $9d in use for BYTErowoffset
     92 U1000		       00 9e	   player0x   =	$9e
     93 U1000		       00 9f	   player0y   =	$9f
     94 U1000
     95 U1000							;--------------------------- End Scrollout Game Vars
     96 U1000
     97 U1000
     98 U1000		       00 a0	   RAMplayfield =	$A0	; - BF$
     99 U1000							; using $A0-DF$ (60 bytes) to hold playfield image (20x10 in 40x10 grid)
    100 U1000							; Note: half of this screen buffer, 30 bytes, is loaded WYSIWYG from the virtual world buffer (240 bytes),
    101 U1000							; then it is expanded 2:1 to 60 bytes and flipped to and fro for the display.
    102 U1000
    103 U1000		       00 e0	   player1x   =	$e0
    104 U1000		       00 e1	   player1y   =	$e1	; 95 bytes of RAM reserved so far; 35 + 60 for the screen buffer
    105 U1000
    106 U1000		       00 e2	   missile0x  =	$e2
    107 U1000		       00 e3	   missile0y  =	$e3
    108 U1000
    109 U1000		       00 e4	   missile1x  =	$e4
    110 U1000		       00 e5	   missile1y  =	$e5
    111 U1000
    112 U1000							;ball0x = $e6 
    113 U1000							;ball0y = $e7
    114 U1000		       00 e6	   p	      =	$e6
    115 U1000		       00 e7	   q	      =	$e7
    116 U1000
    117 U1000		       00 e8	   k	      =	$e8
    118 U1000		       00 e9	   l	      =	$e9
    119 U1000		       00 ea	   m	      =	$ea
    120 U1000		       00 eb	   n	      =	$eb	; now 105 bytes of system RAM reserved; 23 remaining
ASDKtutr3.asm (121): error: EQU: Value mismatch.
    121 U1000		       00 ec	   o	      =	$ec	; 22 remaining... must leave most of that for the stack ;)
    122 U1000							;------------------------------------------------------------------------------
    123 U1000							; now using CBS RAM for 2x the SC .. 256 bytes!
    124 U1000							;SuperChipWRITE = $F000
    125 U1000		       f0 00	   MyAbstractExtendedPlayfieldSCW =	$F000	; $1000   ; $F000
    126 U1000							;SuperChipREAD = $F080
    127 U1000		       f1 00	   MyAbstractExtendedPlayfieldSCR =	$F100	; 256 bytes now CBS RAM!   $F080; $1080  ; $F080
    128 U1000							; makes no diff offset by 1 for cbs ram overwrite bug
    129 U1000							; find write bug... there was no write bug
    130 U1000							; ---- end ram vars
    131 U1000
    132 U1000							; TOP 16 bytes of high RAM (top of CBS RAM) to load sprite data
    133 U1000		       f0 f0	   Sprite0SCW =	($F000 + $F0)	; + 240
    134 U1000		       f1 f0	   Sprite0SCR =	($F100 + $F0)	; + 240
    135 U1000
    136 U1000							;Sprite1SCW = ($F000 + 248) ; + $F8
    137 U1000		       f0 f8	   Sprite1SCW =	($F000 + $f8)	; + $F8
    138 U1000		       f1 f8	   Sprite1SCR =	($F100 + $f8)
    139 U1000
    140 U1000
    141 U1000							; The phantom hardware engines and your game code live in the first 3.5k bank (plenty of space)
    142 U1000							; "All large virtual world bitmaps live in the 2nd 3.5k bank along with the music engine and it's data
    143 U1000							; 3rd 3.5k bank is free but you shouldn't need it
    144 U1000
    145 U1000
    146  e000 ????				      seg	bank_0
    147  d000					      org	$D000
    148  d000					      rorg	$F000
    149  d000
    150  d000					      repeat	512
    151  d000		       d0		      .byte.b	$D0
    150  d000					      repend
    151  d001		       d0		      .byte.b	$D0
    150  d001					      repend
    151  d002		       d0		      .byte.b	$D0
    150  d002					      repend
    151  d003		       d0		      .byte.b	$D0
    150  d003					      repend
    151  d004		       d0		      .byte.b	$D0
    150  d004					      repend
    151  d005		       d0		      .byte.b	$D0
    150  d005					      repend
    151  d006		       d0		      .byte.b	$D0
    150  d006					      repend
    151  d007		       d0		      .byte.b	$D0
    150  d007					      repend
    151  d008		       d0		      .byte.b	$D0
    150  d008					      repend
    151  d009		       d0		      .byte.b	$D0
    150  d009					      repend
    151  d00a		       d0		      .byte.b	$D0
    150  d00a					      repend
    151  d00b		       d0		      .byte.b	$D0
    150  d00b					      repend
    151  d00c		       d0		      .byte.b	$D0
    150  d00c					      repend
    151  d00d		       d0		      .byte.b	$D0
    150  d00d					      repend
    151  d00e		       d0		      .byte.b	$D0
    150  d00e					      repend
    151  d00f		       d0		      .byte.b	$D0
    150  d00f					      repend
    151  d010		       d0		      .byte.b	$D0
    150  d010					      repend
    151  d011		       d0		      .byte.b	$D0
    150  d011					      repend
    151  d012		       d0		      .byte.b	$D0
    150  d012					      repend
    151  d013		       d0		      .byte.b	$D0
    150  d013					      repend
    151  d014		       d0		      .byte.b	$D0
    150  d014					      repend
    151  d015		       d0		      .byte.b	$D0
    150  d015					      repend
    151  d016		       d0		      .byte.b	$D0
    150  d016					      repend
    151  d017		       d0		      .byte.b	$D0
    150  d017					      repend
    151  d018		       d0		      .byte.b	$D0
    150  d018					      repend
    151  d019		       d0		      .byte.b	$D0
    150  d019					      repend
    151  d01a		       d0		      .byte.b	$D0
    150  d01a					      repend
    151  d01b		       d0		      .byte.b	$D0
    150  d01b					      repend
    151  d01c		       d0		      .byte.b	$D0
    150  d01c					      repend
    151  d01d		       d0		      .byte.b	$D0
    150  d01d					      repend
    151  d01e		       d0		      .byte.b	$D0
    150  d01e					      repend
    151  d01f		       d0		      .byte.b	$D0
    150  d01f					      repend
    151  d020		       d0		      .byte.b	$D0
    150  d020					      repend
    151  d021		       d0		      .byte.b	$D0
    150  d021					      repend
    151  d022		       d0		      .byte.b	$D0
    150  d022					      repend
    151  d023		       d0		      .byte.b	$D0
    150  d023					      repend
    151  d024		       d0		      .byte.b	$D0
    150  d024					      repend
    151  d025		       d0		      .byte.b	$D0
    150  d025					      repend
    151  d026		       d0		      .byte.b	$D0
    150  d026					      repend
    151  d027		       d0		      .byte.b	$D0
    150  d027					      repend
    151  d028		       d0		      .byte.b	$D0
    150  d028					      repend
    151  d029		       d0		      .byte.b	$D0
    150  d029					      repend
    151  d02a		       d0		      .byte.b	$D0
    150  d02a					      repend
    151  d02b		       d0		      .byte.b	$D0
    150  d02b					      repend
    151  d02c		       d0		      .byte.b	$D0
    150  d02c					      repend
    151  d02d		       d0		      .byte.b	$D0
    150  d02d					      repend
    151  d02e		       d0		      .byte.b	$D0
    150  d02e					      repend
    151  d02f		       d0		      .byte.b	$D0
    150  d02f					      repend
    151  d030		       d0		      .byte.b	$D0
    150  d030					      repend
    151  d031		       d0		      .byte.b	$D0
    150  d031					      repend
    151  d032		       d0		      .byte.b	$D0
    150  d032					      repend
    151  d033		       d0		      .byte.b	$D0
    150  d033					      repend
    151  d034		       d0		      .byte.b	$D0
    150  d034					      repend
    151  d035		       d0		      .byte.b	$D0
    150  d035					      repend
    151  d036		       d0		      .byte.b	$D0
    150  d036					      repend
    151  d037		       d0		      .byte.b	$D0
    150  d037					      repend
    151  d038		       d0		      .byte.b	$D0
    150  d038					      repend
    151  d039		       d0		      .byte.b	$D0
    150  d039					      repend
    151  d03a		       d0		      .byte.b	$D0
    150  d03a					      repend
    151  d03b		       d0		      .byte.b	$D0
    150  d03b					      repend
    151  d03c		       d0		      .byte.b	$D0
    150  d03c					      repend
    151  d03d		       d0		      .byte.b	$D0
    150  d03d					      repend
    151  d03e		       d0		      .byte.b	$D0
    150  d03e					      repend
    151  d03f		       d0		      .byte.b	$D0
    150  d03f					      repend
    151  d040		       d0		      .byte.b	$D0
    150  d040					      repend
    151  d041		       d0		      .byte.b	$D0
    150  d041					      repend
    151  d042		       d0		      .byte.b	$D0
    150  d042					      repend
    151  d043		       d0		      .byte.b	$D0
    150  d043					      repend
    151  d044		       d0		      .byte.b	$D0
    150  d044					      repend
    151  d045		       d0		      .byte.b	$D0
    150  d045					      repend
    151  d046		       d0		      .byte.b	$D0
    150  d046					      repend
    151  d047		       d0		      .byte.b	$D0
    150  d047					      repend
    151  d048		       d0		      .byte.b	$D0
    150  d048					      repend
    151  d049		       d0		      .byte.b	$D0
    150  d049					      repend
    151  d04a		       d0		      .byte.b	$D0
    150  d04a					      repend
    151  d04b		       d0		      .byte.b	$D0
    150  d04b					      repend
    151  d04c		       d0		      .byte.b	$D0
    150  d04c					      repend
    151  d04d		       d0		      .byte.b	$D0
    150  d04d					      repend
    151  d04e		       d0		      .byte.b	$D0
    150  d04e					      repend
    151  d04f		       d0		      .byte.b	$D0
    150  d04f					      repend
    151  d050		       d0		      .byte.b	$D0
    150  d050					      repend
    151  d051		       d0		      .byte.b	$D0
    150  d051					      repend
    151  d052		       d0		      .byte.b	$D0
    150  d052					      repend
    151  d053		       d0		      .byte.b	$D0
    150  d053					      repend
    151  d054		       d0		      .byte.b	$D0
    150  d054					      repend
    151  d055		       d0		      .byte.b	$D0
    150  d055					      repend
    151  d056		       d0		      .byte.b	$D0
    150  d056					      repend
    151  d057		       d0		      .byte.b	$D0
    150  d057					      repend
    151  d058		       d0		      .byte.b	$D0
    150  d058					      repend
    151  d059		       d0		      .byte.b	$D0
    150  d059					      repend
    151  d05a		       d0		      .byte.b	$D0
    150  d05a					      repend
    151  d05b		       d0		      .byte.b	$D0
    150  d05b					      repend
    151  d05c		       d0		      .byte.b	$D0
    150  d05c					      repend
    151  d05d		       d0		      .byte.b	$D0
    150  d05d					      repend
    151  d05e		       d0		      .byte.b	$D0
    150  d05e					      repend
    151  d05f		       d0		      .byte.b	$D0
    150  d05f					      repend
    151  d060		       d0		      .byte.b	$D0
    150  d060					      repend
    151  d061		       d0		      .byte.b	$D0
    150  d061					      repend
    151  d062		       d0		      .byte.b	$D0
    150  d062					      repend
    151  d063		       d0		      .byte.b	$D0
    150  d063					      repend
    151  d064		       d0		      .byte.b	$D0
    150  d064					      repend
    151  d065		       d0		      .byte.b	$D0
    150  d065					      repend
    151  d066		       d0		      .byte.b	$D0
    150  d066					      repend
    151  d067		       d0		      .byte.b	$D0
    150  d067					      repend
    151  d068		       d0		      .byte.b	$D0
    150  d068					      repend
    151  d069		       d0		      .byte.b	$D0
    150  d069					      repend
    151  d06a		       d0		      .byte.b	$D0
    150  d06a					      repend
    151  d06b		       d0		      .byte.b	$D0
    150  d06b					      repend
    151  d06c		       d0		      .byte.b	$D0
    150  d06c					      repend
    151  d06d		       d0		      .byte.b	$D0
    150  d06d					      repend
    151  d06e		       d0		      .byte.b	$D0
    150  d06e					      repend
    151  d06f		       d0		      .byte.b	$D0
    150  d06f					      repend
    151  d070		       d0		      .byte.b	$D0
    150  d070					      repend
    151  d071		       d0		      .byte.b	$D0
    150  d071					      repend
    151  d072		       d0		      .byte.b	$D0
    150  d072					      repend
    151  d073		       d0		      .byte.b	$D0
    150  d073					      repend
    151  d074		       d0		      .byte.b	$D0
    150  d074					      repend
    151  d075		       d0		      .byte.b	$D0
    150  d075					      repend
    151  d076		       d0		      .byte.b	$D0
    150  d076					      repend
    151  d077		       d0		      .byte.b	$D0
    150  d077					      repend
    151  d078		       d0		      .byte.b	$D0
    150  d078					      repend
    151  d079		       d0		      .byte.b	$D0
    150  d079					      repend
    151  d07a		       d0		      .byte.b	$D0
    150  d07a					      repend
    151  d07b		       d0		      .byte.b	$D0
    150  d07b					      repend
    151  d07c		       d0		      .byte.b	$D0
    150  d07c					      repend
    151  d07d		       d0		      .byte.b	$D0
    150  d07d					      repend
    151  d07e		       d0		      .byte.b	$D0
    150  d07e					      repend
    151  d07f		       d0		      .byte.b	$D0
    150  d07f					      repend
    151  d080		       d0		      .byte.b	$D0
    150  d080					      repend
    151  d081		       d0		      .byte.b	$D0
    150  d081					      repend
    151  d082		       d0		      .byte.b	$D0
    150  d082					      repend
    151  d083		       d0		      .byte.b	$D0
    150  d083					      repend
    151  d084		       d0		      .byte.b	$D0
    150  d084					      repend
    151  d085		       d0		      .byte.b	$D0
    150  d085					      repend
    151  d086		       d0		      .byte.b	$D0
    150  d086					      repend
    151  d087		       d0		      .byte.b	$D0
    150  d087					      repend
    151  d088		       d0		      .byte.b	$D0
    150  d088					      repend
    151  d089		       d0		      .byte.b	$D0
    150  d089					      repend
    151  d08a		       d0		      .byte.b	$D0
    150  d08a					      repend
    151  d08b		       d0		      .byte.b	$D0
    150  d08b					      repend
    151  d08c		       d0		      .byte.b	$D0
    150  d08c					      repend
    151  d08d		       d0		      .byte.b	$D0
    150  d08d					      repend
    151  d08e		       d0		      .byte.b	$D0
    150  d08e					      repend
    151  d08f		       d0		      .byte.b	$D0
    150  d08f					      repend
    151  d090		       d0		      .byte.b	$D0
    150  d090					      repend
    151  d091		       d0		      .byte.b	$D0
    150  d091					      repend
    151  d092		       d0		      .byte.b	$D0
    150  d092					      repend
    151  d093		       d0		      .byte.b	$D0
    150  d093					      repend
    151  d094		       d0		      .byte.b	$D0
    150  d094					      repend
    151  d095		       d0		      .byte.b	$D0
    150  d095					      repend
    151  d096		       d0		      .byte.b	$D0
    150  d096					      repend
    151  d097		       d0		      .byte.b	$D0
    150  d097					      repend
    151  d098		       d0		      .byte.b	$D0
    150  d098					      repend
    151  d099		       d0		      .byte.b	$D0
    150  d099					      repend
    151  d09a		       d0		      .byte.b	$D0
    150  d09a					      repend
    151  d09b		       d0		      .byte.b	$D0
    150  d09b					      repend
    151  d09c		       d0		      .byte.b	$D0
    150  d09c					      repend
    151  d09d		       d0		      .byte.b	$D0
    150  d09d					      repend
    151  d09e		       d0		      .byte.b	$D0
    150  d09e					      repend
    151  d09f		       d0		      .byte.b	$D0
    150  d09f					      repend
    151  d0a0		       d0		      .byte.b	$D0
    150  d0a0					      repend
    151  d0a1		       d0		      .byte.b	$D0
    150  d0a1					      repend
    151  d0a2		       d0		      .byte.b	$D0
    150  d0a2					      repend
    151  d0a3		       d0		      .byte.b	$D0
    150  d0a3					      repend
    151  d0a4		       d0		      .byte.b	$D0
    150  d0a4					      repend
    151  d0a5		       d0		      .byte.b	$D0
    150  d0a5					      repend
    151  d0a6		       d0		      .byte.b	$D0
    150  d0a6					      repend
    151  d0a7		       d0		      .byte.b	$D0
    150  d0a7					      repend
    151  d0a8		       d0		      .byte.b	$D0
    150  d0a8					      repend
    151  d0a9		       d0		      .byte.b	$D0
    150  d0a9					      repend
    151  d0aa		       d0		      .byte.b	$D0
    150  d0aa					      repend
    151  d0ab		       d0		      .byte.b	$D0
    150  d0ab					      repend
    151  d0ac		       d0		      .byte.b	$D0
    150  d0ac					      repend
    151  d0ad		       d0		      .byte.b	$D0
    150  d0ad					      repend
    151  d0ae		       d0		      .byte.b	$D0
    150  d0ae					      repend
    151  d0af		       d0		      .byte.b	$D0
    150  d0af					      repend
    151  d0b0		       d0		      .byte.b	$D0
    150  d0b0					      repend
    151  d0b1		       d0		      .byte.b	$D0
    150  d0b1					      repend
    151  d0b2		       d0		      .byte.b	$D0
    150  d0b2					      repend
    151  d0b3		       d0		      .byte.b	$D0
    150  d0b3					      repend
    151  d0b4		       d0		      .byte.b	$D0
    150  d0b4					      repend
    151  d0b5		       d0		      .byte.b	$D0
    150  d0b5					      repend
    151  d0b6		       d0		      .byte.b	$D0
    150  d0b6					      repend
    151  d0b7		       d0		      .byte.b	$D0
    150  d0b7					      repend
    151  d0b8		       d0		      .byte.b	$D0
    150  d0b8					      repend
    151  d0b9		       d0		      .byte.b	$D0
    150  d0b9					      repend
    151  d0ba		       d0		      .byte.b	$D0
    150  d0ba					      repend
    151  d0bb		       d0		      .byte.b	$D0
    150  d0bb					      repend
    151  d0bc		       d0		      .byte.b	$D0
    150  d0bc					      repend
    151  d0bd		       d0		      .byte.b	$D0
    150  d0bd					      repend
    151  d0be		       d0		      .byte.b	$D0
    150  d0be					      repend
    151  d0bf		       d0		      .byte.b	$D0
    150  d0bf					      repend
    151  d0c0		       d0		      .byte.b	$D0
    150  d0c0					      repend
    151  d0c1		       d0		      .byte.b	$D0
    150  d0c1					      repend
    151  d0c2		       d0		      .byte.b	$D0
    150  d0c2					      repend
    151  d0c3		       d0		      .byte.b	$D0
    150  d0c3					      repend
    151  d0c4		       d0		      .byte.b	$D0
    150  d0c4					      repend
    151  d0c5		       d0		      .byte.b	$D0
    150  d0c5					      repend
    151  d0c6		       d0		      .byte.b	$D0
    150  d0c6					      repend
    151  d0c7		       d0		      .byte.b	$D0
    150  d0c7					      repend
    151  d0c8		       d0		      .byte.b	$D0
    150  d0c8					      repend
    151  d0c9		       d0		      .byte.b	$D0
    150  d0c9					      repend
    151  d0ca		       d0		      .byte.b	$D0
    150  d0ca					      repend
    151  d0cb		       d0		      .byte.b	$D0
    150  d0cb					      repend
    151  d0cc		       d0		      .byte.b	$D0
    150  d0cc					      repend
    151  d0cd		       d0		      .byte.b	$D0
    150  d0cd					      repend
    151  d0ce		       d0		      .byte.b	$D0
    150  d0ce					      repend
    151  d0cf		       d0		      .byte.b	$D0
    150  d0cf					      repend
    151  d0d0		       d0		      .byte.b	$D0
    150  d0d0					      repend
    151  d0d1		       d0		      .byte.b	$D0
    150  d0d1					      repend
    151  d0d2		       d0		      .byte.b	$D0
    150  d0d2					      repend
    151  d0d3		       d0		      .byte.b	$D0
    150  d0d3					      repend
    151  d0d4		       d0		      .byte.b	$D0
    150  d0d4					      repend
    151  d0d5		       d0		      .byte.b	$D0
    150  d0d5					      repend
    151  d0d6		       d0		      .byte.b	$D0
    150  d0d6					      repend
    151  d0d7		       d0		      .byte.b	$D0
    150  d0d7					      repend
    151  d0d8		       d0		      .byte.b	$D0
    150  d0d8					      repend
    151  d0d9		       d0		      .byte.b	$D0
    150  d0d9					      repend
    151  d0da		       d0		      .byte.b	$D0
    150  d0da					      repend
    151  d0db		       d0		      .byte.b	$D0
    150  d0db					      repend
    151  d0dc		       d0		      .byte.b	$D0
    150  d0dc					      repend
    151  d0dd		       d0		      .byte.b	$D0
    150  d0dd					      repend
    151  d0de		       d0		      .byte.b	$D0
    150  d0de					      repend
    151  d0df		       d0		      .byte.b	$D0
    150  d0df					      repend
    151  d0e0		       d0		      .byte.b	$D0
    150  d0e0					      repend
    151  d0e1		       d0		      .byte.b	$D0
    150  d0e1					      repend
    151  d0e2		       d0		      .byte.b	$D0
    150  d0e2					      repend
    151  d0e3		       d0		      .byte.b	$D0
    150  d0e3					      repend
    151  d0e4		       d0		      .byte.b	$D0
    150  d0e4					      repend
    151  d0e5		       d0		      .byte.b	$D0
    150  d0e5					      repend
    151  d0e6		       d0		      .byte.b	$D0
    150  d0e6					      repend
    151  d0e7		       d0		      .byte.b	$D0
    150  d0e7					      repend
    151  d0e8		       d0		      .byte.b	$D0
    150  d0e8					      repend
    151  d0e9		       d0		      .byte.b	$D0
    150  d0e9					      repend
    151  d0ea		       d0		      .byte.b	$D0
    150  d0ea					      repend
    151  d0eb		       d0		      .byte.b	$D0
    150  d0eb					      repend
    151  d0ec		       d0		      .byte.b	$D0
    150  d0ec					      repend
    151  d0ed		       d0		      .byte.b	$D0
    150  d0ed					      repend
    151  d0ee		       d0		      .byte.b	$D0
    150  d0ee					      repend
    151  d0ef		       d0		      .byte.b	$D0
    150  d0ef					      repend
    151  d0f0		       d0		      .byte.b	$D0
    150  d0f0					      repend
    151  d0f1		       d0		      .byte.b	$D0
    150  d0f1					      repend
    151  d0f2		       d0		      .byte.b	$D0
    150  d0f2					      repend
    151  d0f3		       d0		      .byte.b	$D0
    150  d0f3					      repend
    151  d0f4		       d0		      .byte.b	$D0
    150  d0f4					      repend
    151  d0f5		       d0		      .byte.b	$D0
    150  d0f5					      repend
    151  d0f6		       d0		      .byte.b	$D0
    150  d0f6					      repend
    151  d0f7		       d0		      .byte.b	$D0
    150  d0f7					      repend
    151  d0f8		       d0		      .byte.b	$D0
    150  d0f8					      repend
    151  d0f9		       d0		      .byte.b	$D0
    150  d0f9					      repend
    151  d0fa		       d0		      .byte.b	$D0
    150  d0fa					      repend
    151  d0fb		       d0		      .byte.b	$D0
    150  d0fb					      repend
    151  d0fc		       d0		      .byte.b	$D0
    150  d0fc					      repend
    151  d0fd		       d0		      .byte.b	$D0
    150  d0fd					      repend
    151  d0fe		       d0		      .byte.b	$D0
    150  d0fe					      repend
    151  d0ff		       d0		      .byte.b	$D0
    150  d0ff					      repend
    151  d100		       d0		      .byte.b	$D0
    150  d100					      repend
    151  d101		       d0		      .byte.b	$D0
    150  d101					      repend
    151  d102		       d0		      .byte.b	$D0
    150  d102					      repend
    151  d103		       d0		      .byte.b	$D0
    150  d103					      repend
    151  d104		       d0		      .byte.b	$D0
    150  d104					      repend
    151  d105		       d0		      .byte.b	$D0
    150  d105					      repend
    151  d106		       d0		      .byte.b	$D0
    150  d106					      repend
    151  d107		       d0		      .byte.b	$D0
    150  d107					      repend
    151  d108		       d0		      .byte.b	$D0
    150  d108					      repend
    151  d109		       d0		      .byte.b	$D0
    150  d109					      repend
    151  d10a		       d0		      .byte.b	$D0
    150  d10a					      repend
    151  d10b		       d0		      .byte.b	$D0
    150  d10b					      repend
    151  d10c		       d0		      .byte.b	$D0
    150  d10c					      repend
    151  d10d		       d0		      .byte.b	$D0
    150  d10d					      repend
    151  d10e		       d0		      .byte.b	$D0
    150  d10e					      repend
    151  d10f		       d0		      .byte.b	$D0
    150  d10f					      repend
    151  d110		       d0		      .byte.b	$D0
    150  d110					      repend
    151  d111		       d0		      .byte.b	$D0
    150  d111					      repend
    151  d112		       d0		      .byte.b	$D0
    150  d112					      repend
    151  d113		       d0		      .byte.b	$D0
    150  d113					      repend
    151  d114		       d0		      .byte.b	$D0
    150  d114					      repend
    151  d115		       d0		      .byte.b	$D0
    150  d115					      repend
    151  d116		       d0		      .byte.b	$D0
    150  d116					      repend
    151  d117		       d0		      .byte.b	$D0
    150  d117					      repend
    151  d118		       d0		      .byte.b	$D0
    150  d118					      repend
    151  d119		       d0		      .byte.b	$D0
    150  d119					      repend
    151  d11a		       d0		      .byte.b	$D0
    150  d11a					      repend
    151  d11b		       d0		      .byte.b	$D0
    150  d11b					      repend
    151  d11c		       d0		      .byte.b	$D0
    150  d11c					      repend
    151  d11d		       d0		      .byte.b	$D0
    150  d11d					      repend
    151  d11e		       d0		      .byte.b	$D0
    150  d11e					      repend
    151  d11f		       d0		      .byte.b	$D0
    150  d11f					      repend
    151  d120		       d0		      .byte.b	$D0
    150  d120					      repend
    151  d121		       d0		      .byte.b	$D0
    150  d121					      repend
    151  d122		       d0		      .byte.b	$D0
    150  d122					      repend
    151  d123		       d0		      .byte.b	$D0
    150  d123					      repend
    151  d124		       d0		      .byte.b	$D0
    150  d124					      repend
    151  d125		       d0		      .byte.b	$D0
    150  d125					      repend
    151  d126		       d0		      .byte.b	$D0
    150  d126					      repend
    151  d127		       d0		      .byte.b	$D0
    150  d127					      repend
    151  d128		       d0		      .byte.b	$D0
    150  d128					      repend
    151  d129		       d0		      .byte.b	$D0
    150  d129					      repend
    151  d12a		       d0		      .byte.b	$D0
    150  d12a					      repend
    151  d12b		       d0		      .byte.b	$D0
    150  d12b					      repend
    151  d12c		       d0		      .byte.b	$D0
    150  d12c					      repend
    151  d12d		       d0		      .byte.b	$D0
    150  d12d					      repend
    151  d12e		       d0		      .byte.b	$D0
    150  d12e					      repend
    151  d12f		       d0		      .byte.b	$D0
    150  d12f					      repend
    151  d130		       d0		      .byte.b	$D0
    150  d130					      repend
    151  d131		       d0		      .byte.b	$D0
    150  d131					      repend
    151  d132		       d0		      .byte.b	$D0
    150  d132					      repend
    151  d133		       d0		      .byte.b	$D0
    150  d133					      repend
    151  d134		       d0		      .byte.b	$D0
    150  d134					      repend
    151  d135		       d0		      .byte.b	$D0
    150  d135					      repend
    151  d136		       d0		      .byte.b	$D0
    150  d136					      repend
    151  d137		       d0		      .byte.b	$D0
    150  d137					      repend
    151  d138		       d0		      .byte.b	$D0
    150  d138					      repend
    151  d139		       d0		      .byte.b	$D0
    150  d139					      repend
    151  d13a		       d0		      .byte.b	$D0
    150  d13a					      repend
    151  d13b		       d0		      .byte.b	$D0
    150  d13b					      repend
    151  d13c		       d0		      .byte.b	$D0
    150  d13c					      repend
    151  d13d		       d0		      .byte.b	$D0
    150  d13d					      repend
    151  d13e		       d0		      .byte.b	$D0
    150  d13e					      repend
    151  d13f		       d0		      .byte.b	$D0
    150  d13f					      repend
    151  d140		       d0		      .byte.b	$D0
    150  d140					      repend
    151  d141		       d0		      .byte.b	$D0
    150  d141					      repend
    151  d142		       d0		      .byte.b	$D0
    150  d142					      repend
    151  d143		       d0		      .byte.b	$D0
    150  d143					      repend
    151  d144		       d0		      .byte.b	$D0
    150  d144					      repend
    151  d145		       d0		      .byte.b	$D0
    150  d145					      repend
    151  d146		       d0		      .byte.b	$D0
    150  d146					      repend
    151  d147		       d0		      .byte.b	$D0
    150  d147					      repend
    151  d148		       d0		      .byte.b	$D0
    150  d148					      repend
    151  d149		       d0		      .byte.b	$D0
    150  d149					      repend
    151  d14a		       d0		      .byte.b	$D0
    150  d14a					      repend
    151  d14b		       d0		      .byte.b	$D0
    150  d14b					      repend
    151  d14c		       d0		      .byte.b	$D0
    150  d14c					      repend
    151  d14d		       d0		      .byte.b	$D0
    150  d14d					      repend
    151  d14e		       d0		      .byte.b	$D0
    150  d14e					      repend
    151  d14f		       d0		      .byte.b	$D0
    150  d14f					      repend
    151  d150		       d0		      .byte.b	$D0
    150  d150					      repend
    151  d151		       d0		      .byte.b	$D0
    150  d151					      repend
    151  d152		       d0		      .byte.b	$D0
    150  d152					      repend
    151  d153		       d0		      .byte.b	$D0
    150  d153					      repend
    151  d154		       d0		      .byte.b	$D0
    150  d154					      repend
    151  d155		       d0		      .byte.b	$D0
    150  d155					      repend
    151  d156		       d0		      .byte.b	$D0
    150  d156					      repend
    151  d157		       d0		      .byte.b	$D0
    150  d157					      repend
    151  d158		       d0		      .byte.b	$D0
    150  d158					      repend
    151  d159		       d0		      .byte.b	$D0
    150  d159					      repend
    151  d15a		       d0		      .byte.b	$D0
    150  d15a					      repend
    151  d15b		       d0		      .byte.b	$D0
    150  d15b					      repend
    151  d15c		       d0		      .byte.b	$D0
    150  d15c					      repend
    151  d15d		       d0		      .byte.b	$D0
    150  d15d					      repend
    151  d15e		       d0		      .byte.b	$D0
    150  d15e					      repend
    151  d15f		       d0		      .byte.b	$D0
    150  d15f					      repend
    151  d160		       d0		      .byte.b	$D0
    150  d160					      repend
    151  d161		       d0		      .byte.b	$D0
    150  d161					      repend
    151  d162		       d0		      .byte.b	$D0
    150  d162					      repend
    151  d163		       d0		      .byte.b	$D0
    150  d163					      repend
    151  d164		       d0		      .byte.b	$D0
    150  d164					      repend
    151  d165		       d0		      .byte.b	$D0
    150  d165					      repend
    151  d166		       d0		      .byte.b	$D0
    150  d166					      repend
    151  d167		       d0		      .byte.b	$D0
    150  d167					      repend
    151  d168		       d0		      .byte.b	$D0
    150  d168					      repend
    151  d169		       d0		      .byte.b	$D0
    150  d169					      repend
    151  d16a		       d0		      .byte.b	$D0
    150  d16a					      repend
    151  d16b		       d0		      .byte.b	$D0
    150  d16b					      repend
    151  d16c		       d0		      .byte.b	$D0
    150  d16c					      repend
    151  d16d		       d0		      .byte.b	$D0
    150  d16d					      repend
    151  d16e		       d0		      .byte.b	$D0
    150  d16e					      repend
    151  d16f		       d0		      .byte.b	$D0
    150  d16f					      repend
    151  d170		       d0		      .byte.b	$D0
    150  d170					      repend
    151  d171		       d0		      .byte.b	$D0
    150  d171					      repend
    151  d172		       d0		      .byte.b	$D0
    150  d172					      repend
    151  d173		       d0		      .byte.b	$D0
    150  d173					      repend
    151  d174		       d0		      .byte.b	$D0
    150  d174					      repend
    151  d175		       d0		      .byte.b	$D0
    150  d175					      repend
    151  d176		       d0		      .byte.b	$D0
    150  d176					      repend
    151  d177		       d0		      .byte.b	$D0
    150  d177					      repend
    151  d178		       d0		      .byte.b	$D0
    150  d178					      repend
    151  d179		       d0		      .byte.b	$D0
    150  d179					      repend
    151  d17a		       d0		      .byte.b	$D0
    150  d17a					      repend
    151  d17b		       d0		      .byte.b	$D0
    150  d17b					      repend
    151  d17c		       d0		      .byte.b	$D0
    150  d17c					      repend
    151  d17d		       d0		      .byte.b	$D0
    150  d17d					      repend
    151  d17e		       d0		      .byte.b	$D0
    150  d17e					      repend
    151  d17f		       d0		      .byte.b	$D0
    150  d17f					      repend
    151  d180		       d0		      .byte.b	$D0
    150  d180					      repend
    151  d181		       d0		      .byte.b	$D0
    150  d181					      repend
    151  d182		       d0		      .byte.b	$D0
    150  d182					      repend
    151  d183		       d0		      .byte.b	$D0
    150  d183					      repend
    151  d184		       d0		      .byte.b	$D0
    150  d184					      repend
    151  d185		       d0		      .byte.b	$D0
    150  d185					      repend
    151  d186		       d0		      .byte.b	$D0
    150  d186					      repend
    151  d187		       d0		      .byte.b	$D0
    150  d187					      repend
    151  d188		       d0		      .byte.b	$D0
    150  d188					      repend
    151  d189		       d0		      .byte.b	$D0
    150  d189					      repend
    151  d18a		       d0		      .byte.b	$D0
    150  d18a					      repend
    151  d18b		       d0		      .byte.b	$D0
    150  d18b					      repend
    151  d18c		       d0		      .byte.b	$D0
    150  d18c					      repend
    151  d18d		       d0		      .byte.b	$D0
    150  d18d					      repend
    151  d18e		       d0		      .byte.b	$D0
    150  d18e					      repend
    151  d18f		       d0		      .byte.b	$D0
    150  d18f					      repend
    151  d190		       d0		      .byte.b	$D0
    150  d190					      repend
    151  d191		       d0		      .byte.b	$D0
    150  d191					      repend
    151  d192		       d0		      .byte.b	$D0
    150  d192					      repend
    151  d193		       d0		      .byte.b	$D0
    150  d193					      repend
    151  d194		       d0		      .byte.b	$D0
    150  d194					      repend
    151  d195		       d0		      .byte.b	$D0
    150  d195					      repend
    151  d196		       d0		      .byte.b	$D0
    150  d196					      repend
    151  d197		       d0		      .byte.b	$D0
    150  d197					      repend
    151  d198		       d0		      .byte.b	$D0
    150  d198					      repend
    151  d199		       d0		      .byte.b	$D0
    150  d199					      repend
    151  d19a		       d0		      .byte.b	$D0
    150  d19a					      repend
    151  d19b		       d0		      .byte.b	$D0
    150  d19b					      repend
    151  d19c		       d0		      .byte.b	$D0
    150  d19c					      repend
    151  d19d		       d0		      .byte.b	$D0
    150  d19d					      repend
    151  d19e		       d0		      .byte.b	$D0
    150  d19e					      repend
    151  d19f		       d0		      .byte.b	$D0
    150  d19f					      repend
    151  d1a0		       d0		      .byte.b	$D0
    150  d1a0					      repend
    151  d1a1		       d0		      .byte.b	$D0
    150  d1a1					      repend
    151  d1a2		       d0		      .byte.b	$D0
    150  d1a2					      repend
    151  d1a3		       d0		      .byte.b	$D0
    150  d1a3					      repend
    151  d1a4		       d0		      .byte.b	$D0
    150  d1a4					      repend
    151  d1a5		       d0		      .byte.b	$D0
    150  d1a5					      repend
    151  d1a6		       d0		      .byte.b	$D0
    150  d1a6					      repend
    151  d1a7		       d0		      .byte.b	$D0
    150  d1a7					      repend
    151  d1a8		       d0		      .byte.b	$D0
    150  d1a8					      repend
    151  d1a9		       d0		      .byte.b	$D0
    150  d1a9					      repend
    151  d1aa		       d0		      .byte.b	$D0
    150  d1aa					      repend
    151  d1ab		       d0		      .byte.b	$D0
    150  d1ab					      repend
    151  d1ac		       d0		      .byte.b	$D0
    150  d1ac					      repend
    151  d1ad		       d0		      .byte.b	$D0
    150  d1ad					      repend
    151  d1ae		       d0		      .byte.b	$D0
    150  d1ae					      repend
    151  d1af		       d0		      .byte.b	$D0
    150  d1af					      repend
    151  d1b0		       d0		      .byte.b	$D0
    150  d1b0					      repend
    151  d1b1		       d0		      .byte.b	$D0
    150  d1b1					      repend
    151  d1b2		       d0		      .byte.b	$D0
    150  d1b2					      repend
    151  d1b3		       d0		      .byte.b	$D0
    150  d1b3					      repend
    151  d1b4		       d0		      .byte.b	$D0
    150  d1b4					      repend
    151  d1b5		       d0		      .byte.b	$D0
    150  d1b5					      repend
    151  d1b6		       d0		      .byte.b	$D0
    150  d1b6					      repend
    151  d1b7		       d0		      .byte.b	$D0
    150  d1b7					      repend
    151  d1b8		       d0		      .byte.b	$D0
    150  d1b8					      repend
    151  d1b9		       d0		      .byte.b	$D0
    150  d1b9					      repend
    151  d1ba		       d0		      .byte.b	$D0
    150  d1ba					      repend
    151  d1bb		       d0		      .byte.b	$D0
    150  d1bb					      repend
    151  d1bc		       d0		      .byte.b	$D0
    150  d1bc					      repend
    151  d1bd		       d0		      .byte.b	$D0
    150  d1bd					      repend
    151  d1be		       d0		      .byte.b	$D0
    150  d1be					      repend
    151  d1bf		       d0		      .byte.b	$D0
    150  d1bf					      repend
    151  d1c0		       d0		      .byte.b	$D0
    150  d1c0					      repend
    151  d1c1		       d0		      .byte.b	$D0
    150  d1c1					      repend
    151  d1c2		       d0		      .byte.b	$D0
    150  d1c2					      repend
    151  d1c3		       d0		      .byte.b	$D0
    150  d1c3					      repend
    151  d1c4		       d0		      .byte.b	$D0
    150  d1c4					      repend
    151  d1c5		       d0		      .byte.b	$D0
    150  d1c5					      repend
    151  d1c6		       d0		      .byte.b	$D0
    150  d1c6					      repend
    151  d1c7		       d0		      .byte.b	$D0
    150  d1c7					      repend
    151  d1c8		       d0		      .byte.b	$D0
    150  d1c8					      repend
    151  d1c9		       d0		      .byte.b	$D0
    150  d1c9					      repend
    151  d1ca		       d0		      .byte.b	$D0
    150  d1ca					      repend
    151  d1cb		       d0		      .byte.b	$D0
    150  d1cb					      repend
    151  d1cc		       d0		      .byte.b	$D0
    150  d1cc					      repend
    151  d1cd		       d0		      .byte.b	$D0
    150  d1cd					      repend
    151  d1ce		       d0		      .byte.b	$D0
    150  d1ce					      repend
    151  d1cf		       d0		      .byte.b	$D0
    150  d1cf					      repend
    151  d1d0		       d0		      .byte.b	$D0
    150  d1d0					      repend
    151  d1d1		       d0		      .byte.b	$D0
    150  d1d1					      repend
    151  d1d2		       d0		      .byte.b	$D0
    150  d1d2					      repend
    151  d1d3		       d0		      .byte.b	$D0
    150  d1d3					      repend
    151  d1d4		       d0		      .byte.b	$D0
    150  d1d4					      repend
    151  d1d5		       d0		      .byte.b	$D0
    150  d1d5					      repend
    151  d1d6		       d0		      .byte.b	$D0
    150  d1d6					      repend
    151  d1d7		       d0		      .byte.b	$D0
    150  d1d7					      repend
    151  d1d8		       d0		      .byte.b	$D0
    150  d1d8					      repend
    151  d1d9		       d0		      .byte.b	$D0
    150  d1d9					      repend
    151  d1da		       d0		      .byte.b	$D0
    150  d1da					      repend
    151  d1db		       d0		      .byte.b	$D0
    150  d1db					      repend
    151  d1dc		       d0		      .byte.b	$D0
    150  d1dc					      repend
    151  d1dd		       d0		      .byte.b	$D0
    150  d1dd					      repend
    151  d1de		       d0		      .byte.b	$D0
    150  d1de					      repend
    151  d1df		       d0		      .byte.b	$D0
    150  d1df					      repend
    151  d1e0		       d0		      .byte.b	$D0
    150  d1e0					      repend
    151  d1e1		       d0		      .byte.b	$D0
    150  d1e1					      repend
    151  d1e2		       d0		      .byte.b	$D0
    150  d1e2					      repend
    151  d1e3		       d0		      .byte.b	$D0
    150  d1e3					      repend
    151  d1e4		       d0		      .byte.b	$D0
    150  d1e4					      repend
    151  d1e5		       d0		      .byte.b	$D0
    150  d1e5					      repend
    151  d1e6		       d0		      .byte.b	$D0
    150  d1e6					      repend
    151  d1e7		       d0		      .byte.b	$D0
    150  d1e7					      repend
    151  d1e8		       d0		      .byte.b	$D0
    150  d1e8					      repend
    151  d1e9		       d0		      .byte.b	$D0
    150  d1e9					      repend
    151  d1ea		       d0		      .byte.b	$D0
    150  d1ea					      repend
    151  d1eb		       d0		      .byte.b	$D0
    150  d1eb					      repend
    151  d1ec		       d0		      .byte.b	$D0
    150  d1ec					      repend
    151  d1ed		       d0		      .byte.b	$D0
    150  d1ed					      repend
    151  d1ee		       d0		      .byte.b	$D0
    150  d1ee					      repend
    151  d1ef		       d0		      .byte.b	$D0
    150  d1ef					      repend
    151  d1f0		       d0		      .byte.b	$D0
    150  d1f0					      repend
    151  d1f1		       d0		      .byte.b	$D0
    150  d1f1					      repend
    151  d1f2		       d0		      .byte.b	$D0
    150  d1f2					      repend
    151  d1f3		       d0		      .byte.b	$D0
    150  d1f3					      repend
    151  d1f4		       d0		      .byte.b	$D0
    150  d1f4					      repend
    151  d1f5		       d0		      .byte.b	$D0
    150  d1f5					      repend
    151  d1f6		       d0		      .byte.b	$D0
    150  d1f6					      repend
    151  d1f7		       d0		      .byte.b	$D0
    150  d1f7					      repend
    151  d1f8		       d0		      .byte.b	$D0
    150  d1f8					      repend
    151  d1f9		       d0		      .byte.b	$D0
    150  d1f9					      repend
    151  d1fa		       d0		      .byte.b	$D0
    150  d1fa					      repend
    151  d1fb		       d0		      .byte.b	$D0
    150  d1fb					      repend
    151  d1fc		       d0		      .byte.b	$D0
    150  d1fc					      repend
    151  d1fd		       d0		      .byte.b	$D0
    150  d1fd					      repend
    151  d1fe		       d0		      .byte.b	$D0
    150  d1fe					      repend
    151  d1ff		       d0		      .byte.b	$D0
    152  d200					      repend
    153  d200				   Bank0
    154  d200		       ea		      nop
    155  d201		       ea		      nop
    156  d202		       ea		      nop
    157  d203							; these calls at the top of ROM are proxy/stub in both banks:
    158  d203							; the lines of code alternately don't execute (stub) but have a
    159  d203							; stub that does execute in the alternate bank -
    160  d203							; more simply, "Same matter can't occupy same space."
    161  d203
    162  d203		       4c 2e f2 	      jmp	jmparoundcallbank1ForMusicEngine
    163  d206				   callbank1ForMusicEngine
    164  d206		       ad f9 ff 	      lda	$fff9	; transfer to the same spot in bank1
    165  d209		       20 06 f2 	      jsr	callbank1ForMusicEngine	; dummy call placeholder, never executes (not recursive, will not loop and flood the stack)
    166  d20c		       ad 00 10 	      lda	$1000	; dummy placeholder for return call (lda $fff8/bank 0), never executes
    167  d20f		       60		      rts		; executes
    168  d210
    169  d210				   CallBank1ToLoadCBSRAMwithLargeBitmap
    170  d210		       ad f9 ff 	      lda	$fff9	; transfer to the same spot in bank1
    171  d213		       20 06 f2 	      jsr	callbank1ForMusicEngine	; dummy call placeholder, never executes (not recursive, will not loop and flood the stack)
    172  d216		       ad 00 10 	      lda	$1000	; dummy placeholder for return call (lda $fff8/bank 0), never executes
    173  d219		       60		      rts		; executes
    174  d21a
    175  d21a				   CallBank1ToLoadCBSRAMwithLargeBitmapSayingREADYPLAYER1
    176  d21a		       ad f9 ff 	      lda	$fff9	; transfer to the same spot in bank1
    177  d21d		       20 06 f2 	      jsr	callbank1ForMusicEngine	; dummy call placeholder, never executes (not recursive, will not loop and flood the stack)
    178  d220		       ad 00 10 	      lda	$1000	; dummy placeholder for return call (lda $fff8/bank 0), never executes
    179  d223		       60		      rts		; executes
    180  d224
    181  d224				   CallBank1ToLoadCBSRAMwithGameScreenBitmap
    182  d224		       ad f9 ff 	      lda	$fff9	; transfer to the same spot in bank1
    183  d227		       20 06 f2 	      jsr	callbank1ForMusicEngine	; dummy call placeholder, never executes (not recursive, will not loop and flood the stack)
    184  d22a		       ad 00 10 	      lda	$1000	; dummy placeholder for return call (lda $fff8/bank 0), never executes
    185  d22d		       60		      rts		; executes
    186  d22e
    187  d22e
    188  d22e				   jmparoundcallbank1ForMusicEngine
    189  d22e
    190  d22e
    191  d22e				   CLEAN_START		; ----SCROLLOUT ; LARGE PLAY AREA IS MALLEABLE IN CBS RAM
    192  d22e							; ---- see routine in bank 1 (Note: with CBS RAM only 3.5k in bank0; don't want to waste 1/4 k on each large ROM WYSIWYG bitmap here or we will quickly run out of space for game code!)
    193  d22e							;---- SCROLLOUT CORE is in FrameRelay (entire frame for plenty of cycles) along with the Twin Engines for abstract rendering
    194  d22e							;;Reset
    195  d22e
    196  d22e
    197  d22e							;clear ramplayfield check:
    198  d22e		       a2 1e		      ldx	#30	; clear 1/2 the ram page
    199  d230		       a9 00		      lda	#0
    200  d232
    201  d232		       95 a0	   clearram   sta	RAMplayfield,x
    202  d234		       ca		      dex
    203  d235		       d0 fb		      bne	clearram
    204  d237
    205  d237							;------------------------
    206  d237							;----------------------------------------
    207  d237							; ... ok init registers:
    208  d237		       a2 80		      ldx	#128
    209  d239		       95 00	   regs       sta	0,x
    210  d23b		       ca		      dex
    211  d23c		       d0 fb		      bne	regs
    212  d23e							; just the stack:
    213  d23e		       a2 ff		      ldx	#255
    214  d240		       9a		      txs		;init stack to FF - memory on the 2600 is $80-$FF!
    215  d241
    216  d241		       a9 16		      lda	#22
    217  d243		       85 94		      sta	scrollspeed	; set speed for demo
    218  d245		       a9 00		      lda	#0	; test 
    219  d247		       85 95		      sta	scrollspeedinit
    220  d249		       85 90		      sta	BITIndex	; column 5 breaking?
    221  d24b
    222  d24b							;lda #36 ; test 3rd row down start (0,3)
    223  d24b		       a9 00		      lda	#0
    224  d24d		       85 9d		      sta	BYTErowoffset	; each row size (12 bytes) inc's Y value 1 from (x,0)
    225  d24f
    226  d24f		       a9 00		      lda	#0
    227  d251		       85 81		      sta	SUSTAINFORFRAMES	; intialize music engine to read score
    228  d253		       85 8e		      sta	PLAYFIELDINDEX	; init playfield index offset
    229  d255
    230  d255							; lda #0
    231  d255		       85 80		      sta	MUSICINDEX	; initialize music engine ROM song offset at beginning of score
    232  d257
    233  d257							;sta SWACNT ; ($0281), configure all 8 bits of SWCHA ($0280) for input
    234  d257							; should already be set
    235  d257
    236  d257		       a9 0a		      lda	#10
    237  d259		       85 8f		      sta	PLAYFIELDINDEXstep	; count down to 0 and reset for each inc of index
    238  d25b
    239  d25b		       a9 32		      lda	#50
    240  d25d		       85 08		      sta	COLUPF	; playfield colour
    241  d25f
    242  d25f		       a9 25		      lda	#%00100101
    243  d261							;------------------------------------
    244  d261							; init section:		    --
    245  d261							;------------------------------------
    246  d261
    247  d261							;-- init variable F for sprite animation demo:
    248  d261		       a9 18		      lda	#24
    249  d263		       85 87		      sta	f
    250  d265
    251  d265							;-- Put player sprites in center of screen
    252  d265		       a9 2d		      lda	#45	; (Y value runs from 1-96 so 45 is center)
    253  d267		       85 9f		      sta	player0y	; non zero coordinate values also initialises sprite to appear
    254  d269		       85 e1		      sta	player1y
    255  d26b		       a9 46		      lda	#70	; (x value runs from 1 to 150 so 70 and 80 are next to center)
    256  d26d		       85 9e		      sta	player0x
    257  d26f		       a9 50		      lda	#80
    258  d271		       85 e0		      sta	player1x
    259  d273
    260  d273							;-- Hide Missile sprites (0 the x and y coordinate variables)
    261  d273		       a9 00		      lda	#0
    262  d275		       85 e2		      sta	missile0x
    263  d277		       85 e3		      sta	missile0y
    264  d279		       85 e4		      sta	missile1x
    265  d27b		       85 e5		      sta	missile1y
    266  d27d
    267  d27d		       a9 58		      lda	#$58
    268  d27f		       85 06		      sta	COLUP0	; colour of player0 (player 1)
    269  d281		       a9 64		      lda	#100
    270  d283		       85 07		      sta	COLUP1
    271  d285
    272  d285
    273  d285		       a9 c4		      lda	#$c4	;#$b6;#75
    274  d287		       85 08		      sta	COLUPF	; playfield solid colour
    275  d289
    276  d289
    277  d289							;-- load default sprite image 1 into player 0 sprite:
    278  d289		       a0 00		      ldy	#0
    279  d28b		       20 f9 f3 	      jsr	loadplayer0
    280  d28e
    281  d28e							;-- load default sprite image 2 for player 1 sprite:
    282  d28e		       a0 08		      ldy	#8
    283  d290		       20 06 f4 	      jsr	loadplayer1
    284  d293
    285  d293
    286  d293							; ----- subroutine: load large play area into superchip RAM
    287  d293		       20 10 f2 	      jsr	CallBank1ToLoadCBSRAMwithLargeBitmap
    288  d296
    289  d296
    290  d296							;--- test bitsetting/detection bug:  - can't set 5th bit, bit 4!
    291  d296							; ldx #1 ;
    292  d296							; bne donetest
    293  d296							;testbitsetbug
    294  d296							; stx bitx
    295  d296							; lda #7
    296  d296							; sta bity
    297  d296
    298  d296							; txa
    299  d296							; pha
    300  d296
    301  d296							; lda #1
    302  d296							; jsr getbitstatus
    303  d296
    304  d296							; pla
    305  d296							; tax
    306  d296							; dex
    307  d296							; cpx #0
    308  d296							; bne testbitsetbug
    309  d296							;donetest
    310  d296							;---- end test
    311  d296
    312  d296
    313  d296
    314  d296							; jsr AbstractPlayfieldBuilder       ; ok in init...
    315  d296
    316  d296							;jsr framerelay
    317  d296							;------------------------------------------------------------
    318  d296				   StartOfFrame 		;-----------------------------------------------
    319  d296							;------------------------------------------------------------
    320  d296		       20 b2 f9 	      jsr	framerelay	; do lots of stuff during a blank frame :)
    321  d299
    322  d299
    323  d299		       a9 00		      lda	#0
    324  d29b		       85 01		      sta	VBLANK
    325  d29d		       a9 02		      lda	#2
    326  d29f		       85 00		      sta	VSYNC	; vertical sync signal; initiate electron guns to upper left corner!
    327  d2a1
    328  d2a1		       85 02		      sta	WSYNC	; 3 scanlines worth of vertical sync (so TV get's a lock on it)
    329  d2a3		       85 02		      sta	WSYNC
    330  d2a5		       85 02		      sta	WSYNC
    331  d2a7
    332  d2a7		       a9 00		      lda	#0
    333  d2a9		       85 00		      sta	VSYNC	; vertical sync finished
    334  d2ab
    335  d2ab							;---------------------------------------------
    336  d2ab							; 37 Scanlines of Vertical Blank
    337  d2ab							;---------------------------------------------
    338  d2ab		       a2 00		      ldx	#0
    339  d2ad
    340  d2ad							;DYNAMIC VERTICAL BLANK:
    341  d2ad							; 37 x 76 = 2812 ... /64 = 44 ; IT'S 43.94 - SHOULD i LDX 43 AND WSYNC AFTERWARDS?  
    342  d2ad							; YES OTHERWISE THAT'S 2816 .. 4 CYCLES OVER, 43 & TRAILING WSYNC SHOULD BE 2812
    343  d2ad
    344  d2ad		       a2 2b		      ldx	#43	; #41;#43
    345  d2af		       8e 96 02 	      stx	TIM64T
    346  d2b2
    347  d2b2							; 2740 cycles free for calls here ;)
    348  d2b2
    349  d2b2							; here's one, reverse byte subroutine, how many cycles?
    350  d2b2
    351  d2b2							;   lda #%11110101
    352  d2b2							;  sta PF2
    353  d2b2							; sta REVBT
    354  d2b2							; test reverse byte routine:
    355  d2b2							; jsr ReverseB 
    356  d2b2							;lda REVBT ; optional, accumulator already has the reverse byte
    357  d2b2							; sta PF1
    358  d2b2
    359  d2b2							; need to fit it here; building scrolling functionality (prefetch)
    360  d2b2							; in the bottom blank so need it each frame
    361  d2b2
    362  d2b2							;jsr AbstractPlayfieldBuilder ; it can fit here (cramped) but better in init
    363  d2b2
    364  d2b2
    365  d2b2		       a9 0a		      lda	#10
    366  d2b4		       85 8f		      sta	PLAYFIELDINDEXstep	; count down to 0 and reset for each inc of index
    367  d2b6
    368  d2b6							;------------Music Engine Call:
    369  d2b6							;--------------------------------
    370  d2b6							;relocate later, sprite engine should go here, also needs optimization:
    371  d2b6
    372  d2b6		       20 06 f2 	      jsr	callbank1ForMusicEngine	;= jsr PlayMusic, music engine is in bank1
    373  d2b9							;--------------------------------
    374  d2b9							;--------------------------------
    375  d2b9
    376  d2b9
    377  d2b9
    378  d2b9
    379  d2b9							; use remaining timeslice for electron beam
    380  d2b9
    381  d2b9		       a9 00		      lda	#0
    382  d2bb		       85 82		      sta	a	; init temp var to 0 for sprite 0
    383  d2bd		       85 83		      sta	b	; init temp var to 0 for sprite 1
    384  d2bf							;  sta player1x ;! bug, this is overwriting screen buffer ram... check ram buffer DIRECTION
    385  d2bf							; lda #180
    386  d2bf							; sta player1y
    387  d2bf
    388  d2bf							;debug: these two lines turn off player0 (0,0 coordinates collapse sprite object)
    389  d2bf							;   sta player0x
    390  d2bf							;   sta player0y
    391  d2bf
    392  d2bf
    393  d2bf							;----------
    394  d2bf
    395  d2bf							;----------
    396  d2bf							;jmp MyVerticalBlank ;debug
    397  d2bf
    398  d2bf		       a5 9e		      lda	player0x	; desired position argument AND zero flag kick out
    399  d2c1		       f0 05		      beq	skipplayer0horizontalsetup
    400  d2c3		       a2 00		      ldx	#0	; 0 for player1
    401  d2c5
    402  d2c5
    403  d2c5							;sta HMCLR
    404  d2c5
    405  d2c5
    406  d2c5
    407  d2c5		       20 95 f3 	      jsr	TheMagicRoutine	; :-)
    408  d2c8
    409  d2c8
    410  d2c8
    411  d2c8				   skipplayer0horizontalsetup
    412  d2c8
    413  d2c8							;; jsr callbank1ForMusicEngine   ;= jsr PlayMusic, music engine is in bank1
    414  d2c8
    415  d2c8
    416  d2c8
    417  d2c8
    418  d2c8							; call horizontal positioning for 2nd sprite?
    419  d2c8		       a5 e0		      lda	player1x	; desired position argument AND zero flag kick out
    420  d2ca		       f0 05		      beq	skipplayer0horizontalsetup2
    421  d2cc		       a2 01		      ldx	#1	; 1 for player2
    422  d2ce
    423  d2ce							;sta HMCLR   ; this clears HMPx fine tuners
    424  d2ce
    425  d2ce							; jsr PosObject
    426  d2ce							;   sta WSYNC
    427  d2ce							;sta HMOVE
    428  d2ce
    429  d2ce		       20 95 f3 	      jsr	TheMagicRoutine	; :-)
    430  d2d1
    431  d2d1							;STY HMP0,X		   ; Fine positioning value
    432  d2d1				   skipplayer0horizontalsetup2
    433  d2d1							;--
    434  d2d1							; call horizontal positioning for 3rd sprite?
    435  d2d1		       a5 e2		      lda	missile0x	; desired position argument AND zero flag kick out
    436  d2d3		       f0 05		      beq	skipplayer0horizontalsetup3
    437  d2d5		       a2 02		      ldx	#2	; 2 for missile0
    438  d2d7
    439  d2d7		       20 95 f3 	      jsr	TheMagicRoutine	; :-)
    440  d2da
    441  d2da							;STY HMP0,X		   ; Fine positioning value
    442  d2da				   skipplayer0horizontalsetup3
    443  d2da
    444  d2da							;--4
    445  d2da							;--
    446  d2da							; call horizontal positioning for 4th sprite
    447  d2da		       a5 e4		      lda	missile1x	; desired position argument AND zero flag kick out
    448  d2dc		       f0 05		      beq	skipplayer0horizontalsetup4
    449  d2de		       a2 03		      ldx	#3	; 3 for missile1
    450  d2e0
    451  d2e0		       20 95 f3 	      jsr	TheMagicRoutine	; :-)
    452  d2e3
    453  d2e3							;STY HMP0,X		   ; Fine positioning value
    454  d2e3				   skipplayer0horizontalsetup4
    455  d2e3
    456  d2e3
    457  d2e3		       85 02		      STA	WSYNC
    458  d2e5		       85 2a		      STA	HMOVE
    459  d2e7
    460  d2e7
    461  d2e7
    462  d2e7
    463  d2e7
    464  d2e7				   MyVerticalBlank		;	    using timer instead of sta WSYNC
    465  d2e7		       ad 84 02 	      lda	INTIM
    466  d2ea		       d0 fb		      bne	MyVerticalBlank
    467  d2ec
    468  d2ec
    469  d2ec
    470  d2ec		       85 02		      STA	WSYNC	; TRAILING WSYNC (USED 43 INSTEAD OF 44 FOR INTIM)
    471  d2ee
    472  d2ee
    473  d2ee
    474  d2ee
    475  d2ee
    476  d2ee
    477  d2ee
    478  d2ee
    479  d2ee
    480  d2ee
    481  d2ee
    482  d2ee							;---------------------------------------------
    483  d2ee							; 192 scanline playfield core ----------------
    484  d2ee							;---------------------------------------------
    485  d2ee		       a2 60		      ldx	#96	;   #0; #96; #0 ; framerelay is an entire frame;96x2=192
    486  d2f0							;;stx c; using temp var c to keep x free for indexing
    487  d2f0
    488  d2f0							;  push bitmap 40x10 playfield screen within core:
    489  d2f0
    490  d2f0		       a4 8e		      ldy	PLAYFIELDINDEX	; increment by six every 10 pixels so y is 10 pix high
    491  d2f2							; same as ldy #0 since it's initialised ; RAMplayfield offset
    492  d2f2
    493  d2f2							; sta WSYNC
    494  d2f2							; lda #0
    495  d2f2
    496  d2f2							;FIX
    497  d2f2		       85 02		      sta	WSYNC
    498  d2f4		       85 02		      sta	WSYNC
    499  d2f6
    500  d2f6
    501  d2f6
    502  d2f6				   MyPlayfieldCore
    503  d2f6
    504  d2f6							;  hmmm... 192/2 = 96 addressable pixels (perfect)
    505  d2f6							;  with 152 (76*2) cycles
    506  d2f6							;  
    507  d2f6							;  count out manually before the trailer
    508  d2f6							;  ----
    509  d2f6
    510  d2f6
    511  d2f6							;		  stx COLUPF ; playfield rainbow colour
    512  d2f6
    513  d2f6
    514  d2f6		       b9 a0 00 	      lda	RAMplayfield,y	; y now points to MyPlayfield bitmap array
    515  d2f9							;;;  lda RAMplayfieldByte1
    516  d2f9		       85 0d		      sta	PF0
    517  d2fb							;;    iny
    518  d2fb							;  lda RAMplayfieldByte2 ;
    519  d2fb		       b9 a1 00 	      lda	RAMplayfield,y+1
    520  d2fe		       85 0e		      sta	PF1
    521  d300							;;   iny
    522  d300		       b9 a2 00 	      lda	RAMplayfield,y+2
    523  d303		       85 0f		      sta	PF2
    524  d305							;;  iny
    525  d305
    526  d305							; wait until scanline is half way through...
    527  d305							; enough cycles already, 5+3+6+3+6+3=26
    528  d305
    529  d305							; inx
    530  d305		       b9 a3 00 	      lda	RAMplayfield,y+3	; y now points to MyPlayfield bitmap array
    531  d308		       85 0d		      sta	PF0
    532  d30a							;;  iny
    533  d30a		       b9 a4 00 	      lda	RAMplayfield,y+4
    534  d30d		       85 0e		      sta	PF1
    535  d30f							;;   iny
    536  d30f		       b9 a5 00 	      lda	(RAMplayfield,y+5
    537  d312		       85 0f		      sta	PF2
    538  d314							;;   iny
    539  d314
    540  d314							; 53 cycles so far
    541  d314
    542  d314							;------- end time between lines (76 cycles or less!)
    543  d314
    544  d314
    545  d314							; tya			       ;2
    546  d314		       c6 8f		      dec	PLAYFIELDINDEXstep	; 6
    547  d316		       f0 04		      beq	obtainnewposition	; 3   
    548  d318							;tya			
    549  d318							;   pha
    550  d318		       84 84		      sty	c	; 3  - less cycles than tya pha... pla tay...
    551  d31a		       d0 0a		      bne	stepovermtn	;
    552  d31c				   obtainnewposition		; 
    553  d31c							;pha ;3
    554  d31c							;GOTO NEXT PIXEL ROW:
    555  d31c		       98		      tya		;2
    556  d31d		       18		      clc		;2
    557  d31e		       69 06		      adc	#6	;2
    558  d320							; tay			   
    559  d320							;pha			   ;4!0
    560  d320		       85 84		      sta	c	;3
    561  d322		       a9 0a		      lda	#10	; 2
    562  d324		       85 8f		      sta	PLAYFIELDINDEXstep	; 3
    563  d326
    564  d326				   stepovermtn
    565  d326
    566  d326
    567  d326							;------------cycle border
    568  d326							;----- save these three cycles, already four cycles away:   sta WSYNC
    569  d326							;;; inx
    570  d326
    571  d326		       e4 e3		      cpx	missile0y	; 3
    572  d328		       f0 04		      beq	Missile0on	;2
    573  d32a		       a9 00		      lda	#0	;3
    574  d32c		       f0 02		      beq	missile0done	;2
    575  d32e				   Missile0on
    576  d32e		       a9 0a		      lda	#10	;3
    577  d330				   missile0done
    578  d330		       85 1d		      sta	ENAM0	;3
    579  d332
    580  d332
    581  d332
    582  d332		       a9 00		      lda	#0	;2
    583  d334
    584  d334		       85 0d		      sta	PF0	;3
    585  d336
    586  d336		       85 0e		      sta	PF1	;3
    587  d338
    588  d338		       85 0f		      sta	PF2	;3
    589  d33a							; accumulator already zero :
    590  d33a		       e4 e5		      cpx	missile1y	;3
    591  d33c		       d0 02		      bne	missile1set	;2
    592  d33e							;txa ;2      
    593  d33e		       a9 0b		      lda	#11
    594  d340				   missile1set
    595  d340		       85 1e		      sta	ENAM1	; 3
    596  d342
    597  d342							;-------------------------------------
    598  d342							; 11 cycles and counting!
    599  d342
    600  d342
    601  d342							;jmp jumparoundspriteinitb	;debug
    602  d342
    603  d342
    604  d342		       a4 82		      ldy	a	;3
    605  d344		       d0 04		      bne	savecycles	; 3
    606  d346		       84 1b		      sty	GRP0	; clears sprite register when it's 0 ;)   ; 0 cycles
    607  d348		       f0 0a		      beq	jumparoundspritedetail	;0 cycles
    608  d34a							; lda #%01100101   ;TESTDATA, 1
    609  d34a		       88	   savecycles dey		; 2
    610  d34b							;----------------19 cycles ... so far
    611  d34b
    612  d34b		       b9 f0 f1 	      lda	Sprite0SCR,y	;	 sprite0   ; 4 (absolute,y)
    613  d34e							;lda  TESTDATA-1,y ;
    614  d34e		       85 1b		      sta	GRP0	; 3
    615  d350		       84 82		      sty	a	; 3
    616  d352		       50 08		      bvc	jumparoundspriteinit	;3
    617  d354							;jmp jumparoundspriteinit ;3
    618  d354				   jumparoundspritedetail
    619  d354
    620  d354							;-----------------------32 cycles ... so far
    621  d354
    622  d354		       e4 9f		      cpx	player0y	;3!0
    623  d356							;lda c
    624  d356							;cmp player0y
    625  d356		       d0 04		      bne	jumparoundspriteinit	;2!0
    626  d358		       a9 08		      lda	#8	; 8x8 sprite matrice ; 2!0
    627  d35a		       85 82		      sta	a	; 3!0
    628  d35c				   jumparoundspriteinit
    629  d35c
    630  d35c							;---------------------39 cycles
    631  d35c							;debug:
    632  d35c							;; jmp jumparoundspriteinitb ; save many cycles
    633  d35c
    634  d35c							;--sprite for player2
    635  d35c		       a4 83		      ldy	b	;3
    636  d35e							; beq fixsprite2 ;fix;
    637  d35e		       d0 04		      bne	savecycles2	;		3
    638  d360		       84 1c		      sty	GRP1	; 0
    639  d362		       f0 0a		      beq	jumparoundspritedetailb	;0
    640  d364		       88	   savecycles2 dey		;2
    641  d365		       b9 f8 f1 	      lda	Sprite1SCR,y	;  ;	       ;4
    642  d368							;lda TESTDATA-1,y
    643  d368		       85 1c		      sta	GRP1	;3
    644  d36a		       84 83		      sty	b	;3
    645  d36c							;jmp jumparoundspriteinitb
    646  d36c		       50 08		      bvc	jumparoundspriteinitb
    647  d36e				   jumparoundspritedetailb
    648  d36e							;-------------------------------------57 cycles so far
    649  d36e		       e4 e1		      cpx	player1y	; 3
    650  d370		       d0 04		      bne	jumparoundspriteinitb	; 2
    651  d372		       a9 08		      lda	#8	; 8x8 sprite matrice	  ;2
    652  d374		       85 83		      sta	b	; 3
    653  d376				   jumparoundspriteinitb
    654  d376							;--- 67 cycles
    655  d376							;--end sprite for player2
    656  d376
    657  d376							; pull y back
    658  d376							; pla		;4
    659  d376							; tay		;2
    660  d376		       a4 84		      ldy	c
    661  d378
    662  d378
    663  d378
    664  d378
    665  d378							; nop
    666  d378							; nop
    667  d378							; nop
    668  d378							; nop
    669  d378
    670  d378							;nop
    671  d378
    672  d378							;nop
    673  d378							; nop
    674  d378							; nop
    675  d378							; nop
    676  d378							;-- 76 cycles ...... need to push some to the previous line
    677  d378
    678  d378
    679  d378							;nop
    680  d378							;nop
    681  d378		       85 02		      sta	WSYNC
    682  d37a
    683  d37a
    684  d37a							; cpx #96; #192; #96 ; either offseting it at the top or the bottom of the loop changes the visible rainbow colours ;)
    685  d37a							;cmp #96
    686  d37a		       ca		      dex		;2
    687  d37b							;STA WSYNC
    688  d37b							;    bne MyPlayfieldCore   ;3
    689  d37b		       f0 03		      beq	doneplayfieldcore
    690  d37d		       4c f6 f2 	      jmp	MyPlayfieldCore
    691  d380				   doneplayfieldcore
    692  d380							;---------------------------------------------------
    693  d380							;-----Vertical Blank -------------------------------
    694  d380							;---------------------------------------------------
    695  d380		       a9 42		      lda	#%01000010
    696  d382							;sta VBLANK
    697  d382		       85 01		      sta	VBLANK	; vertical blank time after screen is drawn
    698  d384		       a2 00		      ldx	#0
    699  d386
    700  d386
    701  d386							; DYNAMIC OVERSCAN:
    702  d386							; seeded with ? to match 30 calls to WSYNC?
    703  d386							; (30 x 76)/64 = 35.6 
    704  d386
    705  d386		       a2 23		      ldx	#35
    706  d388		       8e 96 02 	      stx	TIM64T	; 
    707  d38b
    708  d38b
    709  d38b							; These events all take time and should make use of timer regs
    710  d38b							; dynamic timer should be seeded with one for scanline by scanline work
    711  d38b
    712  d38b							; ... done, there are 2000 cycles available:
    713  d38b
    714  d38b
    715  d38b							; notenough time! relocate to the blank space above the screen:     jsr PlayMusic
    716  d38b
    717  d38b							;	 jsr DanceToMusic
    718  d38b							;  jsr pushabstractextendedplayfield
    719  d38b
    720  d38b
    721  d38b
    722  d38b				   Overscan		;DYNAMIC:
    723  d38b
    724  d38b
    725  d38b							;  sta WSYNC
    726  d38b							;	  inx
    727  d38b							;	  cpx #30
    728  d38b		       ad 84 02 	      lda	INTIM
    729  d38e
    730  d38e		       d0 fb		      bne	Overscan
    731  d390		       85 02		      sta	WSYNC	; trailer
    732  d392
    733  d392
    734  d392		       4c 96 f2 	      jmp	StartOfFrame
    735  d395
    736  d395
    737  d395							;---------------------------------
    738  d395							;---
    739  d395							;Optimised algorythm for positioning the 5 sprite objects horizontally:
    740  d395							;
    741  d395							;---- The Battlezone Horizontal Positioning Routine
    742  d395				   TheMagicRoutine
    743  d395		       c9 11	   LD7E0      CMP	#$11	;2
    744  d397		       b0 06		      BCS	LD7EA	;2
    745  d399		       e9 04		      SBC	#$04	;2
    746  d39b		       b0 02		      BCS	LD7EA	;2
    747  d39d		       69 a5		      ADC	#$A5	;2
    748  d39f		       85 02	   LD7EA      STA	WSYNC	;3
    749  d3a1							;;	  STA	 HMOVE	 ;3
    750  d3a1		       e9 0f	   LD7EE      SBC	#$0F	;2
    751  d3a3		       b0 fc		      BCS	LD7EE	;2 ->5 cycles per iteration!
    752  d3a5		       49 07		      eor	#$07	;2
    753  d3a7		       0a		      ASL		;2
    754  d3a8		       0a		      ASL		;2
    755  d3a9		       0a		      ASL		;2
    756  d3aa		       0a		      ASL		;2
    757  d3ab		       a8		      TAY		;2
    758  d3ac
    759  d3ac		       95 10		      STA	RESP0,X
    760  d3ae		       95 20		      STa	HMP0,X	; Fine positioning value
    761  d3b0
    762  d3b0							;  STA    WSYNC   ;3
    763  d3b0							;  STA    HMOVE   ;3
    764  d3b0
    765  d3b0		       60		      RTS		;6
    766  d3b1
    767  d3b1
    768  d3b1
    769  d3b1							;---------------------------------
    770  d3b1							;---
    771  d3b1
    772  d3b1
    773  d3b1
    774  d3b1
    775  d3b1							;-------------------------------
    776  d3b1							; -- playfield screen data 40x10, 60 bytes
    777  d3b1							;-------------------------------
    778  d3b1							; don't think so, commenting this out:
    779  d3b1							; "That's what computes are for" - Dr Walter Gibs
    780  d3b1							;MyPlayfield
    781  d3b1							;  .byte %11111111,%11111111,%11111111,%00000000,%10101010,%00000011
    782  d3b1							;  .byte %00000000,%00000000,%00000000,%10000000,%10000000,%10000000
    783  d3b1							;  .byte %11110000,%11111111,%11111111,%11110000,%11111111,%11110011
    784  d3b1							;  .byte %00000000,%00000000,%00000000,%00000000,%10101011,%11110000
    785  d3b1							;	  flip hb		flip	 flip		    flip hb
    786  d3b1							;  .byte %10110000,%00001111,%11000000,%00110000,%11110000,%00000000
    787  d3b1							;  .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000
    788  d3b1							;  .byte %11111111,%10101010,%11111111,%00000000,%00000000,%00000000
    789  d3b1							;  .byte %00000000,%00000000,%00000000,%11111111,%11110111,%10111111
    790  d3b1							;  .byte %11111111,%11110011,%11111111,%00000000,%00000000,%00000000
    791  d3b1
    792  d3b1							; this row may be just a couple of scanlines short:
    793  d3b1
    794  d3b1							; .byte %11110000,%11111111,%11100111,%10110000,%11111111,%11101111
    795  d3b1
    796  d3b1							;MyAbstractExtendedPlayfield ; 20x10 grid (3 bytes) is read from a larger play area 5x as wide (12 bytes)
    797  d3b1							;;	     1 0      4  2	12   3	   20	 4    28    5	 36	6   44	   7   52     8    60	  9  68 72* 10	 76    11    84   12
    798  d3b1							;  .byte %00000111, %11011111, %11011111, %00001111, %11101111, %11011111, %00001111, %11111011, %01000101, %01000111, %01000100, %01100111
    799  d3b1							;  .byte %00001011, %10101100, %10111011, %11111111, %11001111, %10101111, %00001111, %11111011, %01011101, %01010111, %01110111, %01010111
    800  d3b1							;  .byte %00001101, %01110111, %01000011, %11001111, %10000000, %00110111, %00001111, %11111000, %01000101, %01010111, %01000100, %11000011
    801  d3b1							;  .byte %00001110, %11111010, %11111011, %00001111, %11001110, %11111011, %00001111, %10011011, %01011101, %01010111, %01011111, %01110111
    802  d3b1							;  .byte %00001101, %01111101, %00000011, %11000111, %11111101, %11111101, %00001111, %01111011, %01000101, %01000111, %01000100, %01110111
    803  d3b1							;  .byte %00001011, %10111011, %01111011, %00001011, %11111011, %11111110, %10001110, %11111111, %11111111, %11111111, %11111111, %11111111
    804  d3b1							;  .byte %00000111, %11010111, %00111011, %11001101, %11110111, %11111111, %01001101, %01001111, %10111011, %11011111, %11111111, %11110001
    805  d3b1							;  .byte %00001011, %11101111, %01011011, %11001110, %11101111, %11111111, %10101011, %01001101, %10111010, %11011011, %01101110, %00111011
    806  d3b1							;  .byte %00001000, %11010111, %00000011, %00001111, %01011111, %11111111, %01010111, %01001001, %00010010, %10011011, %01100110, %00111011
    807  d3b1							;  .byte %00001111, %10111011, %11111111, %00001111, %10111111, %11111111, %00101111, %01001001, %00010010, %10011001, %01000010, %00111111
    808  d3b1
    809  d3b1
    810  d3b1							;-------------------------------------
    811  d3b1							;--WYSIWYG inline Sprite Library 
    812  d3b1							;-------------------------------------
    813  d3b1							; jsr loadplayer0, loadplayer1, y is the index argument
    814  d3b1							; (set y to 0/8/16/24/etc to load image 1/2/3/4/etc) 
    815  d3b1							; (target image is loaded upside down into high RAM)
    816  d3b1							;-------------------------------------
    817  d3b1				   SPRITEDATA
    818  d3b1							;------------------sprite image 1 (ldy #0)
    819  d3b1		       38		      .byte.b	%00111000
    820  d3b2		       44		      .byte.b	%01000100
    821  d3b3		       38		      .byte.b	%00111000
    822  d3b4		       10		      .byte.b	%00010000
    823  d3b5		       7c		      .byte.b	%01111100
    824  d3b6		       ba		      .byte.b	%10111010
    825  d3b7		       b9		      .byte.b	%10111001
    826  d3b8		       c6		      .byte.b	%11000110
    827  d3b9							;------------------sprite image 2 (ldy #8)
    828  d3b9		       ff		      .byte.b	%11111111
    829  d3ba		       91		      .byte.b	%10010001
    830  d3bb		       fe		      .byte.b	%11111110
    831  d3bc		       94		      .byte.b	%10010100
    832  d3bd		       98		      .byte.b	%10011000
    833  d3be		       90		      .byte.b	%10010000
    834  d3bf		       a0		      .byte.b	%10100000
    835  d3c0		       c0		      .byte.b	%11000000
    836  d3c1							;------------------sprite image 3 (ldy #16)
    837  d3c1		       ff		      .byte.b	%11111111
    838  d3c2		       81		      .byte.b	%10000001
    839  d3c3		       81		      .byte.b	%10000001
    840  d3c4		       81		      .byte.b	%10000001
    841  d3c5		       81		      .byte.b	%10000001
    842  d3c6		       81		      .byte.b	%10000001
    843  d3c7		       81		      .byte.b	%10000001
    844  d3c8		       ff		      .byte.b	%11111111
    845  d3c9
    846  d3c9
    847  d3c9							;------------------sprite image 4 (ldy #24)
    848  d3c9		       00		      .byte.b	%00000000
    849  d3ca		       7e		      .byte.b	%01111110
    850  d3cb		       42		      .byte.b	%01000010
    851  d3cc		       42		      .byte.b	%01000010
    852  d3cd		       42		      .byte.b	%01000010
    853  d3ce		       42		      .byte.b	%01000010
    854  d3cf		       7e		      .byte.b	%01111110
    855  d3d0		       00		      .byte.b	%00000000
    856  d3d1
    857  d3d1							;------------------sprite image 5 (ldy #32)
    858  d3d1		       00		      .byte.b	%00000000
    859  d3d2		       00		      .byte.b	%00000000
    860  d3d3		       3c		      .byte.b	%00111100
    861  d3d4		       24		      .byte.b	%00100100
    862  d3d5		       24		      .byte.b	%00100100
    863  d3d6		       3c		      .byte.b	%00111100
    864  d3d7		       00		      .byte.b	%00000000
    865  d3d8		       00		      .byte.b	%00000000
    866  d3d9
    867  d3d9							;------------------sprite image 6 (ldy #40)
    868  d3d9
    869  d3d9		       00		      .byte.b	%00000000
    870  d3da		       00		      .byte.b	%00000000
    871  d3db		       00		      .byte.b	%00000000
    872  d3dc		       18		      .byte.b	%00011000
    873  d3dd		       18		      .byte.b	%00011000
    874  d3de		       00		      .byte.b	%00000000
    875  d3df		       00		      .byte.b	%00000000
    876  d3e0		       00		      .byte.b	%00000000
    877  d3e1
    878  d3e1							;------------------sprite image 7 (ldy #48)
    879  d3e1		       00		      .byte.b	%00000000
    880  d3e2		       00		      .byte.b	%00000000
    881  d3e3		       18		      .byte.b	%00011000
    882  d3e4		       24		      .byte.b	%00100100
    883  d3e5		       24		      .byte.b	%00100100
    884  d3e6		       18		      .byte.b	%00011000
    885  d3e7		       00		      .byte.b	%00000000
    886  d3e8		       00		      .byte.b	%00000000
    887  d3e9
    888  d3e9							;------------------sprite image 8 (ldy #56)
    889  d3e9		       00		      .byte.b	%00000000
    890  d3ea		       3c		      .byte.b	%00111100
    891  d3eb		       42		      .byte.b	%01000010
    892  d3ec		       42		      .byte.b	%01000010
    893  d3ed		       42		      .byte.b	%01000010
    894  d3ee		       42		      .byte.b	%01000010
    895  d3ef		       3c		      .byte.b	%00111100
    896  d3f0		       00		      .byte.b	%00000000
    897  d3f1
    898  d3f1							;------------------sprite image 9 (ldy #64)
    899  d3f1		       7e		      .byte.b	%01111110
    900  d3f2		       81		      .byte.b	%10000001
    901  d3f3		       81		      .byte.b	%10000001
    902  d3f4		       81		      .byte.b	%10000001
    903  d3f5		       81		      .byte.b	%10000001
    904  d3f6		       81		      .byte.b	%10000001
    905  d3f7		       81		      .byte.b	%10000001
    906  d3f8		       7e		      .byte.b	%01111110
    907  d3f9
    908  d3f9							;------------------------------------
    909  d3f9				   loadplayer0
    910  d3f9							;------------------------------------
    911  d3f9							; (set y argument to 0/8/16/24/etc to load image 1/2/3/4) 
    912  d3f9							; (target image is loaded upside down into high RAM)
    913  d3f9							;------------------------------------
    914  d3f9		       a2 08		      ldx	#8
    915  d3fb		       b9 b1 f3    PushSprite0toCBSRAM lda	SPRITEDATA,y	; get 1st byte of selected sprite from ROM image library
    916  d3fe		       c8		      iny
    917  d3ff		       ca		      dex
    918  d400		       9d f0 f0 	      sta	Sprite0SCW,x	; put it in high RAM upside down 
    919  d403		       d0 f6		      bne	PushSprite0toCBSRAM
    920  d405		       60		      rts
    921  d406							;---
    922  d406				   loadplayer1
    923  d406							;------------------------------------
    924  d406							; (set y argument to 0/8/16/24/etc to load image 1/2/3/4) 
    925  d406							; (target image is loaded upside down into high RAM)
    926  d406							;------------------------------------
    927  d406		       a2 08		      ldx	#8
    928  d408		       b9 b1 f3    PushSprite1toCBSRAM lda	SPRITEDATA,y	; get 1st byte of selected sprite from ROM image library
    929  d40b		       c8		      iny
    930  d40c		       ca		      dex
    931  d40d		       9d f8 f0 	      sta	Sprite1SCW,x	; put it in high RAM upside down 
    932  d410		       d0 f6		      bne	PushSprite1toCBSRAM
    933  d412		       60		      rts
    934  d413							;------------------------------------
    935  d413							;-- End Sprite Library
    936  d413							;------------------------------------
    937  d413
    938  d413
    939  d413
    940  d413							;TESTDATA
    941  d413							;  .byte %00011000
    942  d413							;  .byte %11111111
    943  d413							;  .byte %00001100
    944  d413							;  .byte %00001100
    945  d413							;  .byte %01011100
    946  d413							;  .byte %11111100
    947  d413							;  .byte %11111100
    948  d413							;  .byte %00001100
    949  d413							;  .byte %11111111
    950  d413							;  .byte %00011000
    951  d413
    952  d413							; .byte %00001000, %11101111, %00000011
    953  d413							; .byte %00001111, %00000001, %11111011
    954  d413							;  .byte %00001000, %10111101, %00000011
    955  d413							;  .byte %00001000, %10111101, %01111011
    956  d413							;  .byte %00001011, %11000001, %00111011
    957  d413							;  .byte %00001011, %11011100, %01011011
    958  d413							;  .byte %00001000, %00000001, %00000011
    959  d413							;  .byte %00001111, %11111111, %11111111
    960  d413
    961  d413
    962  d413							;MyAbstractPlayfield; - 20 x 10 pixel grid
    963  d413							; ------------ This gets transformed and bitflipped into a 60 byte array
    964  d413							; ------------ (double playfield pixel wide for 20x10)
    965  d413							; note: You can have 8 contiguous matrices and just adjust the offset (30x8=240)
    966  d413							; contiguous matrice1
    967  d413							;  .byte %00001111, %11111111, %11111111
    968  d413							;  .byte %00001100, %00000000, %01111011
    969  d413							;  .byte %00001000, %11101111, %00000011
    970  d413							;  .byte %00001111, %00000001, %11111011
    971  d413							;  .byte %00001000, %10111101, %00000011
    972  d413							;  .byte %00001000, %10111101, %01111011
    973  d413							;  .byte %00001011, %11000001, %00111011
    974  d413							;  .byte %00001011, %11011100, %01011011
    975  d413							;  .byte %00001000, %00000001, %00000011
    976  d413							;  .byte %00001111, %11111111, %11111111
    977  d413							; contiguous matrice2
    978  d413							;  .byte %11111111, %11111111, %11111111
    979  d413							;  .byte %10001100, %11111111, %00000011
    980  d413							;  .byte %10001010, %10000011, %00000011
    981  d413							;  .byte %10001111, %11011111, %11111111
    982  d413							;  .byte %10001000, %11100101, %00000011
    983  d413							;  .byte %10001000, %11110001, %01111011
    984  d413							;  .byte %10001111, %11111001, %00111011
    985  d413							;  .byte %10001001, %11111101, %01011011
    986  d413							;  .byte %10001001, %11111111, %00000011
    987  d413							;  .byte %11111111, %11111111, %11111111
    988  d413							;  .byte %00001101, %11110000, %00000011
    989  d413							; .byte %00001100, %11000000, %01111111
    990  d413							;  .byte %00000010, %10000000, %11100110
    991  d413							; .byte %00001111, %11000000, %11111111
    992  d413							;.byte %00001010, %11100011, %10101010
    993  d413							;  .byte %00001111, %11110000, %01111111
    994  d413							;; .byte %00000001, %11111000, %00111111
    995  d413							; .byte %00001111, %11111100, %00011111
    996  d413							; .byte %00000000, %11111110, %00001111
    997  d413							; .byte %00000000, %11111111, %00000111
    998  d413
    999  d413
   1000  d413							;---------------------------------------------------------------
   1001  d413
   1002  d413
   1003  d413							;---------------------------------------------------------
   1004  d413							; Reverse Byte Routine 1100000 in REVBT becomes 00000011 
   1005  d413							;---------------------------------------------------------
   1006  d413							; Note: This routine is not used, comment it out if you need the space:
   1007  d413							;;ReverseB ; REVBT holds byte to be reversed
   1008  d413							;;   lda #0
   1009  d413							;;   sta b
   1010  d413							;;   lda REVBT
   1011  d413							;;   and #%10000000 ; keep just the 8th bit
   1012  d413							;;;is the 8th bit set?
   1013  d413							;;   beq skip1
   1014  d413							;;   ; reflect it to set bit 1
   1015  d413							;;   lda b
   1016  d413							;;  ora #%00000001 
   1017  d413							;;  sta b ; put it back in b
   1018  d413							;;skip1
   1019  d413							;;  
   1020  d413							;;  lda REVBT
   1021  d413							;;  and #%0100000 ; keep just the 7th bit
   1022  d413							;;; is the 7th bit set?
   1023  d413							;;  beq skip2
   1024  d413							;;  ;reflect it to set bit 2
   1025  d413							;;  lda b
   1026  d413							;;  ora #%00000010
   1027  d413							;;  sta b
   1028  d413							;;skip2
   1029  d413							;;
   1030  d413							;;  lda REVBT
   1031  d413							;;  and #%00100000 ;keep just the 6th bit
   1032  d413							;;  beq skip3 ; is the 6th bit set?
   1033  d413							;;  lda b
   1034  d413							;;  ora #%00000100; reflect to set bit 3
   1035  d413							;;  sta b
   1036  d413							;;skip3
   1037  d413							;;
   1038  d413							;; lda REVBT
   1039  d413							;; and #%00010000 ; keep just the 5th bit
   1040  d413							;; beq skip4; is the 5th bit set?
   1041  d413							;; lda b
   1042  d413							;; ora #%00001000; reflect to set bit 4
   1043  d413							;; sta b
   1044  d413							;;skip4
   1045  d413							;;
   1046  d413							;; lda REVBT
   1047  d413							;; and #%00001000 ; keep just the 4th bit
   1048  d413							;; beq skip5; is the 4th bit set?
   1049  d413							;; lda b
   1050  d413							;; ora #%00010000; reflect to set bit 5
   1051  d413							;; sta b
   1052  d413							;;skip5
   1053  d413							;;
   1054  d413							;; lda REVBT
   1055  d413							;; and #%00000100 ; keep just the 3rd bit
   1056  d413							;; beq skip6; is the 3rd bit set?
   1057  d413							;; lda b
   1058  d413							;; ora #%00100000; reflect to set bit 6
   1059  d413							;; sta b
   1060  d413							;;skip6
   1061  d413							;;
   1062  d413							;; lda REVBT
   1063  d413							;; and #%00000010 ; keep just the 2nd bit
   1064  d413							;; beq skip7; is the 2nd bit set?
   1065  d413							;; lda b
   1066  d413							;; ora #%0100000; reflect to set bit 7
   1067  d413							;; sta b
   1068  d413							;;skip7
   1069  d413							;;
   1070  d413							;; lda REVBT
   1071  d413							;; and #%00000001 ; keep just the 1st bit
   1072  d413							;; beq skip8
   1073  d413							;; lda b
   1074  d413							;; ora #%10000000; reflect to set bit 8
   1075  d413							;; sta b
   1076  d413							;;skip8
   1077  d413							;;
   1078  d413							;; lda b
   1079  d413							;; sta REVBT ; put the reversed byte in REVBT and return
   1080  d413							;;
   1081  d413							;; rts
   1082  d413							;;
   1083  d413
   1084  d413							;----------------------------
   1085  d413				   AbstractPlayfieldBuilder
   1086  d413							;----------------------------
   1087  d413							;start abstract playfield builder - pushes 20x10 bit grid blocks into RAM playfield 
   1088  d413							; double size playfield pixels so 60 bytes of RAM from 30 bytes of ROM
   1089  d413							;---------------------------------------------------------------------
   1090  d413							; using $A0-BF$ (60 bytes) to hold playfield image (20x10 in 40x10 grid)
   1091  d413							;-----------------------------
   1092  d413							;end abstract playfieldbuilder
   1093  d413		       a9 00		      lda	#0	; 30 bytes of ROM to read
   1094  d415		       85 83		      sta	b	; using variable b to hold rom offset
   1095  d417							;lda #0;  $A0 offset to point to start of playfield RAM grid
   1096  d417		       85 84		      sta	c	; using variable c 
   1097  d419
   1098  d419
   1099  d419							; lda #%10101010
   1100  d419		       a2 00		      ldx	#0
   1101  d41b		       86 83		      stx	b
   1102  d41d
   1103  d41d							;testfill works fine so prefill is off a byte!
   1104  d41d							;ok3 lda MyAbstractPlayfield,x
   1105  d41d							; sta $a0+30,x
   1106  d41d							; inx
   1107  d41d							; cpx 30
   1108  d41d							; bne ok3
   1109  d41d
   1110  d41d							;;testfill
   1111  d41d							;; ldx b
   1112  d41d							;sta $A0,b ; does nothing b is always 0! upper left only
   1113  d41d							;;  sta $a0,x
   1114  d41d							;; inc b
   1115  d41d							;; lda b
   1116  d41d							;; cmp #60
   1117  d41d							;; bne testfill
   1118  d41d							;sta 
   1119  d41d
   1120  d41d
   1121  d41d
   1122  d41d
   1123  d41d
   1124  d41d				   doit
   1125  d41d		       a0 00		      ldy	#0	; clear target
   1126  d41f
   1127  d41f		       98		      tya		; preserve y
   1128  d420		       a4 83		      ldy	b
   1129  d422							;ldx MyAbstractPlayfield,y; get rom playfield byte
   1130  d422		       b6 be		      ldx	$a0+#30,y	; get rom playfield byte from RAM page it was dropped off at ;)
   1131  d424
   1132  d424
   1133  d424							;  2 bits of first byte build 4 bits of pf0 target byte in memory
   1134  d424							; next two bits of it build the first 4 bits of pf1,
   1135  d424		       a8		      tay		; restore y
   1136  d425
   1137  d425		       8a		      txa
   1138  d426		       29 08		      and	#%00001000	; keep 1st bit (1/2 byte)
   1139  d428							; is the 1st bit set?
   1140  d428		       f0 04		      beq	skip01
   1141  d42a		       98		      tya
   1142  d42b		       09 30		      ora	#%00110000	;set two playfield bits for 1 in pfo btye
   1143  d42d		       a8		      tay		; put it in y
   1144  d42e				   skip01
   1145  d42e		       8a		      txa
   1146  d42f		       29 04		      and	#%00000100	; keep 2nd bit 	  (half byte)
   1147  d431							; is the 2nd bit set?
   1148  d431		       f0 04		      beq	skip02
   1149  d433		       98		      tya
   1150  d434		       09 c0		      ora	#%11000000	; set next two playfield bits for 1 in pf0 byte
   1151  d436		       a8		      tay
   1152  d437				   skip02
   1153  d437
   1154  d437		       8a		      txa		; preserve X in A
   1155  d438		       a6 84		      ldx	c
   1156  d43a		       94 a0		      sty	$A0,x	; c write offset will be 60 when b read offset is 30
   1157  d43c		       aa		      tax		; restore X
   1158  d43d
   1159  d43d		       e6 84		      inc	c	; on to next playfield byte target, pf1
   1160  d43f							; next two bits of read b go into the next c
   1161  d43f		       a0 00		      ldy	#0	; clear target
   1162  d441
   1163  d441		       8a		      txa		;x still has 1st byte from abstract ROM playfield
   1164  d442		       29 01		      and	#%0000001	; keep 3rd bit
   1165  d444		       f0 04		      beq	skip03
   1166  d446		       98		      tya
   1167  d447		       09 30		      ora	#%00110000	; set two bits for 1 in pf1 target byte
   1168  d449		       a8		      tay
   1169  d44a				   skip03
   1170  d44a		       8a		      txa		; get our byte back
   1171  d44b		       29 02		      and	#%00000010	; keep 4th bit
   1172  d44d		       f0 04		      beq	skip04
   1173  d44f		       98		      tya
   1174  d450		       09 c0		      ora	#%11000000	; set two bits for 1 in pf1 target byte
   1175  d452		       a8		      tay
   1176  d453				   skip04
   1177  d453							; ------- TRANSFORM 2nd of 3 source BYTES in the row
   1178  d453		       e6 83		      inc	b	; get 2nd byte
   1179  d455		       98		      tya		; preserve y
   1180  d456		       a4 83		      ldy	b
   1181  d458							;ldx MyAbstractPlayfield,y; get rom playfield byte
   1182  d458		       b6 be		      ldx	$a0+#30,y	; ... from the RAM page it was dropped off at!
   1183  d45a		       a8		      tay		; restore y
   1184  d45b		       8a		      txa		; x now has 2nd byte (of 3 in row) from abstract ROM playfield
   1185  d45c		       29 80		      and	#%10000000	; first bit set?
   1186  d45e		       f0 04		      beq	skip05
   1187  d460		       98		      tya
   1188  d461		       09 0c		      ora	#%00001100	; set two bits for 1 in pf1 target byte
   1189  d463		       a8		      tay
   1190  d464				   skip05
   1191  d464		       8a		      txa
   1192  d465		       29 40		      and	#%01000000	; check 2nd bit set
   1193  d467		       f0 04		      beq	skip06
   1194  d469		       98		      tya
   1195  d46a		       09 03		      ora	#%00000011	; set two bits for 1 in pf1 target byte - DONE with PF1
   1196  d46c		       a8		      tay		;* 20120801 this WAS the location of the col5 bug 00001111!
   1197  d46d				   skip06
   1198  d46d		       8a		      txa		; preserve X in A
   1199  d46e		       a6 84		      ldx	c
   1200  d470
   1201  d470		       94 a0		      sty	$A0,x	; c write offset will be 60 when b read offset is 30
   1202  d472		       aa		      tax
   1203  d473		       e6 84		      inc	c	; on to next playfield byte target, pf2
   1204  d475		       a0 00		      ldy	#0	; clear target for 3rd byte write
   1205  d477		       8a		      txa
   1206  d478		       29 20		      and	#%00100000	; check 3rd bit set
   1207  d47a		       f0 04		      beq	skip07
   1208  d47c		       98		      tya
   1209  d47d		       09 03		      ora	#%00000011	; set two bits for 1 in pf2 target byte
   1210  d47f		       a8		      tay
   1211  d480				   skip07
   1212  d480		       8a		      txa
   1213  d481		       29 10		      and	#%00010000	; check 4th bit set
   1214  d483		       f0 04		      beq	skip08
   1215  d485		       98		      tya
   1216  d486		       09 0c		      ora	#%00001100	; set two bits for 1 in pf2 target byte
   1217  d488		       a8		      tay
   1218  d489				   skip08
   1219  d489		       8a		      txa
   1220  d48a		       29 08		      and	#%00001000	; check 5th bit set
   1221  d48c		       f0 04		      beq	skip09
   1222  d48e		       98		      tya
   1223  d48f		       09 30		      ora	#%00110000	; set two bits for 1 in pf2 target byte
   1224  d491		       a8		      tay
   1225  d492				   skip09
   1226  d492		       8a		      txa
   1227  d493		       29 04		      and	#%00000100	; 6th bit set?
   1228  d495		       f0 04		      beq	skip010
   1229  d497		       98		      tya
   1230  d498		       09 c0		      ora	#%11000000	; set lasttwo bits for 1 in pf2 target byte
   1231  d49a		       a8		      tay
   1232  d49b				   skip010
   1233  d49b							;-- on to next target byte pf0(2):
   1234  d49b		       8a		      txa		; preserve X in A
   1235  d49c		       a6 84		      ldx	c
   1236  d49e		       94 a0		      sty	$A0,x	; 3rd byte in row; c write offset will be 60 when b read offset is 30
   1237  d4a0		       aa		      tax
   1238  d4a1		       e6 84		      inc	c	; on to next playfield byte target, pf0(2)
   1239  d4a3		       a0 00		      ldy	#0	; clear target
   1240  d4a5
   1241  d4a5		       8a		      txa		; superfluous here ;)
   1242  d4a6		       29 02		      and	#%00000010	; 7th bit set? (2nd bit, had to reverse...)
   1243  d4a8		       f0 04		      beq	skip011
   1244  d4aa		       98		      tya
   1245  d4ab		       09 30		      ora	#%00110000	; set two bits for 1 in pf0(2)
   1246  d4ad		       a8		      tay
   1247  d4ae				   skip011
   1248  d4ae		       8a		      txa
   1249  d4af		       29 01		      and	#%00000001	; 8th bit set? (1st bit, had to reverse order)
   1250  d4b1		       f0 04		      beq	skip012
   1251  d4b3		       98		      tya
   1252  d4b4		       09 c0		      ora	#%11000000	; set two bits for 1 in pf0(2)
   1253  d4b6		       a8		      tay
   1254  d4b7				   skip012
   1255  d4b7							;-- on to next target byte pf1(2):
   1256  d4b7		       8a		      txa		; preserve X in A
   1257  d4b8		       a6 84		      ldx	c
   1258  d4ba		       94 a0		      sty	$A0,x	; 4th byte in row; c write offset will be 60 when b read offset is 30
   1259  d4bc		       aa		      tax		; restore X from A
   1260  d4bd		       e6 84		      inc	c	; on to next playfield byte target, pf1(2)
   1261  d4bf		       a0 00		      ldy	#0	; clear target
   1262  d4c1		       e6 83		      inc	b	; get 3nd byte
   1263  d4c3		       98		      tya		; preserve y
   1264  d4c4		       a4 83		      ldy	b
   1265  d4c6							;ldx MyAbstractPlayfield,y; get rom playfield byte
   1266  d4c6		       b6 be		      ldx	$a0+#30,y	; from the RAM page (2nd half of where we write too) it was dropped off at ;)
   1267  d4c8		       a8		      tay		; restore y
   1268  d4c9		       8a		      txa		; x now has 2nd byte (of 3 in row) from abstract ROM playfield
   1269  d4ca		       29 10		      and	#%00010000	; first bit set?
   1270  d4cc		       f0 04		      beq	skip013
   1271  d4ce		       98		      tya
   1272  d4cf		       09 03		      ora	#%00000011	; set two bits for 1 in pf1(2)
   1273  d4d1		       a8		      tay
   1274  d4d2				   skip013
   1275  d4d2		       8a		      txa
   1276  d4d3		       29 20		      and	#%00100000	; 2nd bit set?
   1277  d4d5		       f0 04		      beq	skip014
   1278  d4d7		       98		      tya
   1279  d4d8		       09 0c		      ora	#%00001100	; set two bits for 1 in pf1(2)
   1280  d4da		       a8		      tay
   1281  d4db				   skip014
   1282  d4db		       8a		      txa
   1283  d4dc		       29 40		      and	#%01000000	; 3rd bit set?
   1284  d4de		       f0 04		      beq	skip015
   1285  d4e0		       98		      tya
   1286  d4e1		       09 30		      ora	#%00110000	; set two bits for 1 in pf1(2)
   1287  d4e3		       a8		      tay
   1288  d4e4				   skip015
   1289  d4e4		       8a		      txa
   1290  d4e5		       29 80		      and	#%10000000	; 4th bit set?
   1291  d4e7		       f0 04		      beq	skip016
   1292  d4e9		       98		      tya
   1293  d4ea		       09 c0		      ora	#%11000000	; set two bits for 1 in pf1(2); done with it
   1294  d4ec		       a8		      tay
   1295  d4ed				   skip016
   1296  d4ed		       8a		      txa		; preserve X in A
   1297  d4ee		       a6 84		      ldx	c
   1298  d4f0		       94 a0		      sty	$A0,x	; 5th write; c write offset will be 60 when b read offset is 30
   1299  d4f2		       aa		      tax		; restore x
   1300  d4f3		       e6 84		      inc	c	; on to next playfield byte target, pf2(2)
   1301  d4f5		       a0 00		      ldy	#0	; clear target
   1302  d4f7		       8a		      txa
   1303  d4f8		       29 01		      and	#%00000001	; 5th bit set?
   1304  d4fa		       f0 04		      beq	skip017
   1305  d4fc		       98		      tya
   1306  d4fd		       09 c0		      ora	#%11000000	; set two bits for 1 in pf2(2)
   1307  d4ff		       a8		      tay
   1308  d500				   skip017
   1309  d500		       8a		      txa
   1310  d501		       29 02		      and	#%00000010	; 6th bit set?
   1311  d503		       f0 04		      beq	skip018
   1312  d505		       98		      tya
   1313  d506		       09 30		      ora	#%00110000	; set two bits for 1 in pf2(2)
   1314  d508		       a8		      tay
   1315  d509				   skip018
   1316  d509		       8a		      txa
   1317  d50a		       29 04		      and	#%00000100	; 7th bit set?
   1318  d50c		       f0 04		      beq	skip019
   1319  d50e		       98		      tya
   1320  d50f		       09 0c		      ora	#%00001100	; set two bits for 1 in pf2(2)
   1321  d511		       a8		      tay
   1322  d512				   skip019
   1323  d512		       8a		      txa
   1324  d513		       29 08		      and	#%00001000	; 8th bit set?
   1325  d515		       f0 04		      beq	skip020
   1326  d517		       98		      tya
   1327  d518		       09 03		      ora	#%00000011	; set twobits for 1 in pf2(2); done with it
   1328  d51a		       a8		      tay
   1329  d51b				   skip020
   1330  d51b		       8a		      txa		; preserve X in A
   1331  d51c		       a6 84		      ldx	c
   1332  d51e		       94 a0		      sty	$A0,x	;6th write c write offset will be 60 when b read offset is 30
   1333  d520		       aa		      tax		; restore x
   1334  d521		       e6 84		      inc	c	; on to next playfield byte target, pf0 next 6 byte row
   1335  d523
   1336  d523
   1337  d523		       e6 83		      inc	b	; get next 3 byte row
   1338  d525		       a5 83		      lda	b
   1339  d527
   1340  d527		       c9 1e		      cmp	#30
   1341  d529							;bne doit
   1342  d529		       b0 03		      bcs	ok1done	;  beq ok1done is ok too but prefer branch if >=
   1343  d52b		       4c 1d f4 	      jmp	doit
   1344  d52e							; rts
   1345  d52e				   ok1done		; done... needed a long jump
   1346  d52e							;jmp doit
   1347  d52e
   1348  d52e
   1349  d52e
   1350  d52e		       60		      rts		;abstract playfield builder -------------------------
   1351  d52f
   1352  d52f							;-------------------
   1353  d52f		       a0 00		      ldy	#0
   1354  d531
   1355  d531							; jmp pushabstractextendedplayfield
   1356  d531				   pushabs
   1357  d531		       a0 00		      ldy	#0
   1358  d533		       a2 00		      ldx	#0
   1359  d535		       bd 5b f2    pushabs2   lda	MyAbstractExtendedPlayfield,x
   1360  d538		       99 be 00 	      sta	$a0+30,y
   1361  d53b		       c8		      iny
   1362  d53c		       e8		      inx
   1363  d53d		       bd 5b f2 	      lda	MyAbstractExtendedPlayfield,x
   1364  d540		       99 be 00 	      sta	$a0+30,y
   1365  d543		       c8		      iny
   1366  d544		       e8		      inx
   1367  d545		       bd 5b f2 	      lda	MyAbstractExtendedPlayfield,x
   1368  d548		       99 be 00 	      sta	$a0+30,y
   1369  d54b
   1370  d54b		       c8		      iny
   1371  d54c		       8a		      txa
   1372  d54d		       18		      clc
   1373  d54e		       69 0a		      adc	#10
   1374  d550		       aa		      tax
   1375  d551		       c0 1e		      cpy	#30
   1376  d553		       d0 e0		      bne	pushabs2
   1377  d555		       60		      rts
   1378  d556
   1379  d556
   1380  d556				   pushcondensedfield
   1381  d556							; commenting this traditional routine out; It's all in the wrists - Flynn
   1382  d556							; ldy #0
   1383  d556							;pushcondensedfield2 ldx MyAbstractPlayfield,y
   1384  d556							; stx $a0+#30,y ; put it 1/2 way down on target ram page
   1385  d556							; iny
   1386  d556							; cpy #30
   1387  d556							; bne pushcondensedfield2
   1388  d556							; rts
   1389  d556
   1390  d556		       a0 00		      ldy	#0	; what is this instruction doing here !?
   1391  d558
   1392  d558							; precalc byte index; inc x2 every 12 bits
   1393  d558							;-------------------------------------
   1394  d558				   pushabstractextendedplayfield		;------
   1395  d558							;-------------------------------------
   1396  d558							; BITIndex - determines how far to shift in to pull the 3 byte row:
   1397  d558							; p0, p1, p2 - variables to hold the 3 byte row
   1398  d558
   1399  d558		       a0 00		      ldy	#0
   1400  d55a		       a6 9d		      ldx	BYTErowoffset	; it starts with a row offset which steps the Y value each rowsize   ; #0
   1401  d55c							;---- BITIndex holds xbyte offset and it's target bit
   1402  d55c							; prep: MUST inc x offset 2 every 12 bits in BITIndex (keep subtracting
   1403  d55c							; 12 from bit index until it is less than 12.
   1404  d55c							; this allows handling for any bit pos since they overlap :)
   1405  d55c
   1406  d55c							; test BITIndex:   ! bit looping ... You can't read half the byte from a 4bit offset unless you loop 11 to 8
   1407  d55c							; lda #13   ; 9 is breaking...
   1408  d55c							; sta BITIndex
   1409  d55c
   1410  d55c							; inx ! bit looping ... and this is why inx does not work (reader expects a 1/2 byte)
   1411  d55c		       a5 90		      lda	BITIndex	; preserve:
   1412  d55e		       85 85		      sta	d	;
   1413  d560
   1414  d560							;-- offset bitindex?
   1415  d560							;-- 1 optimization: take 4 byte steps, fade to 1 byte steps
   1416  d560		       c9 24	   opt1       cmp	#36
   1417  d562		       90 0c		      bcc	xoffsetbitindex
   1418  d564		       e8		      inx
   1419  d565		       e8		      inx
   1420  d566		       e8		      inx
   1421  d567		       e8		      inx
   1422  d568		       38		      sec
   1423  d569		       e9 20		      sbc	#32
   1424  d56b		       85 90		      sta	BITIndex	;--- end 1st optimization. Next: phy, use it in loops in place of mem
   1425  d56d		       4c 60 f5 	      jmp	opt1
   1426  d570
   1427  d570				   xoffsetbitindex		; --- yes, by creating a two byte index for every 12 bits
   1428  d570		       c9 0c		      cmp	#12
   1429  d572		       90 09		      bcc	xoffsetdone1	;   <12 bits (0-11)
   1430  d574							;;test inx ;
   1431  d574		       e8		      inx		; offset x 
   1432  d575		       38		      sec		; before subtract!
   1433  d576		       e9 08		      sbc	#8
   1434  d578		       85 90		      sta	BITIndex
   1435  d57a		       4c 70 f5 	      jmp	xoffsetbitindex	; offset byte index again?
   1436  d57d
   1437  d57d				   xoffsetdone1
   1438  d57d
   1439  d57d				   paepf
   1440  d57d
   1441  d57d		       a5 90		      lda	BITIndex
   1442  d57f		       d0 14		      bne	bitpos1
   1443  d581							; modify to use superchip: MyAbstractExtendedPlayfieldSCR
   1444  d581
   1445  d581							; ---BIT POS 0--- no work, just grab 3 bytes
   1446  d581		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1447  d584		       85 91		      sta	p0
   1448  d586		       e8		      inx
   1449  d587		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1450  d58a		       85 92		      sta	p1
   1451  d58c		       e8		      inx
   1452  d58d		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x	; get 3rd byte in the row
   1453  d590		       85 93		      sta	p2
   1454  d592		       4c 8f f9 	      jmp	bitposdone
   1455  d595
   1456  d595				   bitpos1		; shift the bytes:
   1457  d595		       a5 90		      lda	BITIndex
   1458  d597		       c9 01		      cmp	#1
   1459  d599		       d0 22		      bne	bitpos2
   1460  d59b
   1461  d59b
   1462  d59b							;! adressing mode is doing an add not a subtract, setting the carry and clearing it!
   1463  d59b							;!! That's where the bit's are going! 
   1464  d59b							;so...
   1465  d59b
   1466  d59b		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1467  d59e		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1468  d5a0		       2a		      rol
   1469  d5a1		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1470  d5a4							;rol
   1471  d5a4		       85 91		      sta	p0
   1472  d5a6		       e8		      inx
   1473  d5a7		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1474  d5aa							;rol
   1475  d5aa		       85 92		      sta	p1
   1476  d5ac		       e8		      inx
   1477  d5ad		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1478  d5b0							;rol
   1479  d5b0		       85 93		      sta	p2
   1480  d5b2		       26 84		      rol	c
   1481  d5b4		       26 93		      rol	p2
   1482  d5b6		       26 92		      rol	p1
   1483  d5b8		       26 91		      rol	p0
   1484  d5ba
   1485  d5ba
   1486  d5ba							; rol; asl ; shift acumulator left to grab the shifted bit in the carry flag
   1487  d5ba
   1488  d5ba
   1489  d5ba		       4c 8f f9 	      jmp	bitposdone	;---
   1490  d5bd
   1491  d5bd				   bitpos2		; shift 2 bits left
   1492  d5bd		       a5 90		      lda	BITIndex
   1493  d5bf		       c9 02		      cmp	#2
   1494  d5c1		       d0 2a		      bne	bitpos3
   1495  d5c3		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1496  d5c6		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1497  d5c8		       2a		      rol
   1498  d5c9		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1499  d5cc							;rol
   1500  d5cc		       85 91		      sta	p0
   1501  d5ce		       e8		      inx
   1502  d5cf		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1503  d5d2							;rol
   1504  d5d2		       85 92		      sta	p1
   1505  d5d4		       e8		      inx
   1506  d5d5		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1507  d5d8							;rol
   1508  d5d8		       85 93		      sta	p2
   1509  d5da		       26 84		      rol	c
   1510  d5dc		       26 93		      rol	p2
   1511  d5de		       26 92		      rol	p1
   1512  d5e0		       26 91		      rol	p0
   1513  d5e2
   1514  d5e2		       26 84		      rol	c
   1515  d5e4		       26 93		      rol	p2
   1516  d5e6		       26 92		      rol	p1
   1517  d5e8		       26 91		      rol	p0
   1518  d5ea
   1519  d5ea
   1520  d5ea		       4c 8f f9 	      jmp	bitposdone	;---
   1521  d5ed
   1522  d5ed				   bitpos3		;---
   1523  d5ed
   1524  d5ed		       a5 90		      lda	BITIndex
   1525  d5ef		       c9 03		      cmp	#3
   1526  d5f1		       d0 31		      bne	bitpos4
   1527  d5f3		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1528  d5f6		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1529  d5f8							;;;rol
   1530  d5f8		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1531  d5fb							;rol
   1532  d5fb		       85 91		      sta	p0
   1533  d5fd		       e8		      inx
   1534  d5fe		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1535  d601							;rol
   1536  d601		       85 92		      sta	p1
   1537  d603		       e8		      inx
   1538  d604		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1539  d607							;rol
   1540  d607		       85 93		      sta	p2
   1541  d609		       26 84		      rol	c
   1542  d60b		       26 93		      rol	p2
   1543  d60d		       26 92		      rol	p1
   1544  d60f		       26 91		      rol	p0
   1545  d611
   1546  d611		       26 84		      rol	c
   1547  d613		       26 93		      rol	p2
   1548  d615		       26 92		      rol	p1
   1549  d617		       26 91		      rol	p0
   1550  d619
   1551  d619		       26 84		      rol	c
   1552  d61b		       26 93		      rol	p2
   1553  d61d		       26 92		      rol	p1
   1554  d61f		       26 91		      rol	p0
   1555  d621
   1556  d621		       4c 8f f9 	      jmp	bitposdone	;---
   1557  d624
   1558  d624				   bitpos4		; --
   1559  d624		       a5 90		      lda	BITIndex
   1560  d626		       c9 04		      cmp	#4
   1561  d628		       d0 3a		      bne	bitpos5
   1562  d62a		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1563  d62d		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1564  d62f		       2a		      rol
   1565  d630		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1566  d633							;rol
   1567  d633		       85 91		      sta	p0
   1568  d635		       e8		      inx
   1569  d636		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1570  d639							;rol
   1571  d639		       85 92		      sta	p1
   1572  d63b		       e8		      inx
   1573  d63c		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1574  d63f							;rol
   1575  d63f		       85 93		      sta	p2
   1576  d641		       26 84		      rol	c
   1577  d643		       26 93		      rol	p2
   1578  d645		       26 92		      rol	p1
   1579  d647		       26 91		      rol	p0
   1580  d649
   1581  d649		       26 84		      rol	c
   1582  d64b		       26 93		      rol	p2
   1583  d64d		       26 92		      rol	p1
   1584  d64f		       26 91		      rol	p0
   1585  d651
   1586  d651		       26 84		      rol	c
   1587  d653		       26 93		      rol	p2
   1588  d655		       26 92		      rol	p1
   1589  d657		       26 91		      rol	p0
   1590  d659
   1591  d659		       26 84		      rol	c
   1592  d65b		       26 93		      rol	p2
   1593  d65d		       26 92		      rol	p1
   1594  d65f		       26 91		      rol	p0
   1595  d661
   1596  d661		       4c 8f f9 	      jmp	bitposdone	;---
   1597  d664
   1598  d664				   bitpos5		; --  not using 1st byte
   1599  d664		       a5 90		      lda	BITIndex
   1600  d666		       c9 05		      cmp	#5
   1601  d668		       d0 42		      bne	bitpos6
   1602  d66a
   1603  d66a		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1604  d66d		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1605  d66f		       2a		      rol
   1606  d670		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1607  d673							;rol
   1608  d673		       85 91		      sta	p0
   1609  d675		       e8		      inx
   1610  d676		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1611  d679							;rol
   1612  d679		       85 92		      sta	p1
   1613  d67b		       e8		      inx
   1614  d67c		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1615  d67f							;rol
   1616  d67f		       85 93		      sta	p2
   1617  d681		       26 84		      rol	c
   1618  d683		       26 93		      rol	p2
   1619  d685		       26 92		      rol	p1
   1620  d687		       26 91		      rol	p0
   1621  d689
   1622  d689		       26 84		      rol	c
   1623  d68b		       26 93		      rol	p2
   1624  d68d		       26 92		      rol	p1
   1625  d68f		       26 91		      rol	p0
   1626  d691
   1627  d691		       26 84		      rol	c
   1628  d693		       26 93		      rol	p2
   1629  d695		       26 92		      rol	p1
   1630  d697		       26 91		      rol	p0
   1631  d699
   1632  d699		       26 84		      rol	c
   1633  d69b		       26 93		      rol	p2
   1634  d69d		       26 92		      rol	p1
   1635  d69f		       26 91		      rol	p0
   1636  d6a1
   1637  d6a1		       26 84		      rol	c
   1638  d6a3		       26 93		      rol	p2
   1639  d6a5		       26 92		      rol	p1
   1640  d6a7		       26 91		      rol	p0
   1641  d6a9
   1642  d6a9
   1643  d6a9		       4c 8f f9 	      jmp	bitposdone	; --
   1644  d6ac
   1645  d6ac
   1646  d6ac				   bitpos6		; -- not using 1st byte
   1647  d6ac		       a5 90		      lda	BITIndex
   1648  d6ae		       c9 06		      cmp	#6
   1649  d6b0		       d0 4a		      bne	bitpos7
   1650  d6b2
   1651  d6b2		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1652  d6b5		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1653  d6b7		       2a		      rol
   1654  d6b8		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1655  d6bb							;rol
   1656  d6bb		       85 91		      sta	p0
   1657  d6bd		       e8		      inx
   1658  d6be		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1659  d6c1							;rol
   1660  d6c1		       85 92		      sta	p1
   1661  d6c3		       e8		      inx
   1662  d6c4		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1663  d6c7							;rol
   1664  d6c7		       85 93		      sta	p2
   1665  d6c9		       26 84		      rol	c
   1666  d6cb		       26 93		      rol	p2
   1667  d6cd		       26 92		      rol	p1
   1668  d6cf		       26 91		      rol	p0
   1669  d6d1
   1670  d6d1		       26 84		      rol	c
   1671  d6d3		       26 93		      rol	p2
   1672  d6d5		       26 92		      rol	p1
   1673  d6d7		       26 91		      rol	p0
   1674  d6d9
   1675  d6d9		       26 84		      rol	c
   1676  d6db		       26 93		      rol	p2
   1677  d6dd		       26 92		      rol	p1
   1678  d6df		       26 91		      rol	p0
   1679  d6e1
   1680  d6e1		       26 84		      rol	c
   1681  d6e3		       26 93		      rol	p2
   1682  d6e5		       26 92		      rol	p1
   1683  d6e7		       26 91		      rol	p0
   1684  d6e9
   1685  d6e9		       26 84		      rol	c
   1686  d6eb		       26 93		      rol	p2
   1687  d6ed		       26 92		      rol	p1
   1688  d6ef		       26 91		      rol	p0
   1689  d6f1
   1690  d6f1		       26 84		      rol	c
   1691  d6f3		       26 93		      rol	p2
   1692  d6f5		       26 92		      rol	p1
   1693  d6f7		       26 91		      rol	p0
   1694  d6f9
   1695  d6f9		       4c 8f f9 	      jmp	bitposdone	; --
   1696  d6fc
   1697  d6fc				   bitpos7
   1698  d6fc		       a5 90		      lda	BITIndex
   1699  d6fe		       c9 07		      cmp	#7
   1700  d700		       d0 52		      bne	bitpos8
   1701  d702
   1702  d702		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1703  d705		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1704  d707		       2a		      rol
   1705  d708		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1706  d70b							;rol
   1707  d70b		       85 91		      sta	p0
   1708  d70d		       e8		      inx
   1709  d70e		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1710  d711							;rol
   1711  d711		       85 92		      sta	p1
   1712  d713		       e8		      inx
   1713  d714		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1714  d717							;rol
   1715  d717		       85 93		      sta	p2
   1716  d719		       26 84		      rol	c
   1717  d71b		       26 93		      rol	p2
   1718  d71d		       26 92		      rol	p1
   1719  d71f		       26 91		      rol	p0
   1720  d721
   1721  d721		       26 84		      rol	c
   1722  d723		       26 93		      rol	p2
   1723  d725		       26 92		      rol	p1
   1724  d727		       26 91		      rol	p0
   1725  d729
   1726  d729		       26 84		      rol	c
   1727  d72b		       26 93		      rol	p2
   1728  d72d		       26 92		      rol	p1
   1729  d72f		       26 91		      rol	p0
   1730  d731
   1731  d731		       26 84		      rol	c
   1732  d733		       26 93		      rol	p2
   1733  d735		       26 92		      rol	p1
   1734  d737		       26 91		      rol	p0
   1735  d739
   1736  d739		       26 84		      rol	c
   1737  d73b		       26 93		      rol	p2
   1738  d73d		       26 92		      rol	p1
   1739  d73f		       26 91		      rol	p0
   1740  d741
   1741  d741		       26 84		      rol	c
   1742  d743		       26 93		      rol	p2
   1743  d745		       26 92		      rol	p1
   1744  d747		       26 91		      rol	p0
   1745  d749
   1746  d749		       26 84		      rol	c
   1747  d74b		       26 93		      rol	p2
   1748  d74d		       26 92		      rol	p1
   1749  d74f		       26 91		      rol	p0
   1750  d751
   1751  d751		       4c 8f f9 	      jmp	bitposdone	; --
   1752  d754
   1753  d754				   bitpos8		; ---
   1754  d754		       a5 90		      lda	BITIndex
   1755  d756		       c9 08		      cmp	#8
   1756  d758		       d0 5a		      bne	bitpos9
   1757  d75a
   1758  d75a		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1759  d75d		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1760  d75f		       2a		      rol
   1761  d760		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1762  d763							;rol
   1763  d763		       85 91		      sta	p0
   1764  d765		       e8		      inx
   1765  d766		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1766  d769							;rol
   1767  d769		       85 92		      sta	p1
   1768  d76b		       e8		      inx
   1769  d76c		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1770  d76f							;rol
   1771  d76f		       85 93		      sta	p2
   1772  d771		       26 84		      rol	c
   1773  d773		       26 93		      rol	p2
   1774  d775		       26 92		      rol	p1
   1775  d777		       26 91		      rol	p0
   1776  d779
   1777  d779		       26 84		      rol	c
   1778  d77b		       26 93		      rol	p2
   1779  d77d		       26 92		      rol	p1
   1780  d77f		       26 91		      rol	p0
   1781  d781
   1782  d781		       26 84		      rol	c
   1783  d783		       26 93		      rol	p2
   1784  d785		       26 92		      rol	p1
   1785  d787		       26 91		      rol	p0
   1786  d789
   1787  d789		       26 84		      rol	c
   1788  d78b		       26 93		      rol	p2
   1789  d78d		       26 92		      rol	p1
   1790  d78f		       26 91		      rol	p0
   1791  d791
   1792  d791		       26 84		      rol	c
   1793  d793		       26 93		      rol	p2
   1794  d795		       26 92		      rol	p1
   1795  d797		       26 91		      rol	p0
   1796  d799
   1797  d799		       26 84		      rol	c
   1798  d79b		       26 93		      rol	p2
   1799  d79d		       26 92		      rol	p1
   1800  d79f		       26 91		      rol	p0
   1801  d7a1
   1802  d7a1		       26 84		      rol	c
   1803  d7a3		       26 93		      rol	p2
   1804  d7a5		       26 92		      rol	p1
   1805  d7a7		       26 91		      rol	p0
   1806  d7a9
   1807  d7a9		       26 84		      rol	c
   1808  d7ab		       26 93		      rol	p2
   1809  d7ad		       26 92		      rol	p1
   1810  d7af		       26 91		      rol	p0
   1811  d7b1
   1812  d7b1		       4c 8f f9 	      jmp	bitposdone	; --
   1813  d7b4
   1814  d7b4				   bitpos9		;----
   1815  d7b4		       a5 90		      lda	BITIndex
   1816  d7b6		       c9 09		      cmp	#9
   1817  d7b8		       d0 67		      bne	bitpos10
   1818  d7ba
   1819  d7ba		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1820  d7bd		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1821  d7bf		       2a		      rol
   1822  d7c0		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1823  d7c3							;rol
   1824  d7c3		       85 91		      sta	p0
   1825  d7c5		       e8		      inx
   1826  d7c6		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1827  d7c9							;rol
   1828  d7c9		       85 92		      sta	p1
   1829  d7cb		       e8		      inx
   1830  d7cc		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1831  d7cf							;rol
   1832  d7cf		       85 93		      sta	p2
   1833  d7d1		       26 84		      rol	c
   1834  d7d3		       26 93		      rol	p2
   1835  d7d5		       26 92		      rol	p1
   1836  d7d7		       26 91		      rol	p0
   1837  d7d9
   1838  d7d9		       26 84		      rol	c
   1839  d7db		       26 93		      rol	p2
   1840  d7dd		       26 92		      rol	p1
   1841  d7df		       26 91		      rol	p0
   1842  d7e1
   1843  d7e1		       26 84		      rol	c
   1844  d7e3		       26 93		      rol	p2
   1845  d7e5		       26 92		      rol	p1
   1846  d7e7		       26 91		      rol	p0
   1847  d7e9
   1848  d7e9		       26 84		      rol	c
   1849  d7eb		       26 93		      rol	p2
   1850  d7ed		       26 92		      rol	p1
   1851  d7ef		       26 91		      rol	p0
   1852  d7f1
   1853  d7f1		       26 84		      rol	c
   1854  d7f3		       26 93		      rol	p2
   1855  d7f5		       26 92		      rol	p1
   1856  d7f7		       26 91		      rol	p0
   1857  d7f9
   1858  d7f9		       26 84		      rol	c
   1859  d7fb		       26 93		      rol	p2
   1860  d7fd		       26 92		      rol	p1
   1861  d7ff		       26 91		      rol	p0
   1862  d801
   1863  d801		       26 84		      rol	c
   1864  d803		       26 93		      rol	p2
   1865  d805		       26 92		      rol	p1
   1866  d807		       26 91		      rol	p0
   1867  d809
   1868  d809		       26 84		      rol	c
   1869  d80b		       26 93		      rol	p2
   1870  d80d		       26 92		      rol	p1
   1871  d80f		       26 91		      rol	p0
   1872  d811
   1873  d811							; 9th bit is in the next byte; repopulate c
   1874  d811		       bd 02 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+2
   1875  d814		       85 84		      sta	c
   1876  d816		       26 84		      rol	c
   1877  d818		       26 93		      rol	p2
   1878  d81a		       26 92		      rol	p1
   1879  d81c		       26 91		      rol	p0
   1880  d81e
   1881  d81e
   1882  d81e		       4c 8f f9 	      jmp	bitposdone	; --
   1883  d821
   1884  d821				   bitpos10		;--
   1885  d821		       a5 90		      lda	BITIndex
   1886  d823		       c9 0a		      cmp	#10
   1887  d825		       d0 6f		      bne	bitpos11
   1888  d827
   1889  d827		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1890  d82a		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1891  d82c		       2a		      rol
   1892  d82d		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1893  d830							;rol
   1894  d830		       85 91		      sta	p0
   1895  d832		       e8		      inx
   1896  d833		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1897  d836							;rol
   1898  d836		       85 92		      sta	p1
   1899  d838		       e8		      inx
   1900  d839		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1901  d83c							;rol
   1902  d83c		       85 93		      sta	p2
   1903  d83e		       26 84		      rol	c
   1904  d840		       26 93		      rol	p2
   1905  d842		       26 92		      rol	p1
   1906  d844		       26 91		      rol	p0
   1907  d846
   1908  d846		       26 84		      rol	c
   1909  d848		       26 93		      rol	p2
   1910  d84a		       26 92		      rol	p1
   1911  d84c		       26 91		      rol	p0
   1912  d84e
   1913  d84e		       26 84		      rol	c
   1914  d850		       26 93		      rol	p2
   1915  d852		       26 92		      rol	p1
   1916  d854		       26 91		      rol	p0
   1917  d856
   1918  d856		       26 84		      rol	c
   1919  d858		       26 93		      rol	p2
   1920  d85a		       26 92		      rol	p1
   1921  d85c		       26 91		      rol	p0
   1922  d85e
   1923  d85e		       26 84		      rol	c
   1924  d860		       26 93		      rol	p2
   1925  d862		       26 92		      rol	p1
   1926  d864		       26 91		      rol	p0
   1927  d866
   1928  d866		       26 84		      rol	c
   1929  d868		       26 93		      rol	p2
   1930  d86a		       26 92		      rol	p1
   1931  d86c		       26 91		      rol	p0
   1932  d86e
   1933  d86e		       26 84		      rol	c
   1934  d870		       26 93		      rol	p2
   1935  d872		       26 92		      rol	p1
   1936  d874		       26 91		      rol	p0
   1937  d876
   1938  d876		       26 84		      rol	c
   1939  d878		       26 93		      rol	p2
   1940  d87a		       26 92		      rol	p1
   1941  d87c		       26 91		      rol	p0
   1942  d87e
   1943  d87e							; 9th bit is in the next byte; repopulate c
   1944  d87e		       bd 02 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+2
   1945  d881		       85 84		      sta	c
   1946  d883		       26 84		      rol	c
   1947  d885		       26 93		      rol	p2
   1948  d887		       26 92		      rol	p1
   1949  d889		       26 91		      rol	p0
   1950  d88b
   1951  d88b		       26 84		      rol	c
   1952  d88d		       26 93		      rol	p2
   1953  d88f		       26 92		      rol	p1
   1954  d891		       26 91		      rol	p0
   1955  d893
   1956  d893
   1957  d893		       4c 8f f9 	      jmp	bitposdone	; --
   1958  d896
   1959  d896				   bitpos11		;--
   1960  d896		       a5 90		      lda	BITIndex
   1961  d898		       c9 0b		      cmp	#11
   1962  d89a		       d0 77		      bne	bitpos12
   1963  d89c
   1964  d89c		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   1965  d89f		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   1966  d8a1		       2a		      rol
   1967  d8a2		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1968  d8a5							;rol
   1969  d8a5		       85 91		      sta	p0
   1970  d8a7		       e8		      inx
   1971  d8a8		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1972  d8ab							;rol
   1973  d8ab		       85 92		      sta	p1
   1974  d8ad		       e8		      inx
   1975  d8ae		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   1976  d8b1							;rol
   1977  d8b1		       85 93		      sta	p2
   1978  d8b3		       26 84		      rol	c
   1979  d8b5		       26 93		      rol	p2
   1980  d8b7		       26 92		      rol	p1
   1981  d8b9		       26 91		      rol	p0
   1982  d8bb
   1983  d8bb		       26 84		      rol	c
   1984  d8bd		       26 93		      rol	p2
   1985  d8bf		       26 92		      rol	p1
   1986  d8c1		       26 91		      rol	p0
   1987  d8c3
   1988  d8c3		       26 84		      rol	c
   1989  d8c5		       26 93		      rol	p2
   1990  d8c7		       26 92		      rol	p1
   1991  d8c9		       26 91		      rol	p0
   1992  d8cb
   1993  d8cb		       26 84		      rol	c
   1994  d8cd		       26 93		      rol	p2
   1995  d8cf		       26 92		      rol	p1
   1996  d8d1		       26 91		      rol	p0
   1997  d8d3
   1998  d8d3		       26 84		      rol	c
   1999  d8d5		       26 93		      rol	p2
   2000  d8d7		       26 92		      rol	p1
   2001  d8d9		       26 91		      rol	p0
   2002  d8db
   2003  d8db		       26 84		      rol	c
   2004  d8dd		       26 93		      rol	p2
   2005  d8df		       26 92		      rol	p1
   2006  d8e1		       26 91		      rol	p0
   2007  d8e3
   2008  d8e3		       26 84		      rol	c
   2009  d8e5		       26 93		      rol	p2
   2010  d8e7		       26 92		      rol	p1
   2011  d8e9		       26 91		      rol	p0
   2012  d8eb
   2013  d8eb		       26 84		      rol	c
   2014  d8ed		       26 93		      rol	p2
   2015  d8ef		       26 92		      rol	p1
   2016  d8f1		       26 91		      rol	p0
   2017  d8f3
   2018  d8f3							; 9th bit is in the next byte; repopulate c
   2019  d8f3		       bd 02 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+2
   2020  d8f6		       85 84		      sta	c
   2021  d8f8		       26 84		      rol	c
   2022  d8fa		       26 93		      rol	p2
   2023  d8fc		       26 92		      rol	p1
   2024  d8fe		       26 91		      rol	p0
   2025  d900
   2026  d900		       26 84		      rol	c
   2027  d902		       26 93		      rol	p2
   2028  d904		       26 92		      rol	p1
   2029  d906		       26 91		      rol	p0
   2030  d908		       26 84		      rol	c
   2031  d90a		       26 93		      rol	p2
   2032  d90c		       26 92		      rol	p1
   2033  d90e		       26 91		      rol	p0
   2034  d910
   2035  d910
   2036  d910		       4c 8f f9 	      jmp	bitposdone	; --
   2037  d913
   2038  d913				   bitpos12		;--
   2039  d913		       bd 03 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+3	; 4th byte holds a bit we need
   2040  d916		       85 84		      sta	c	; store the 4th byte with that extra bit in c
   2041  d918		       2a		      rol
   2042  d919		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   2043  d91c							;rol
   2044  d91c		       85 91		      sta	p0
   2045  d91e		       e8		      inx
   2046  d91f		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   2047  d922							;rol
   2048  d922		       85 92		      sta	p1
   2049  d924		       e8		      inx
   2050  d925		       bd 00 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x
   2051  d928							;rol
   2052  d928		       85 93		      sta	p2
   2053  d92a		       26 84		      rol	c
   2054  d92c		       26 93		      rol	p2
   2055  d92e		       26 92		      rol	p1
   2056  d930		       26 91		      rol	p0
   2057  d932
   2058  d932		       26 84		      rol	c
   2059  d934		       26 93		      rol	p2
   2060  d936		       26 92		      rol	p1
   2061  d938		       26 91		      rol	p0
   2062  d93a
   2063  d93a		       26 84		      rol	c
   2064  d93c		       26 93		      rol	p2
   2065  d93e		       26 92		      rol	p1
   2066  d940		       26 91		      rol	p0
   2067  d942
   2068  d942		       26 84		      rol	c
   2069  d944		       26 93		      rol	p2
   2070  d946		       26 92		      rol	p1
   2071  d948		       26 91		      rol	p0
   2072  d94a
   2073  d94a		       26 84		      rol	c
   2074  d94c		       26 93		      rol	p2
   2075  d94e		       26 92		      rol	p1
   2076  d950		       26 91		      rol	p0
   2077  d952
   2078  d952		       26 84		      rol	c
   2079  d954		       26 93		      rol	p2
   2080  d956		       26 92		      rol	p1
   2081  d958		       26 91		      rol	p0
   2082  d95a
   2083  d95a		       26 84		      rol	c
   2084  d95c		       26 93		      rol	p2
   2085  d95e		       26 92		      rol	p1
   2086  d960		       26 91		      rol	p0
   2087  d962
   2088  d962		       26 84		      rol	c
   2089  d964		       26 93		      rol	p2
   2090  d966		       26 92		      rol	p1
   2091  d968		       26 91		      rol	p0
   2092  d96a
   2093  d96a							; 9th bit is in the next byte; repopulate c
   2094  d96a		       bd 02 f1 	      lda	MyAbstractExtendedPlayfieldSCR,x+2
   2095  d96d		       85 84		      sta	c
   2096  d96f		       26 84		      rol	c
   2097  d971		       26 93		      rol	p2
   2098  d973		       26 92		      rol	p1
   2099  d975		       26 91		      rol	p0
   2100  d977
   2101  d977		       26 84		      rol	c
   2102  d979		       26 93		      rol	p2
   2103  d97b		       26 92		      rol	p1
   2104  d97d		       26 91		      rol	p0
   2105  d97f		       26 84		      rol	c
   2106  d981		       26 93		      rol	p2
   2107  d983		       26 92		      rol	p1
   2108  d985		       26 91		      rol	p0
   2109  d987		       26 84		      rol	c
   2110  d989		       26 93		      rol	p2
   2111  d98b		       26 92		      rol	p1
   2112  d98d		       26 91		      rol	p0
   2113  d98f
   2114  d98f							; bitpos12 (last one) falls through to... jmp bitposdone;------------
   2115  d98f
   2116  d98f
   2117  d98f							; now push bit shifted 3 bytes we've assembled from the larger row:
   2118  d98f
   2119  d98f
   2120  d98f				   bitposdone		;-----------------------------------------
   2121  d98f		       a5 91		      lda	p0
   2122  d991		       99 be 00 	      sta	$a0+#30,y	; put it 1/2 way down on target ram page
   2123  d994		       c8		      iny
   2124  d995
   2125  d995
   2126  d995		       a5 92		      lda	p1
   2127  d997		       99 be 00 	      sta	$a0+#30,y	; put it 1/2 way down on target ram page
   2128  d99a		       c8		      iny
   2129  d99b
   2130  d99b
   2131  d99b		       a5 93		      lda	p2
   2132  d99d		       99 be 00 	      sta	$a0+#30,y	; put it 1/2 way down on target ram page
   2133  d9a0		       c8		      iny
   2134  d9a1		       8a		      txa
   2135  d9a2		       18		      clc		; forgot to do this and it inc'd!!!!!@#$
   2136  d9a3		       69 0a		      adc	#10
   2137  d9a5		       aa		      tax		; point to next row
   2138  d9a6		       c0 1e		      cpy	#30	; overlooping
   2139  d9a8							;bcc paepf out of range!
   2140  d9a8		       b0 03		      bcs	jumparoundpaepf
   2141  d9aa		       4c 7d f5 	      jmp	paepf
   2142  d9ad				   jumparoundpaepf
   2143  d9ad		       a5 85		      lda	d
   2144  d9af		       85 90		      sta	BITIndex	; restore bit index Y axis value
   2145  d9b1		       60		      rts
   2146  d9b2							; end --- pushabstractextendedplayfield
   2147  d9b2
   2148  d9b2
   2149  d9b2							; ----FRAMERELAY-----
   2150  d9b2							; ----BLANKS A FRAME-
   2151  d9b2							; ----DOES STUFF ;)--
   2152  d9b2							; --00000000000000000000000000Replace this with 30 wysnc's + 30% of the screen's 192 scanline's worth of time...
   2153  d9b2							; -- taking a portion of the screen should suffice instead.. see how it looks
   2154  d9b2							; polling intim down from 114 perhaps ... (30 scanlines + 70 from the screen)
   2155  d9b2				   framerelay
   2156  d9b2
   2157  d9b2							; not like this - lda $fff9; use Bank 1 (CBS RAM), point back to bank 0 before JSR 
   2158  d9b2
   2159  d9b2		       a9 00		      lda	#0
   2160  d9b4		       85 01		      sta	VBLANK
   2161  d9b6		       a9 02		      lda	#2
   2162  d9b8		       85 00		      sta	VSYNC	; vertical sync signal; initiate electron guns to upper left corner!
   2163  d9ba		       85 02		      sta	WSYNC	; 3 scanlines worth of vertical sync (so TV get's a lock on it) 
   2164  d9bc		       85 02		      sta	WSYNC
   2165  d9be		       85 02		      sta	WSYNC
   2166  d9c0
   2167  d9c0		       a9 00		      lda	#0
   2168  d9c2		       85 00		      sta	VSYNC	; vertical sync finished
   2169  d9c4		       85 0e		      sta	PF1
   2170  d9c6		       85 0d		      sta	PF0
   2171  d9c8		       85 0f		      sta	PF2	; clear playfield registers for blank frame
   2172  d9ca
   2173  d9ca		       85 1b		      sta	GRP0	; clear sprite 0 for blank frame
   2174  d9cc		       85 1c		      sta	GRP1
   2175  d9ce							; sta ENAM1
   2176  d9ce							; sta ENAM0
   2177  d9ce
   2178  d9ce							; 37 scanlines ofvertical  blank  ...	37 x 76 = 2812 ... /64 = 44
   2179  d9ce							;+192 scanlines of screen  = (229 * 76)/64 = 271.9 (271 + trailing WSYNC) 
   2180  d9ce							; ------- break that into 255 and 16 ;)
   2181  d9ce		       a2 11		      ldx	#17
   2182  d9d0		       8e 96 02 	      stx	TIM64T	;
   2183  d9d3							;--- note: 76x17 cycles available right here:
   2184  d9d3							;--- you could put a small block of code here if you need more time:
   2185  d9d3
   2186  d9d3
   2187  d9d3							;--- end small block of code 
   2188  d9d3
   2189  d9d3
   2190  d9d3		       ad 84 02    w16	      lda	INTIM
   2191  d9d6		       d0 fb		      bne	w16
   2192  d9d8
   2193  d9d8		       a2 ff		      ldx	#255	; 
   2194  d9da		       8e 96 02 	      stx	TIM64T	; big block of time now! Can put the kitchen sink here if you want :)
   2195  d9dd							; ---- time intensive calls go here!
   2196  d9dd							; playfield setup and builder calls, et al.
   2197  d9dd
   2198  d9dd
   2199  d9dd							;jsr pushcondensedfield
   2200  d9dd							;
   2201  d9dd
   2202  d9dd							; ----------------------------------------------------------
   2203  d9dd							; ------ Your Abstract Assembly code goes here:
   2204  d9dd							; ----------------------------------------------------------
   2205  d9dd							;
   2206  d9dd							;-------------------------------------------------------
   2207  d9dd							; ASSEMBLY BLOCK GENERATED BY bB:
   2208  d9dd
   2209  d9dd				   .L012		;  rem ** move sprites back and forth vertically **
   2210  d9dd				   .L013		;  rem send player one all the way across the screen:
   2211  d9dd				   .L014		;  if player1x  =  150 then player1x = 0 : goto jumparound
   2212  d9dd
   2213  d9dd		       a5 e0		      LDA	player1x
   2214  d9df		       c9 96		      CMP	#150
   2215  d9e1		       d0 07		      BNE	.skipL014
   2216  d9e3				   .condpart0
   2217  d9e3		       a9 00		      LDA	#0
   2218  d9e5		       85 e0		      STA	player1x
   2219  d9e7		       4c ec f9 	      jmp	.jumparound
   2220  d9ea				   .skipL014
   2221  d9ea				   .L015		;  player1x  =  player1x  + 1
   2222  d9ea		       e6 e0		      INC	player1x
   2223  d9ec				   .jumparound
   2224  d9ec							; jumparound
   2225  d9ec
   2226  d9ec				   .
   2227  d9ec							; 
   2228  d9ec
   2229  d9ec				   .
   2230  d9ec							; 
   2231  d9ec
   2232  d9ec				   .L016		;  rem send player0 half way across:
   2233  d9ec
   2234  d9ec				   .L017		;  if player0x  =  75 then player0x = 0 : goto jumparound2
   2235  d9ec
   2236  d9ec		       a5 9e		      LDA	player0x
   2237  d9ee		       c9 4b		      CMP	#75
   2238  d9f0		       d0 07		      BNE	.skipL017
   2239  d9f2				   .condpart1
   2240  d9f2		       a9 00		      LDA	#0
   2241  d9f4		       85 9e		      STA	player0x
   2242  d9f6		       4c fb f9 	      jmp	.jumparound2
   2243  d9f9
   2244  d9f9				   .skipL017
   2245  d9f9				   .L018		;  player0x  =  player0x  + 1
   2246  d9f9
   2247  d9f9		       e6 9e		      INC	player0x
   2248  d9fb				   .jumparound2
   2249  d9fb							; jumparound2
   2250  d9fb
   2251  d9fb				   .
   2252  d9fb							; 
   2253  d9fb
   2254  d9fb
   2255  d9fb							;---- SPRITE ANIMATION DEMO IMPORTED FROM bB COMPILER:
   2256  d9fb				   .L019		;  rem ** sprite animation demo:
   2257  d9fb
   2258  d9fb				   .L020		;  rem ** flip through several sprite frames
   2259  d9fb
   2260  d9fb				   .L021		;  rem ** using variable f
   2261  d9fb
   2262  d9fb				   .L022		;  rem *** using dummy variable c as a place holder to call an ASDK function
   2263  d9fb
   2264  d9fb				   .L023		;  rem ** (the ASDK supports variables a-q but a-e are temp vars)
   2265  d9fb				   .
   2266  d9fb							; 
   2267  d9fb
   2268  d9fb				   .L024		;  c = 0 :  rem dummy variable c 
   2269  d9fb
   2270  d9fb		       a4 87		      ldy	f	;    LDA #0
   2271  d9fd		       20 f9 f3 	      jsr	loadplayer0	;    STA c
   2272  da00				   .
   2273  da00							; 
   2274  da00
   2275  da00				   .L025		;  f = f + 8 :  set offset argument to point to next image
   2276  da00
   2277  da00		       a5 87		      LDA	f
   2278  da02		       18		      CLC
   2279  da03		       69 08		      ADC	#8
   2280  da05		       85 87		      STA	f
   2281  da07				   .L026		;  if f  =  72 then f	=  24
   2282  da07
   2283  da07		       a5 87		      LDA	f
   2284  da09		       c9 48		      CMP	#72
   2285  da0b		       d0 04		      BNE	.skipL026
   2286  da0d				   .condpart2
   2287  da0d		       a9 18		      LDA	#24
   2288  da0f		       85 87		      STA	f
   2289  da11				   .skipL026
   2290  da11				   .
   2291  da11							; 
   2292  da11
   2293  da11
   2294  da11
   2295  da11
   2296  da11							;---------------------------------------------------------
   2297  da11							;---------------------------------------------------------
   2298  da11
   2299  da11							;--"Drawscreen:"
   2300  da11							;-- Now Call the Twin Engines that emulate hardware level
   2301  da11							;-- Horizontal Scrolling and Scaling
   2302  da11							;----------------------------------------slide view window along bitmapped panorama currently loaded into CBS RAM:
   2303  da11
   2304  da11							; call primary rending engine:
   2305  da11
   2306  da11		       20 58 f5 	      jsr	pushabstractextendedplayfield
   2307  da14
   2308  da14							;-- any code that needs to access the double buffer in low RAM can go here
   2309  da14							;-- before calling the secondary rendering engine:
   2310  da14
   2311  da14							;--------- call 2ndary rendering engine:
   2312  da14							;--------- expand and flip 30 bytes of system RAM buffer into 60 Bytes for display:
   2313  da14
   2314  da14		       20 13 f4 	      jsr	AbstractPlayfieldBuilder
   2315  da17
   2316  da17							;-------------------------------------------
   2317  da17
   2318  da17
   2319  da17							;-----------------------
   2320  da17							;----------------------------
   2321  da17
   2322  da17
   2323  da17							; ------------------------------------------
   2324  da17							; ---- Resume Framework
   2325  da17							;-------------------------------------------
   2326  da17
   2327  da17		       ad 84 02    w17	      lda	INTIM
   2328  da1a		       d0 fb		      bne	w17	; done with large block of time!
   2329  da1c
   2330  da1c
   2331  da1c							;AGAIN, 2 WSYNC PATCH ... NO IDEA WHERE THESE WERE LOST TO; ROUNDING PERHAPS
   2332  da1c		       a9 00		      LDA	#0
   2333  da1e		       85 02		      STA	WSYNC
   2334  da20		       85 02		      STA	WSYNC
   2335  da22		       85 02		      STA	WSYNC
   2336  da24
   2337  da24							;+30 scanlines of vertical blank  ; (37 x 76)/64 = 35.6 
   2338  da24
   2339  da24							;-----Vertical Blank -------------------------------
   2340  da24							;---------------------------------------------------
   2341  da24		       a9 42		      lda	#%01000010
   2342  da26		       85 01		      sta	VBLANK	; vertical blank time after screen is drawn
   2343  da28		       a2 00		      ldx	#0
   2344  da2a
   2345  da2a
   2346  da2a							; DYNAMIC OVERSCAN:
   2347  da2a							; seeded with ? to match 30 calls to WSYNC?
   2348  da2a							; (37 x 76)/64 = 35.6 
   2349  da2a
   2350  da2a		       a2 23		      ldx	#35
   2351  da2c		       8e 96 02 	      stx	TIM64T	;  -------- time for more calls here:
   2352  da2f
   2353  da2f
   2354  da2f
   2355  da2f				   Overscan2		;DYNAMIC:
   2356  da2f		       ad 84 02 	      lda	INTIM
   2357  da32
   2358  da32		       d0 fb		      bne	Overscan2
   2359  da34		       85 02		      sta	WSYNC	; trailer
   2360  da36
   2361  da36		       60		      rts		;--------------done with blank frame (framerelay)
   2362  da37							;------------------------------------------------------------
   2363  da37							;------------END FRAMERELAY----------------------------------
   2364  da37							;------------------------------------------------------------
   2365  da37							;------------------------------------------------------------
   2366  da37
   2367  da37
   2368  da37
   2369  da37
   2370  da37
   2371  da37
   2372  da37							;-------------------------------------------------------------------------------------
   2373  da37							;----GetBitStatus (subroutine/function) gets or sets bit status; accumulator passes the argument
   2374  da37							; vars a and b used as temp vars; initially used the stack (preferred) but
   2375  da37							; revised on debugging and never pushed it back ;)
   2376  da37							; (so vars a and b will be overwritten if you use them in your code)
   2377  da37
   2378  da37				   getbitstatus
   2379  da37							; ... this should be a dual get/set routine.
   2380  da37							; arguments passed via the accumulator (lda #arg [0,1])
   2381  da37							; always do this... lda #0 to flip the target bit via inversion, will clear or set it.
   2382  da37							; lda #1 for setting it, also returns it's prior state in the accumulator, 0 if it was previously off
   2383  da37
   2384  da37
   2385  da37		       85 82		      sta	a	; keep get/set flag that was passed in the accumulator
   2386  da39		       a2 00		      ldx	#0
   2387  da3b
   2388  da3b
   2389  da3b		       a5 9a		      lda	bitx
   2390  da3d				   xoffsetgetbitstatus
   2391  da3d		       c9 0c		      cmp	#12
   2392  da3f		       90 07		      bcc	xoffsetdone_getbitstatus
   2393  da41		       e8		      inx
   2394  da42		       38		      sec
   2395  da43		       e9 08		      sbc	#8
   2396  da45		       4c 3d fa 	      jmp	xoffsetgetbitstatus
   2397  da48				   xoffsetdone_getbitstatus		; x byte offset in x, bit offset in accumulator
   2398  da48
   2399  da48							;offset a single byte?
   2400  da48		       c9 04		      cmp	#4
   2401  da4a		       90 01		      bcc	donesinglebyteoffset
   2402  da4c		       e8		      inx
   2403  da4d				   donesinglebyteoffset
   2404  da4d		       85 83		      sta	b	; preserve bit offset
   2405  da4f		       a4 9b		      ldy	bity
   2406  da51		       c0 00	   flatten_y  cpy	#0
   2407  da53		       f0 09		      beq	y_flat
   2408  da55		       88		      dey
   2409  da56		       8a		      txa
   2410  da57		       18		      clc
   2411  da58		       69 0c		      adc	#12	; add one row per y pixel
   2412  da5a		       aa		      tax
   2413  da5b		       4c 51 fa 	      jmp	flatten_y
   2414  da5e
   2415  da5e				   y_flat		; x now points to cell, bit pointer is in the stack
   2416  da5e
   2417  da5e		       a5 83		      lda	b	; -- get bitpointer
   2418  da60							; -- Compare it against 12 handlers (first 4 are special, next 8 are reused for any subsequent bit index)
   2419  da60
   2420  da60
   2421  da60
   2422  da60							; -- pull from similar fillout routine; first add and test superchip large playfield in RAM, store 240 bytes in 120 ;)
   2423  da60							; beq getset0
   2424  da60		       d0 1b		      bne	getset1
   2425  da62							; fall through to 0 should not happen
   2426  da62
   2427  da62				   getset0
   2428  da62		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2429  da65		       98		      tya
   2430  da66		       29 08		      and	#%00001000	; was it set?
   2431  da68		       85 83		      sta	b	; push previous bit status 
   2432  da6a		       98		      tya
   2433  da6b		       a4 82		      ldy	a	; get/set status is in var a, 0 clears bit
   2434  da6d		       f0 06		      beq	clear0
   2435  da6f		       09 08		      ora	#%00001000	; set it
   2436  da71		       c0 00		      cpy	#0
   2437  da73		       d0 02		      bne	done0	; branch always
   2438  da75				   clear0
   2439  da75		       49 08		      eor	#%00001000	; clear it
   2440  da77		       9d 00 f0    done0      sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2441  da7a		       4c cb fb 	      jmp	donegetset
   2442  da7d
   2443  da7d				   getset1
   2444  da7d		       c9 01		      cmp	#1
   2445  da7f		       d0 1b		      bne	getset2
   2446  da81
   2447  da81		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2448  da84		       98		      tya
   2449  da85		       29 04		      and	#%00000100	; was it set?
   2450  da87		       85 83		      sta	b	;pha ; push previous bit status
   2451  da89		       98		      tya
   2452  da8a		       a4 82		      ldy	a	; get/set status is in var a, 0 clears bit
   2453  da8c		       f0 06		      beq	clear1
   2454  da8e		       09 04		      ora	#%00000100	; set it
   2455  da90		       c0 00		      cpy	#0
   2456  da92		       d0 02		      bne	done1	; branch always
   2457  da94				   clear1
   2458  da94		       49 04		      eor	#%00000100	; clear it
   2459  da96		       9d 00 f0    done1      sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2460  da99		       4c cb fb 	      jmp	donegetset
   2461  da9c
   2462  da9c				   getset2
   2463  da9c		       c9 02		      cmp	#2
   2464  da9e		       d0 1b		      bne	getset3
   2465  daa0
   2466  daa0		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2467  daa3		       98		      tya
   2468  daa4		       29 02		      and	#%00000010	; was it set?
   2469  daa6		       85 83		      sta	b	;pha ; push previous bit status
   2470  daa8		       98		      tya
   2471  daa9		       a4 82		      ldy	a	; get/set status is in var a, 0 clears bit
   2472  daab		       f0 06		      beq	clear2
   2473  daad		       09 02		      ora	#%00000010	; set it
   2474  daaf		       c0 00		      cpy	#0
   2475  dab1		       d0 02		      bne	done2	; branch always
   2476  dab3				   clear2
   2477  dab3		       49 02		      eor	#%00000010
   2478  dab5		       9d 00 f0    done2      sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2479  dab8		       4c cb fb 	      jmp	donegetset
   2480  dabb
   2481  dabb				   getset3
   2482  dabb		       c9 03		      cmp	#3
   2483  dabd		       d0 1b		      bne	getset4
   2484  dabf		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2485  dac2		       98		      tya
   2486  dac3		       29 01		      and	#%00000001	; was it set?
   2487  dac5		       85 83		      sta	b	;pha ; push previous bit status
   2488  dac7		       98		      tya
   2489  dac8		       a4 82		      ldy	a
   2490  daca		       f0 06		      beq	clear3
   2491  dacc		       09 01		      ora	#%00000001	; set it
   2492  dace		       c0 00		      cpy	#0
   2493  dad0		       d0 02		      bne	done3
   2494  dad2				   clear3
   2495  dad2		       49 01		      eor	#%00000001	; clear it
   2496  dad4		       9d 00 f0    done3      sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2497  dad7		       4c cb fb 	      jmp	donegetset
   2498  dada
   2499  dada				   getset4
   2500  dada		       c9 04		      cmp	#4
   2501  dadc		       d0 1b		      bne	getset5
   2502  dade		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2503  dae1		       98		      tya
   2504  dae2		       29 80		      and	#%10000000	; was it set?
   2505  dae4		       85 83		      sta	b	;pha ; push previous bit status
   2506  dae6		       98		      tya
   2507  dae7		       a4 82		      ldy	a	; clear or set toggle
   2508  dae9		       f0 06		      beq	clear4
   2509  daeb		       09 80		      ora	#%10000000	; set it
   2510  daed		       c0 00		      cpy	#0
   2511  daef		       d0 02		      bne	done4
   2512  daf1				   clear4
   2513  daf1		       49 80		      eor	#%10000000	; clear it
   2514  daf3		       9d 00 f0    done4      sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2515  daf6		       4c cb fb 	      jmp	donegetset
   2516  daf9
   2517  daf9				   getset5
   2518  daf9		       c9 05		      cmp	#5
   2519  dafb		       d0 1b		      bne	getset6
   2520  dafd		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2521  db00		       98		      tya
   2522  db01		       29 40		      and	#%01000000	; was it set?
   2523  db03		       85 83		      sta	b	;pha ; push previous bit status
   2524  db05		       98		      tya
   2525  db06		       a4 82		      ldy	a	; clear or set toggle
   2526  db08		       f0 06		      beq	clear5
   2527  db0a		       09 40		      ora	#%01000000	; set it
   2528  db0c		       c0 00		      cpy	#0
   2529  db0e		       d0 02		      bne	done5	;branch always
   2530  db10		       49 40	   clear5     eor	#%01000000	; clear it
   2531  db12		       9d 00 f0    done5      sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2532  db15		       4c cb fb 	      jmp	donegetset
   2533  db18
   2534  db18				   getset6
   2535  db18		       c9 06		      cmp	#6
   2536  db1a		       d0 1b		      bne	getset7
   2537  db1c		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2538  db1f		       98		      tya
   2539  db20		       29 20		      and	#%00100000	; was it set?
   2540  db22		       85 83		      sta	b	;pha ; push previous bit status
   2541  db24		       98		      tya
   2542  db25		       a4 82		      ldy	a	; clear or set toggle
   2543  db27		       f0 06		      beq	clear6
   2544  db29
   2545  db29		       09 20		      ora	#%00100000	; set it
   2546  db2b		       c0 00		      cpy	#0
   2547  db2d		       d0 02		      bne	done6
   2548  db2f		       49 20	   clear6     eor	#%00100000	; clear it
   2549  db31		       9d 00 f0    done6      sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2550  db34		       4c cb fb 	      jmp	donegetset
   2551  db37
   2552  db37				   getset7
   2553  db37		       c9 07		      cmp	#7
   2554  db39		       d0 1b		      bne	getset8
   2555  db3b		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2556  db3e		       98		      tya
   2557  db3f		       29 10		      and	#%00010000	; was it set?
   2558  db41		       85 83		      sta	b	;pha ; push previous bit status
   2559  db43		       98		      tya
   2560  db44		       a4 82		      ldy	a	; clear or set toggle
   2561  db46		       f0 06		      beq	clear7
   2562  db48		       09 10		      ora	#%00010000	; set it
   2563  db4a		       c0 00		      cpy	#0
   2564  db4c		       d0 02		      bne	done7
   2565  db4e		       49 10	   clear7     eor	#%00010000
   2566  db50		       9d 00 f0    done7      sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2567  db53		       4c cb fb 	      jmp	donegetset
   2568  db56
   2569  db56				   getset8
   2570  db56		       c9 08		      cmp	#8
   2571  db58		       d0 1b		      bne	getset9
   2572  db5a		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2573  db5d		       98		      tya
   2574  db5e		       29 08		      and	#%00001000	; was it set?
   2575  db60		       85 83		      sta	b	;pha ; push previous bit status
   2576  db62		       98		      tya
   2577  db63		       a4 82		      ldy	a	; clear or set toggle
   2578  db65		       f0 06		      beq	clear8
   2579  db67		       09 08		      ora	#%00001000	; set it
   2580  db69		       c0 00		      cpy	#0
   2581  db6b		       d0 02		      bne	done8
   2582  db6d		       49 08	   clear8     eor	#%00001000
   2583  db6f		       9d 00 f0    done8      sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2584  db72		       4c cb fb 	      jmp	donegetset
   2585  db75
   2586  db75				   getset9
   2587  db75		       c9 09		      cmp	#9
   2588  db77		       d0 1b		      bne	getset10
   2589  db79		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2590  db7c		       98		      tya
   2591  db7d		       29 04		      and	#%00000100	; was it set?
   2592  db7f		       85 83		      sta	b	;pha ; push previous bit status
   2593  db81		       98		      tya
   2594  db82		       a4 82		      ldy	a	; clear or set toggle
   2595  db84		       f0 06		      beq	clear9
   2596  db86		       09 04		      ora	#%00000100	; set it
   2597  db88		       c0 00		      cpy	#0
   2598  db8a		       d0 02		      bne	done9	; branch always
   2599  db8c		       49 04	   clear9     eor	#%00000100
   2600  db8e		       9d 00 f0    done9      sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2601  db91		       4c cb fb 	      jmp	donegetset
   2602  db94
   2603  db94				   getset10
   2604  db94		       c9 0a		      cmp	#10
   2605  db96		       d0 1b		      bne	getset11
   2606  db98		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2607  db9b		       98		      tya
   2608  db9c		       29 02		      and	#%00000010	; was it set?
   2609  db9e		       85 83		      sta	b	; pha ; push previous bit status
   2610  dba0		       98		      tya
   2611  dba1		       a4 82		      ldy	a	; clear or set toggle
   2612  dba3		       f0 06		      beq	clear10
   2613  dba5
   2614  dba5		       09 02		      ora	#%00000010	; set it
   2615  dba7		       c0 00		      cpy	#0
   2616  dba9		       d0 02		      bne	done10	;branch always
   2617  dbab		       49 02	   clear10    eor	#%00000010
   2618  dbad		       9d 00 f0    done10     sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2619  dbb0		       4c cb fb 	      jmp	donegetset
   2620  dbb3
   2621  dbb3				   getset11		; fall through should never happen...
   2622  dbb3		       bc 00 f1 	      ldy	MyAbstractExtendedPlayfieldSCR,x	;  read area of superchip
   2623  dbb6		       98		      tya
   2624  dbb7		       29 01		      and	#%00000001	; was it set?
   2625  dbb9		       85 83		      sta	b	;pha ; push previous bit status
   2626  dbbb		       98		      tya
   2627  dbbc		       a4 82		      ldy	a	; clear or set toggle
   2628  dbbe		       f0 06		      beq	clear11
   2629  dbc0		       09 01		      ora	#%00000001	; set it
   2630  dbc2		       c0 00		      cpy	#0
   2631  dbc4		       d0 02		      bne	done11	; branch always
   2632  dbc6		       49 01	   clear11    eor	#%00000001
   2633  dbc8		       9d 00 f0    done11     sta	MyAbstractExtendedPlayfieldSCW,x	; store in write area of SUPERCHIP
   2634  dbcb							; jmp donegetset
   2635  dbcb
   2636  dbcb				   donegetset
   2637  dbcb		       a5 83		      lda	b	; pla ; return previous bit status
   2638  dbcd		       60		      rts		; getbitstatus -------------------------------
   2639  dbce
   2640  dbce							;----SetBitStatus (SCROLLOUT)
   2641  dbce				   setbitstatus
   2642  dbce		       ea		      nop		; not used, above routine handles both
   2643  dbcf		       ea		      nop
   2644  dbd0		       60		      rts
   2645  dbd1
   2646  dbd1
   2647  dbd1							;;InterruptVectors ... not now
   2648  dbd1
   2649  dbd1
   2650  dbd1							;---------------------------------------------------
   2651  dbd1							;---------------------------------------------------
   2652  dbd1
   2653  dffc					      org	$DFFC
   2654  dffc					      rorg	$FFFC
   2655  dffc		       00 f2		      .word.w	Bank0
   2656  dffe		       42 30		      .byte.b	"B0"
   2657  e000
   2658  e000							;---------------------------------------------------
   2659  e000							;---------------------------------------------------
   2660  e000							;---------------------------------------------------
   2661  e000
   2662  e000
   2663  e000
   2664  e000							;--------bank 1 is used to hold the large virtual world bitmaps and the musical score and music engine:
   2665  f000 ????				      seg	bank_1
   2666  e000					      org	$E000
   2667  e000					      rorg	$F000
   2668  e000
   2669  e000					      repeat	512
   2670  e000		       00		      .byte.b	$00
   2669  e000					      repend
   2670  e001		       00		      .byte.b	$00
   2669  e001					      repend
   2670  e002		       00		      .byte.b	$00
   2669  e002					      repend
   2670  e003		       00		      .byte.b	$00
   2669  e003					      repend
   2670  e004		       00		      .byte.b	$00
   2669  e004					      repend
   2670  e005		       00		      .byte.b	$00
   2669  e005					      repend
   2670  e006		       00		      .byte.b	$00
   2669  e006					      repend
   2670  e007		       00		      .byte.b	$00
   2669  e007					      repend
   2670  e008		       00		      .byte.b	$00
   2669  e008					      repend
   2670  e009		       00		      .byte.b	$00
   2669  e009					      repend
   2670  e00a		       00		      .byte.b	$00
   2669  e00a					      repend
   2670  e00b		       00		      .byte.b	$00
   2669  e00b					      repend
   2670  e00c		       00		      .byte.b	$00
   2669  e00c					      repend
   2670  e00d		       00		      .byte.b	$00
   2669  e00d					      repend
   2670  e00e		       00		      .byte.b	$00
   2669  e00e					      repend
   2670  e00f		       00		      .byte.b	$00
   2669  e00f					      repend
   2670  e010		       00		      .byte.b	$00
   2669  e010					      repend
   2670  e011		       00		      .byte.b	$00
   2669  e011					      repend
   2670  e012		       00		      .byte.b	$00
   2669  e012					      repend
   2670  e013		       00		      .byte.b	$00
   2669  e013					      repend
   2670  e014		       00		      .byte.b	$00
   2669  e014					      repend
   2670  e015		       00		      .byte.b	$00
   2669  e015					      repend
   2670  e016		       00		      .byte.b	$00
   2669  e016					      repend
   2670  e017		       00		      .byte.b	$00
   2669  e017					      repend
   2670  e018		       00		      .byte.b	$00
   2669  e018					      repend
   2670  e019		       00		      .byte.b	$00
   2669  e019					      repend
   2670  e01a		       00		      .byte.b	$00
   2669  e01a					      repend
   2670  e01b		       00		      .byte.b	$00
   2669  e01b					      repend
   2670  e01c		       00		      .byte.b	$00
   2669  e01c					      repend
   2670  e01d		       00		      .byte.b	$00
   2669  e01d					      repend
   2670  e01e		       00		      .byte.b	$00
   2669  e01e					      repend
   2670  e01f		       00		      .byte.b	$00
   2669  e01f					      repend
   2670  e020		       00		      .byte.b	$00
   2669  e020					      repend
   2670  e021		       00		      .byte.b	$00
   2669  e021					      repend
   2670  e022		       00		      .byte.b	$00
   2669  e022					      repend
   2670  e023		       00		      .byte.b	$00
   2669  e023					      repend
   2670  e024		       00		      .byte.b	$00
   2669  e024					      repend
   2670  e025		       00		      .byte.b	$00
   2669  e025					      repend
   2670  e026		       00		      .byte.b	$00
   2669  e026					      repend
   2670  e027		       00		      .byte.b	$00
   2669  e027					      repend
   2670  e028		       00		      .byte.b	$00
   2669  e028					      repend
   2670  e029		       00		      .byte.b	$00
   2669  e029					      repend
   2670  e02a		       00		      .byte.b	$00
   2669  e02a					      repend
   2670  e02b		       00		      .byte.b	$00
   2669  e02b					      repend
   2670  e02c		       00		      .byte.b	$00
   2669  e02c					      repend
   2670  e02d		       00		      .byte.b	$00
   2669  e02d					      repend
   2670  e02e		       00		      .byte.b	$00
   2669  e02e					      repend
   2670  e02f		       00		      .byte.b	$00
   2669  e02f					      repend
   2670  e030		       00		      .byte.b	$00
   2669  e030					      repend
   2670  e031		       00		      .byte.b	$00
   2669  e031					      repend
   2670  e032		       00		      .byte.b	$00
   2669  e032					      repend
   2670  e033		       00		      .byte.b	$00
   2669  e033					      repend
   2670  e034		       00		      .byte.b	$00
   2669  e034					      repend
   2670  e035		       00		      .byte.b	$00
   2669  e035					      repend
   2670  e036		       00		      .byte.b	$00
   2669  e036					      repend
   2670  e037		       00		      .byte.b	$00
   2669  e037					      repend
   2670  e038		       00		      .byte.b	$00
   2669  e038					      repend
   2670  e039		       00		      .byte.b	$00
   2669  e039					      repend
   2670  e03a		       00		      .byte.b	$00
   2669  e03a					      repend
   2670  e03b		       00		      .byte.b	$00
   2669  e03b					      repend
   2670  e03c		       00		      .byte.b	$00
   2669  e03c					      repend
   2670  e03d		       00		      .byte.b	$00
   2669  e03d					      repend
   2670  e03e		       00		      .byte.b	$00
   2669  e03e					      repend
   2670  e03f		       00		      .byte.b	$00
   2669  e03f					      repend
   2670  e040		       00		      .byte.b	$00
   2669  e040					      repend
   2670  e041		       00		      .byte.b	$00
   2669  e041					      repend
   2670  e042		       00		      .byte.b	$00
   2669  e042					      repend
   2670  e043		       00		      .byte.b	$00
   2669  e043					      repend
   2670  e044		       00		      .byte.b	$00
   2669  e044					      repend
   2670  e045		       00		      .byte.b	$00
   2669  e045					      repend
   2670  e046		       00		      .byte.b	$00
   2669  e046					      repend
   2670  e047		       00		      .byte.b	$00
   2669  e047					      repend
   2670  e048		       00		      .byte.b	$00
   2669  e048					      repend
   2670  e049		       00		      .byte.b	$00
   2669  e049					      repend
   2670  e04a		       00		      .byte.b	$00
   2669  e04a					      repend
   2670  e04b		       00		      .byte.b	$00
   2669  e04b					      repend
   2670  e04c		       00		      .byte.b	$00
   2669  e04c					      repend
   2670  e04d		       00		      .byte.b	$00
   2669  e04d					      repend
   2670  e04e		       00		      .byte.b	$00
   2669  e04e					      repend
   2670  e04f		       00		      .byte.b	$00
   2669  e04f					      repend
   2670  e050		       00		      .byte.b	$00
   2669  e050					      repend
   2670  e051		       00		      .byte.b	$00
   2669  e051					      repend
   2670  e052		       00		      .byte.b	$00
   2669  e052					      repend
   2670  e053		       00		      .byte.b	$00
   2669  e053					      repend
   2670  e054		       00		      .byte.b	$00
   2669  e054					      repend
   2670  e055		       00		      .byte.b	$00
   2669  e055					      repend
   2670  e056		       00		      .byte.b	$00
   2669  e056					      repend
   2670  e057		       00		      .byte.b	$00
   2669  e057					      repend
   2670  e058		       00		      .byte.b	$00
   2669  e058					      repend
   2670  e059		       00		      .byte.b	$00
   2669  e059					      repend
   2670  e05a		       00		      .byte.b	$00
   2669  e05a					      repend
   2670  e05b		       00		      .byte.b	$00
   2669  e05b					      repend
   2670  e05c		       00		      .byte.b	$00
   2669  e05c					      repend
   2670  e05d		       00		      .byte.b	$00
   2669  e05d					      repend
   2670  e05e		       00		      .byte.b	$00
   2669  e05e					      repend
   2670  e05f		       00		      .byte.b	$00
   2669  e05f					      repend
   2670  e060		       00		      .byte.b	$00
   2669  e060					      repend
   2670  e061		       00		      .byte.b	$00
   2669  e061					      repend
   2670  e062		       00		      .byte.b	$00
   2669  e062					      repend
   2670  e063		       00		      .byte.b	$00
   2669  e063					      repend
   2670  e064		       00		      .byte.b	$00
   2669  e064					      repend
   2670  e065		       00		      .byte.b	$00
   2669  e065					      repend
   2670  e066		       00		      .byte.b	$00
   2669  e066					      repend
   2670  e067		       00		      .byte.b	$00
   2669  e067					      repend
   2670  e068		       00		      .byte.b	$00
   2669  e068					      repend
   2670  e069		       00		      .byte.b	$00
   2669  e069					      repend
   2670  e06a		       00		      .byte.b	$00
   2669  e06a					      repend
   2670  e06b		       00		      .byte.b	$00
   2669  e06b					      repend
   2670  e06c		       00		      .byte.b	$00
   2669  e06c					      repend
   2670  e06d		       00		      .byte.b	$00
   2669  e06d					      repend
   2670  e06e		       00		      .byte.b	$00
   2669  e06e					      repend
   2670  e06f		       00		      .byte.b	$00
   2669  e06f					      repend
   2670  e070		       00		      .byte.b	$00
   2669  e070					      repend
   2670  e071		       00		      .byte.b	$00
   2669  e071					      repend
   2670  e072		       00		      .byte.b	$00
   2669  e072					      repend
   2670  e073		       00		      .byte.b	$00
   2669  e073					      repend
   2670  e074		       00		      .byte.b	$00
   2669  e074					      repend
   2670  e075		       00		      .byte.b	$00
   2669  e075					      repend
   2670  e076		       00		      .byte.b	$00
   2669  e076					      repend
   2670  e077		       00		      .byte.b	$00
   2669  e077					      repend
   2670  e078		       00		      .byte.b	$00
   2669  e078					      repend
   2670  e079		       00		      .byte.b	$00
   2669  e079					      repend
   2670  e07a		       00		      .byte.b	$00
   2669  e07a					      repend
   2670  e07b		       00		      .byte.b	$00
   2669  e07b					      repend
   2670  e07c		       00		      .byte.b	$00
   2669  e07c					      repend
   2670  e07d		       00		      .byte.b	$00
   2669  e07d					      repend
   2670  e07e		       00		      .byte.b	$00
   2669  e07e					      repend
   2670  e07f		       00		      .byte.b	$00
   2669  e07f					      repend
   2670  e080		       00		      .byte.b	$00
   2669  e080					      repend
   2670  e081		       00		      .byte.b	$00
   2669  e081					      repend
   2670  e082		       00		      .byte.b	$00
   2669  e082					      repend
   2670  e083		       00		      .byte.b	$00
   2669  e083					      repend
   2670  e084		       00		      .byte.b	$00
   2669  e084					      repend
   2670  e085		       00		      .byte.b	$00
   2669  e085					      repend
   2670  e086		       00		      .byte.b	$00
   2669  e086					      repend
   2670  e087		       00		      .byte.b	$00
   2669  e087					      repend
   2670  e088		       00		      .byte.b	$00
   2669  e088					      repend
   2670  e089		       00		      .byte.b	$00
   2669  e089					      repend
   2670  e08a		       00		      .byte.b	$00
   2669  e08a					      repend
   2670  e08b		       00		      .byte.b	$00
   2669  e08b					      repend
   2670  e08c		       00		      .byte.b	$00
   2669  e08c					      repend
   2670  e08d		       00		      .byte.b	$00
   2669  e08d					      repend
   2670  e08e		       00		      .byte.b	$00
   2669  e08e					      repend
   2670  e08f		       00		      .byte.b	$00
   2669  e08f					      repend
   2670  e090		       00		      .byte.b	$00
   2669  e090					      repend
   2670  e091		       00		      .byte.b	$00
   2669  e091					      repend
   2670  e092		       00		      .byte.b	$00
   2669  e092					      repend
   2670  e093		       00		      .byte.b	$00
   2669  e093					      repend
   2670  e094		       00		      .byte.b	$00
   2669  e094					      repend
   2670  e095		       00		      .byte.b	$00
   2669  e095					      repend
   2670  e096		       00		      .byte.b	$00
   2669  e096					      repend
   2670  e097		       00		      .byte.b	$00
   2669  e097					      repend
   2670  e098		       00		      .byte.b	$00
   2669  e098					      repend
   2670  e099		       00		      .byte.b	$00
   2669  e099					      repend
   2670  e09a		       00		      .byte.b	$00
   2669  e09a					      repend
   2670  e09b		       00		      .byte.b	$00
   2669  e09b					      repend
   2670  e09c		       00		      .byte.b	$00
   2669  e09c					      repend
   2670  e09d		       00		      .byte.b	$00
   2669  e09d					      repend
   2670  e09e		       00		      .byte.b	$00
   2669  e09e					      repend
   2670  e09f		       00		      .byte.b	$00
   2669  e09f					      repend
   2670  e0a0		       00		      .byte.b	$00
   2669  e0a0					      repend
   2670  e0a1		       00		      .byte.b	$00
   2669  e0a1					      repend
   2670  e0a2		       00		      .byte.b	$00
   2669  e0a2					      repend
   2670  e0a3		       00		      .byte.b	$00
   2669  e0a3					      repend
   2670  e0a4		       00		      .byte.b	$00
   2669  e0a4					      repend
   2670  e0a5		       00		      .byte.b	$00
   2669  e0a5					      repend
   2670  e0a6		       00		      .byte.b	$00
   2669  e0a6					      repend
   2670  e0a7		       00		      .byte.b	$00
   2669  e0a7					      repend
   2670  e0a8		       00		      .byte.b	$00
   2669  e0a8					      repend
   2670  e0a9		       00		      .byte.b	$00
   2669  e0a9					      repend
   2670  e0aa		       00		      .byte.b	$00
   2669  e0aa					      repend
   2670  e0ab		       00		      .byte.b	$00
   2669  e0ab					      repend
   2670  e0ac		       00		      .byte.b	$00
   2669  e0ac					      repend
   2670  e0ad		       00		      .byte.b	$00
   2669  e0ad					      repend
   2670  e0ae		       00		      .byte.b	$00
   2669  e0ae					      repend
   2670  e0af		       00		      .byte.b	$00
   2669  e0af					      repend
   2670  e0b0		       00		      .byte.b	$00
   2669  e0b0					      repend
   2670  e0b1		       00		      .byte.b	$00
   2669  e0b1					      repend
   2670  e0b2		       00		      .byte.b	$00
   2669  e0b2					      repend
   2670  e0b3		       00		      .byte.b	$00
   2669  e0b3					      repend
   2670  e0b4		       00		      .byte.b	$00
   2669  e0b4					      repend
   2670  e0b5		       00		      .byte.b	$00
   2669  e0b5					      repend
   2670  e0b6		       00		      .byte.b	$00
   2669  e0b6					      repend
   2670  e0b7		       00		      .byte.b	$00
   2669  e0b7					      repend
   2670  e0b8		       00		      .byte.b	$00
   2669  e0b8					      repend
   2670  e0b9		       00		      .byte.b	$00
   2669  e0b9					      repend
   2670  e0ba		       00		      .byte.b	$00
   2669  e0ba					      repend
   2670  e0bb		       00		      .byte.b	$00
   2669  e0bb					      repend
   2670  e0bc		       00		      .byte.b	$00
   2669  e0bc					      repend
   2670  e0bd		       00		      .byte.b	$00
   2669  e0bd					      repend
   2670  e0be		       00		      .byte.b	$00
   2669  e0be					      repend
   2670  e0bf		       00		      .byte.b	$00
   2669  e0bf					      repend
   2670  e0c0		       00		      .byte.b	$00
   2669  e0c0					      repend
   2670  e0c1		       00		      .byte.b	$00
   2669  e0c1					      repend
   2670  e0c2		       00		      .byte.b	$00
   2669  e0c2					      repend
   2670  e0c3		       00		      .byte.b	$00
   2669  e0c3					      repend
   2670  e0c4		       00		      .byte.b	$00
   2669  e0c4					      repend
   2670  e0c5		       00		      .byte.b	$00
   2669  e0c5					      repend
   2670  e0c6		       00		      .byte.b	$00
   2669  e0c6					      repend
   2670  e0c7		       00		      .byte.b	$00
   2669  e0c7					      repend
   2670  e0c8		       00		      .byte.b	$00
   2669  e0c8					      repend
   2670  e0c9		       00		      .byte.b	$00
   2669  e0c9					      repend
   2670  e0ca		       00		      .byte.b	$00
   2669  e0ca					      repend
   2670  e0cb		       00		      .byte.b	$00
   2669  e0cb					      repend
   2670  e0cc		       00		      .byte.b	$00
   2669  e0cc					      repend
   2670  e0cd		       00		      .byte.b	$00
   2669  e0cd					      repend
   2670  e0ce		       00		      .byte.b	$00
   2669  e0ce					      repend
   2670  e0cf		       00		      .byte.b	$00
   2669  e0cf					      repend
   2670  e0d0		       00		      .byte.b	$00
   2669  e0d0					      repend
   2670  e0d1		       00		      .byte.b	$00
   2669  e0d1					      repend
   2670  e0d2		       00		      .byte.b	$00
   2669  e0d2					      repend
   2670  e0d3		       00		      .byte.b	$00
   2669  e0d3					      repend
   2670  e0d4		       00		      .byte.b	$00
   2669  e0d4					      repend
   2670  e0d5		       00		      .byte.b	$00
   2669  e0d5					      repend
   2670  e0d6		       00		      .byte.b	$00
   2669  e0d6					      repend
   2670  e0d7		       00		      .byte.b	$00
   2669  e0d7					      repend
   2670  e0d8		       00		      .byte.b	$00
   2669  e0d8					      repend
   2670  e0d9		       00		      .byte.b	$00
   2669  e0d9					      repend
   2670  e0da		       00		      .byte.b	$00
   2669  e0da					      repend
   2670  e0db		       00		      .byte.b	$00
   2669  e0db					      repend
   2670  e0dc		       00		      .byte.b	$00
   2669  e0dc					      repend
   2670  e0dd		       00		      .byte.b	$00
   2669  e0dd					      repend
   2670  e0de		       00		      .byte.b	$00
   2669  e0de					      repend
   2670  e0df		       00		      .byte.b	$00
   2669  e0df					      repend
   2670  e0e0		       00		      .byte.b	$00
   2669  e0e0					      repend
   2670  e0e1		       00		      .byte.b	$00
   2669  e0e1					      repend
   2670  e0e2		       00		      .byte.b	$00
   2669  e0e2					      repend
   2670  e0e3		       00		      .byte.b	$00
   2669  e0e3					      repend
   2670  e0e4		       00		      .byte.b	$00
   2669  e0e4					      repend
   2670  e0e5		       00		      .byte.b	$00
   2669  e0e5					      repend
   2670  e0e6		       00		      .byte.b	$00
   2669  e0e6					      repend
   2670  e0e7		       00		      .byte.b	$00
   2669  e0e7					      repend
   2670  e0e8		       00		      .byte.b	$00
   2669  e0e8					      repend
   2670  e0e9		       00		      .byte.b	$00
   2669  e0e9					      repend
   2670  e0ea		       00		      .byte.b	$00
   2669  e0ea					      repend
   2670  e0eb		       00		      .byte.b	$00
   2669  e0eb					      repend
   2670  e0ec		       00		      .byte.b	$00
   2669  e0ec					      repend
   2670  e0ed		       00		      .byte.b	$00
   2669  e0ed					      repend
   2670  e0ee		       00		      .byte.b	$00
   2669  e0ee					      repend
   2670  e0ef		       00		      .byte.b	$00
   2669  e0ef					      repend
   2670  e0f0		       00		      .byte.b	$00
   2669  e0f0					      repend
   2670  e0f1		       00		      .byte.b	$00
   2669  e0f1					      repend
   2670  e0f2		       00		      .byte.b	$00
   2669  e0f2					      repend
   2670  e0f3		       00		      .byte.b	$00
   2669  e0f3					      repend
   2670  e0f4		       00		      .byte.b	$00
   2669  e0f4					      repend
   2670  e0f5		       00		      .byte.b	$00
   2669  e0f5					      repend
   2670  e0f6		       00		      .byte.b	$00
   2669  e0f6					      repend
   2670  e0f7		       00		      .byte.b	$00
   2669  e0f7					      repend
   2670  e0f8		       00		      .byte.b	$00
   2669  e0f8					      repend
   2670  e0f9		       00		      .byte.b	$00
   2669  e0f9					      repend
   2670  e0fa		       00		      .byte.b	$00
   2669  e0fa					      repend
   2670  e0fb		       00		      .byte.b	$00
   2669  e0fb					      repend
   2670  e0fc		       00		      .byte.b	$00
   2669  e0fc					      repend
   2670  e0fd		       00		      .byte.b	$00
   2669  e0fd					      repend
   2670  e0fe		       00		      .byte.b	$00
   2669  e0fe					      repend
   2670  e0ff		       00		      .byte.b	$00
   2669  e0ff					      repend
   2670  e100		       00		      .byte.b	$00
   2669  e100					      repend
   2670  e101		       00		      .byte.b	$00
   2669  e101					      repend
   2670  e102		       00		      .byte.b	$00
   2669  e102					      repend
   2670  e103		       00		      .byte.b	$00
   2669  e103					      repend
   2670  e104		       00		      .byte.b	$00
   2669  e104					      repend
   2670  e105		       00		      .byte.b	$00
   2669  e105					      repend
   2670  e106		       00		      .byte.b	$00
   2669  e106					      repend
   2670  e107		       00		      .byte.b	$00
   2669  e107					      repend
   2670  e108		       00		      .byte.b	$00
   2669  e108					      repend
   2670  e109		       00		      .byte.b	$00
   2669  e109					      repend
   2670  e10a		       00		      .byte.b	$00
   2669  e10a					      repend
   2670  e10b		       00		      .byte.b	$00
   2669  e10b					      repend
   2670  e10c		       00		      .byte.b	$00
   2669  e10c					      repend
   2670  e10d		       00		      .byte.b	$00
   2669  e10d					      repend
   2670  e10e		       00		      .byte.b	$00
   2669  e10e					      repend
   2670  e10f		       00		      .byte.b	$00
   2669  e10f					      repend
   2670  e110		       00		      .byte.b	$00
   2669  e110					      repend
   2670  e111		       00		      .byte.b	$00
   2669  e111					      repend
   2670  e112		       00		      .byte.b	$00
   2669  e112					      repend
   2670  e113		       00		      .byte.b	$00
   2669  e113					      repend
   2670  e114		       00		      .byte.b	$00
   2669  e114					      repend
   2670  e115		       00		      .byte.b	$00
   2669  e115					      repend
   2670  e116		       00		      .byte.b	$00
   2669  e116					      repend
   2670  e117		       00		      .byte.b	$00
   2669  e117					      repend
   2670  e118		       00		      .byte.b	$00
   2669  e118					      repend
   2670  e119		       00		      .byte.b	$00
   2669  e119					      repend
   2670  e11a		       00		      .byte.b	$00
   2669  e11a					      repend
   2670  e11b		       00		      .byte.b	$00
   2669  e11b					      repend
   2670  e11c		       00		      .byte.b	$00
   2669  e11c					      repend
   2670  e11d		       00		      .byte.b	$00
   2669  e11d					      repend
   2670  e11e		       00		      .byte.b	$00
   2669  e11e					      repend
   2670  e11f		       00		      .byte.b	$00
   2669  e11f					      repend
   2670  e120		       00		      .byte.b	$00
   2669  e120					      repend
   2670  e121		       00		      .byte.b	$00
   2669  e121					      repend
   2670  e122		       00		      .byte.b	$00
   2669  e122					      repend
   2670  e123		       00		      .byte.b	$00
   2669  e123					      repend
   2670  e124		       00		      .byte.b	$00
   2669  e124					      repend
   2670  e125		       00		      .byte.b	$00
   2669  e125					      repend
   2670  e126		       00		      .byte.b	$00
   2669  e126					      repend
   2670  e127		       00		      .byte.b	$00
   2669  e127					      repend
   2670  e128		       00		      .byte.b	$00
   2669  e128					      repend
   2670  e129		       00		      .byte.b	$00
   2669  e129					      repend
   2670  e12a		       00		      .byte.b	$00
   2669  e12a					      repend
   2670  e12b		       00		      .byte.b	$00
   2669  e12b					      repend
   2670  e12c		       00		      .byte.b	$00
   2669  e12c					      repend
   2670  e12d		       00		      .byte.b	$00
   2669  e12d					      repend
   2670  e12e		       00		      .byte.b	$00
   2669  e12e					      repend
   2670  e12f		       00		      .byte.b	$00
   2669  e12f					      repend
   2670  e130		       00		      .byte.b	$00
   2669  e130					      repend
   2670  e131		       00		      .byte.b	$00
   2669  e131					      repend
   2670  e132		       00		      .byte.b	$00
   2669  e132					      repend
   2670  e133		       00		      .byte.b	$00
   2669  e133					      repend
   2670  e134		       00		      .byte.b	$00
   2669  e134					      repend
   2670  e135		       00		      .byte.b	$00
   2669  e135					      repend
   2670  e136		       00		      .byte.b	$00
   2669  e136					      repend
   2670  e137		       00		      .byte.b	$00
   2669  e137					      repend
   2670  e138		       00		      .byte.b	$00
   2669  e138					      repend
   2670  e139		       00		      .byte.b	$00
   2669  e139					      repend
   2670  e13a		       00		      .byte.b	$00
   2669  e13a					      repend
   2670  e13b		       00		      .byte.b	$00
   2669  e13b					      repend
   2670  e13c		       00		      .byte.b	$00
   2669  e13c					      repend
   2670  e13d		       00		      .byte.b	$00
   2669  e13d					      repend
   2670  e13e		       00		      .byte.b	$00
   2669  e13e					      repend
   2670  e13f		       00		      .byte.b	$00
   2669  e13f					      repend
   2670  e140		       00		      .byte.b	$00
   2669  e140					      repend
   2670  e141		       00		      .byte.b	$00
   2669  e141					      repend
   2670  e142		       00		      .byte.b	$00
   2669  e142					      repend
   2670  e143		       00		      .byte.b	$00
   2669  e143					      repend
   2670  e144		       00		      .byte.b	$00
   2669  e144					      repend
   2670  e145		       00		      .byte.b	$00
   2669  e145					      repend
   2670  e146		       00		      .byte.b	$00
   2669  e146					      repend
   2670  e147		       00		      .byte.b	$00
   2669  e147					      repend
   2670  e148		       00		      .byte.b	$00
   2669  e148					      repend
   2670  e149		       00		      .byte.b	$00
   2669  e149					      repend
   2670  e14a		       00		      .byte.b	$00
   2669  e14a					      repend
   2670  e14b		       00		      .byte.b	$00
   2669  e14b					      repend
   2670  e14c		       00		      .byte.b	$00
   2669  e14c					      repend
   2670  e14d		       00		      .byte.b	$00
   2669  e14d					      repend
   2670  e14e		       00		      .byte.b	$00
   2669  e14e					      repend
   2670  e14f		       00		      .byte.b	$00
   2669  e14f					      repend
   2670  e150		       00		      .byte.b	$00
   2669  e150					      repend
   2670  e151		       00		      .byte.b	$00
   2669  e151					      repend
   2670  e152		       00		      .byte.b	$00
   2669  e152					      repend
   2670  e153		       00		      .byte.b	$00
   2669  e153					      repend
   2670  e154		       00		      .byte.b	$00
   2669  e154					      repend
   2670  e155		       00		      .byte.b	$00
   2669  e155					      repend
   2670  e156		       00		      .byte.b	$00
   2669  e156					      repend
   2670  e157		       00		      .byte.b	$00
   2669  e157					      repend
   2670  e158		       00		      .byte.b	$00
   2669  e158					      repend
   2670  e159		       00		      .byte.b	$00
   2669  e159					      repend
   2670  e15a		       00		      .byte.b	$00
   2669  e15a					      repend
   2670  e15b		       00		      .byte.b	$00
   2669  e15b					      repend
   2670  e15c		       00		      .byte.b	$00
   2669  e15c					      repend
   2670  e15d		       00		      .byte.b	$00
   2669  e15d					      repend
   2670  e15e		       00		      .byte.b	$00
   2669  e15e					      repend
   2670  e15f		       00		      .byte.b	$00
   2669  e15f					      repend
   2670  e160		       00		      .byte.b	$00
   2669  e160					      repend
   2670  e161		       00		      .byte.b	$00
   2669  e161					      repend
   2670  e162		       00		      .byte.b	$00
   2669  e162					      repend
   2670  e163		       00		      .byte.b	$00
   2669  e163					      repend
   2670  e164		       00		      .byte.b	$00
   2669  e164					      repend
   2670  e165		       00		      .byte.b	$00
   2669  e165					      repend
   2670  e166		       00		      .byte.b	$00
   2669  e166					      repend
   2670  e167		       00		      .byte.b	$00
   2669  e167					      repend
   2670  e168		       00		      .byte.b	$00
   2669  e168					      repend
   2670  e169		       00		      .byte.b	$00
   2669  e169					      repend
   2670  e16a		       00		      .byte.b	$00
   2669  e16a					      repend
   2670  e16b		       00		      .byte.b	$00
   2669  e16b					      repend
   2670  e16c		       00		      .byte.b	$00
   2669  e16c					      repend
   2670  e16d		       00		      .byte.b	$00
   2669  e16d					      repend
   2670  e16e		       00		      .byte.b	$00
   2669  e16e					      repend
   2670  e16f		       00		      .byte.b	$00
   2669  e16f					      repend
   2670  e170		       00		      .byte.b	$00
   2669  e170					      repend
   2670  e171		       00		      .byte.b	$00
   2669  e171					      repend
   2670  e172		       00		      .byte.b	$00
   2669  e172					      repend
   2670  e173		       00		      .byte.b	$00
   2669  e173					      repend
   2670  e174		       00		      .byte.b	$00
   2669  e174					      repend
   2670  e175		       00		      .byte.b	$00
   2669  e175					      repend
   2670  e176		       00		      .byte.b	$00
   2669  e176					      repend
   2670  e177		       00		      .byte.b	$00
   2669  e177					      repend
   2670  e178		       00		      .byte.b	$00
   2669  e178					      repend
   2670  e179		       00		      .byte.b	$00
   2669  e179					      repend
   2670  e17a		       00		      .byte.b	$00
   2669  e17a					      repend
   2670  e17b		       00		      .byte.b	$00
   2669  e17b					      repend
   2670  e17c		       00		      .byte.b	$00
   2669  e17c					      repend
   2670  e17d		       00		      .byte.b	$00
   2669  e17d					      repend
   2670  e17e		       00		      .byte.b	$00
   2669  e17e					      repend
   2670  e17f		       00		      .byte.b	$00
   2669  e17f					      repend
   2670  e180		       00		      .byte.b	$00
   2669  e180					      repend
   2670  e181		       00		      .byte.b	$00
   2669  e181					      repend
   2670  e182		       00		      .byte.b	$00
   2669  e182					      repend
   2670  e183		       00		      .byte.b	$00
   2669  e183					      repend
   2670  e184		       00		      .byte.b	$00
   2669  e184					      repend
   2670  e185		       00		      .byte.b	$00
   2669  e185					      repend
   2670  e186		       00		      .byte.b	$00
   2669  e186					      repend
   2670  e187		       00		      .byte.b	$00
   2669  e187					      repend
   2670  e188		       00		      .byte.b	$00
   2669  e188					      repend
   2670  e189		       00		      .byte.b	$00
   2669  e189					      repend
   2670  e18a		       00		      .byte.b	$00
   2669  e18a					      repend
   2670  e18b		       00		      .byte.b	$00
   2669  e18b					      repend
   2670  e18c		       00		      .byte.b	$00
   2669  e18c					      repend
   2670  e18d		       00		      .byte.b	$00
   2669  e18d					      repend
   2670  e18e		       00		      .byte.b	$00
   2669  e18e					      repend
   2670  e18f		       00		      .byte.b	$00
   2669  e18f					      repend
   2670  e190		       00		      .byte.b	$00
   2669  e190					      repend
   2670  e191		       00		      .byte.b	$00
   2669  e191					      repend
   2670  e192		       00		      .byte.b	$00
   2669  e192					      repend
   2670  e193		       00		      .byte.b	$00
   2669  e193					      repend
   2670  e194		       00		      .byte.b	$00
   2669  e194					      repend
   2670  e195		       00		      .byte.b	$00
   2669  e195					      repend
   2670  e196		       00		      .byte.b	$00
   2669  e196					      repend
   2670  e197		       00		      .byte.b	$00
   2669  e197					      repend
   2670  e198		       00		      .byte.b	$00
   2669  e198					      repend
   2670  e199		       00		      .byte.b	$00
   2669  e199					      repend
   2670  e19a		       00		      .byte.b	$00
   2669  e19a					      repend
   2670  e19b		       00		      .byte.b	$00
   2669  e19b					      repend
   2670  e19c		       00		      .byte.b	$00
   2669  e19c					      repend
   2670  e19d		       00		      .byte.b	$00
   2669  e19d					      repend
   2670  e19e		       00		      .byte.b	$00
   2669  e19e					      repend
   2670  e19f		       00		      .byte.b	$00
   2669  e19f					      repend
   2670  e1a0		       00		      .byte.b	$00
   2669  e1a0					      repend
   2670  e1a1		       00		      .byte.b	$00
   2669  e1a1					      repend
   2670  e1a2		       00		      .byte.b	$00
   2669  e1a2					      repend
   2670  e1a3		       00		      .byte.b	$00
   2669  e1a3					      repend
   2670  e1a4		       00		      .byte.b	$00
   2669  e1a4					      repend
   2670  e1a5		       00		      .byte.b	$00
   2669  e1a5					      repend
   2670  e1a6		       00		      .byte.b	$00
   2669  e1a6					      repend
   2670  e1a7		       00		      .byte.b	$00
   2669  e1a7					      repend
   2670  e1a8		       00		      .byte.b	$00
   2669  e1a8					      repend
   2670  e1a9		       00		      .byte.b	$00
   2669  e1a9					      repend
   2670  e1aa		       00		      .byte.b	$00
   2669  e1aa					      repend
   2670  e1ab		       00		      .byte.b	$00
   2669  e1ab					      repend
   2670  e1ac		       00		      .byte.b	$00
   2669  e1ac					      repend
   2670  e1ad		       00		      .byte.b	$00
   2669  e1ad					      repend
   2670  e1ae		       00		      .byte.b	$00
   2669  e1ae					      repend
   2670  e1af		       00		      .byte.b	$00
   2669  e1af					      repend
   2670  e1b0		       00		      .byte.b	$00
   2669  e1b0					      repend
   2670  e1b1		       00		      .byte.b	$00
   2669  e1b1					      repend
   2670  e1b2		       00		      .byte.b	$00
   2669  e1b2					      repend
   2670  e1b3		       00		      .byte.b	$00
   2669  e1b3					      repend
   2670  e1b4		       00		      .byte.b	$00
   2669  e1b4					      repend
   2670  e1b5		       00		      .byte.b	$00
   2669  e1b5					      repend
   2670  e1b6		       00		      .byte.b	$00
   2669  e1b6					      repend
   2670  e1b7		       00		      .byte.b	$00
   2669  e1b7					      repend
   2670  e1b8		       00		      .byte.b	$00
   2669  e1b8					      repend
   2670  e1b9		       00		      .byte.b	$00
   2669  e1b9					      repend
   2670  e1ba		       00		      .byte.b	$00
   2669  e1ba					      repend
   2670  e1bb		       00		      .byte.b	$00
   2669  e1bb					      repend
   2670  e1bc		       00		      .byte.b	$00
   2669  e1bc					      repend
   2670  e1bd		       00		      .byte.b	$00
   2669  e1bd					      repend
   2670  e1be		       00		      .byte.b	$00
   2669  e1be					      repend
   2670  e1bf		       00		      .byte.b	$00
   2669  e1bf					      repend
   2670  e1c0		       00		      .byte.b	$00
   2669  e1c0					      repend
   2670  e1c1		       00		      .byte.b	$00
   2669  e1c1					      repend
   2670  e1c2		       00		      .byte.b	$00
   2669  e1c2					      repend
   2670  e1c3		       00		      .byte.b	$00
   2669  e1c3					      repend
   2670  e1c4		       00		      .byte.b	$00
   2669  e1c4					      repend
   2670  e1c5		       00		      .byte.b	$00
   2669  e1c5					      repend
   2670  e1c6		       00		      .byte.b	$00
   2669  e1c6					      repend
   2670  e1c7		       00		      .byte.b	$00
   2669  e1c7					      repend
   2670  e1c8		       00		      .byte.b	$00
   2669  e1c8					      repend
   2670  e1c9		       00		      .byte.b	$00
   2669  e1c9					      repend
   2670  e1ca		       00		      .byte.b	$00
   2669  e1ca					      repend
   2670  e1cb		       00		      .byte.b	$00
   2669  e1cb					      repend
   2670  e1cc		       00		      .byte.b	$00
   2669  e1cc					      repend
   2670  e1cd		       00		      .byte.b	$00
   2669  e1cd					      repend
   2670  e1ce		       00		      .byte.b	$00
   2669  e1ce					      repend
   2670  e1cf		       00		      .byte.b	$00
   2669  e1cf					      repend
   2670  e1d0		       00		      .byte.b	$00
   2669  e1d0					      repend
   2670  e1d1		       00		      .byte.b	$00
   2669  e1d1					      repend
   2670  e1d2		       00		      .byte.b	$00
   2669  e1d2					      repend
   2670  e1d3		       00		      .byte.b	$00
   2669  e1d3					      repend
   2670  e1d4		       00		      .byte.b	$00
   2669  e1d4					      repend
   2670  e1d5		       00		      .byte.b	$00
   2669  e1d5					      repend
   2670  e1d6		       00		      .byte.b	$00
   2669  e1d6					      repend
   2670  e1d7		       00		      .byte.b	$00
   2669  e1d7					      repend
   2670  e1d8		       00		      .byte.b	$00
   2669  e1d8					      repend
   2670  e1d9		       00		      .byte.b	$00
   2669  e1d9					      repend
   2670  e1da		       00		      .byte.b	$00
   2669  e1da					      repend
   2670  e1db		       00		      .byte.b	$00
   2669  e1db					      repend
   2670  e1dc		       00		      .byte.b	$00
   2669  e1dc					      repend
   2670  e1dd		       00		      .byte.b	$00
   2669  e1dd					      repend
   2670  e1de		       00		      .byte.b	$00
   2669  e1de					      repend
   2670  e1df		       00		      .byte.b	$00
   2669  e1df					      repend
   2670  e1e0		       00		      .byte.b	$00
   2669  e1e0					      repend
   2670  e1e1		       00		      .byte.b	$00
   2669  e1e1					      repend
   2670  e1e2		       00		      .byte.b	$00
   2669  e1e2					      repend
   2670  e1e3		       00		      .byte.b	$00
   2669  e1e3					      repend
   2670  e1e4		       00		      .byte.b	$00
   2669  e1e4					      repend
   2670  e1e5		       00		      .byte.b	$00
   2669  e1e5					      repend
   2670  e1e6		       00		      .byte.b	$00
   2669  e1e6					      repend
   2670  e1e7		       00		      .byte.b	$00
   2669  e1e7					      repend
   2670  e1e8		       00		      .byte.b	$00
   2669  e1e8					      repend
   2670  e1e9		       00		      .byte.b	$00
   2669  e1e9					      repend
   2670  e1ea		       00		      .byte.b	$00
   2669  e1ea					      repend
   2670  e1eb		       00		      .byte.b	$00
   2669  e1eb					      repend
   2670  e1ec		       00		      .byte.b	$00
   2669  e1ec					      repend
   2670  e1ed		       00		      .byte.b	$00
   2669  e1ed					      repend
   2670  e1ee		       00		      .byte.b	$00
   2669  e1ee					      repend
   2670  e1ef		       00		      .byte.b	$00
   2669  e1ef					      repend
   2670  e1f0		       00		      .byte.b	$00
   2669  e1f0					      repend
   2670  e1f1		       00		      .byte.b	$00
   2669  e1f1					      repend
   2670  e1f2		       00		      .byte.b	$00
   2669  e1f2					      repend
   2670  e1f3		       00		      .byte.b	$00
   2669  e1f3					      repend
   2670  e1f4		       00		      .byte.b	$00
   2669  e1f4					      repend
   2670  e1f5		       00		      .byte.b	$00
   2669  e1f5					      repend
   2670  e1f6		       00		      .byte.b	$00
   2669  e1f6					      repend
   2670  e1f7		       00		      .byte.b	$00
   2669  e1f7					      repend
   2670  e1f8		       00		      .byte.b	$00
   2669  e1f8					      repend
   2670  e1f9		       00		      .byte.b	$00
   2669  e1f9					      repend
   2670  e1fa		       00		      .byte.b	$00
   2669  e1fa					      repend
   2670  e1fb		       00		      .byte.b	$00
   2669  e1fb					      repend
   2670  e1fc		       00		      .byte.b	$00
   2669  e1fc					      repend
   2670  e1fd		       00		      .byte.b	$00
   2669  e1fd					      repend
   2670  e1fe		       00		      .byte.b	$00
   2669  e1fe					      repend
   2670  e1ff		       00		      .byte.b	$00
   2671  e200					      repend
   2672  e200
   2673  e200				   Bank1
   2674  e200							;	  lda $FFF8
   2675  e200		       ea		      nop
   2676  e201		       ea		      nop
   2677  e202		       ea		      nop
   2678  e203		       4c 2e f2 	      jmp	jmparoundcallbank1stub
   2679  e206				   callbank1ForMusicEngineRecvd
   2680  e206		       ad 00 10 	      lda	$1000	; dummy placeholder, never executes
   2681  e209		       20 2b f5 	      jsr	PlayMusic	; executes
   2682  e20c		       ad f8 ff 	      lda	$fff8	; go back to bank 0, same spot
   2683  e20f		       60		      rts		;never executes
   2684  e210
   2685  e210				   CallBank1ToLoadCBSRAMwithLargeBitmapRecvd
   2686  e210		       ad 00 10 	      lda	$1000	; dummy placeholder, never executes
   2687  e213		       20 2e f2 	      jsr	LoadLargeBitMapIntoCBSRAM	; executes
   2688  e216		       ad f8 ff 	      lda	$fff8	; go back to bank 0, same spot
   2689  e219		       60		      rts		; never executes
   2690  e21a
   2691  e21a				   CallBank1ToLoadCBSRAMwithLargeBitmapSayingREADYPLAYER1recvd
   2692  e21a		       ad 00 10 	      lda	$1000	; dummy placeholder, never executes
   2693  e21d		       20 3d f2 	      jsr	LoadLargeBitMapIntoCBSRAMSayingREADYPLAYER1	; executes
   2694  e220		       ad f8 ff 	      lda	$fff8	; go back to bank 0, same spot
   2695  e223		       60		      rts		; never executes
   2696  e224
   2697  e224				   CallBank1ToLoadCBSRAMwithGameScreenBitmaprecvd
   2698  e224		       ad 00 10 	      lda	$1000	; dummy placeholder, never executes
   2699  e227		       20 4c f2 	      jsr	LoadLargeBitMapIntoCBSRAMforGameScreen	; executes
   2700  e22a		       ad f8 ff 	      lda	$fff8	; go back to bank 0, same spot
   2701  e22d		       60		      rts		; never executes
   2702  e22e
   2703  e22e
   2704  e22e				   jmparoundcallbank1stub
   2705  e22e							;------------------------------------------------
   2706  e22e
   2707  e22e				   LoadLargeBitMapIntoCBSRAM
   2708  e22e							; -----  Demo and Scrollout virtual world
   2709  e22e		       a2 ef		      ldx	#239	;#120 ; expand to 240 byte table with CBS RAM!
   2710  e230		       bd 5b f2    pushlargeplayareaintosc lda	MyAbstractExtendedPlayfield,x
   2711  e233		       9d 00 f0 	      sta	MyAbstractExtendedPlayfieldSCW,x
   2712  e236		       ca		      dex
   2713  e237		       d0 f7		      bne	pushlargeplayareaintosc
   2714  e239		       9d 00 f0 	      sta	MyAbstractExtendedPlayfieldSCW,x	; missed the last byte
   2715  e23c		       60		      rts
   2716  e23d
   2717  e23d				   LoadLargeBitMapIntoCBSRAMSayingREADYPLAYER1
   2718  e23d							; -----  Demo and Scrollout virtual world
   2719  e23d		       a2 ef		      ldx	#239	;#120 ; expand to 240 byte table with CBS RAM!
   2720  e23f		       bd 4b f3    pushlargeplayareaintosc2 lda	ReadyPlayerOneBanner,x
   2721  e242		       9d 00 f0 	      sta	MyAbstractExtendedPlayfieldSCW,x
   2722  e245		       ca		      dex
   2723  e246		       d0 f7		      bne	pushlargeplayareaintosc2
   2724  e248		       9d 00 f0 	      sta	MyAbstractExtendedPlayfieldSCW,x	; missed the last byte
   2725  e24b		       60		      rts
   2726  e24c
   2727  e24c				   LoadLargeBitMapIntoCBSRAMforGameScreen
   2728  e24c							; -----  Demo and Scrollout virtual world
   2729  e24c		       a2 ef		      ldx	#239	;#120 ; expand to 240 byte table with CBS RAM!
   2730  e24e		       bd 3b f4    pushlargeplayareaintosc3 lda	GameScreenBitmap,x
   2731  e251		       9d 00 f0 	      sta	MyAbstractExtendedPlayfieldSCW,x
   2732  e254		       ca		      dex
   2733  e255		       d0 f7		      bne	pushlargeplayareaintosc3
   2734  e257		       9d 00 f0 	      sta	MyAbstractExtendedPlayfieldSCW,x	; missed the last byte
   2735  e25a		       60		      rts
   2736  e25b
   2737  e25b
   2738  e25b							;--------------- SCROLLOUT DEMO AND PLAY AREA: ---------------------------
   2739  e25b							;------------Large Play Area 92x20; panned by a 20x10 virtual pixel screen
   2740  e25b							;------------480 total bytes of screen RAM are stored in 240 bytes and panned, flipped and expanded in real time
   2741  e25b							;------------It also gets flipped right ways up so WYSIWYG in the virtual world below :)
   2742  e25b
   2743  e25b				   MyAbstractExtendedPlayfield		; 20x10 grid (3 bytes) is read from a larger play area 5x as wide (12 bytes) and twice as tall
   2744  e25b							;	    1 0      4	2      12   3	  20	4    28    5	36     6   44	  7   52     8	  60	 9  68 72* 10	76    11    84	 12
   2745  e25b		       0f ff ff ff*	      .byte.b	%00001111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   2746  e267		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001
   2747  e273		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001
   2748  e27f		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001
   2749  e28b		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001
   2750  e297		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001
   2751  e2a3		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001
   2752  e2af		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001
   2753  e2bb		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001
   2754  e2c7		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001
   2755  e2d3							;-- next 10 rows is another screen down and 5 across:
   2756  e2d3		       0f ff ff ff*	      .byte.b	%00001111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   2757  e2df		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %11010111
   2758  e2eb		       08 00 00 f0*	      .byte.b	%00001000, %00000000, %00000000, %11110000, %00011000, %00000000, %11111100, %00000000, %00000000, %00000000, %00000001, %01010111
   2759  e2f7		       08 00 00 e0*	      .byte.b	%00001000, %00000000, %00000000, %11100000, %00111100, %00000000, %10000101, %11110111, %11011111, %00100000, %00000000, %11010111
   2760  e303		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00011000, %00000000, %11111100, %01000100, %01010001, %00100000, %00000001, %01010111
   2761  e30f		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %11000100, %01100111, %11011111, %10110000, %00000000, %11010111
   2762  e31b		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %11000100, %01100110, %01011000, %10110000, %00000001, %01010111
   2763  e327		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %11000100, %01100110, %01011000, %10110000, %01110111, %11010111
   2764  e333		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %01110111, %01010111
   2765  e33f		       0f ff ff ff*	      .byte.b	%00001111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   2766  e34b
   2767  e34b							;-- -- -- note: virtual world bitmaps are contiguous and WYSIWYG, but the first 4 pixels
   2768  e34b							;-- -- -- of just the first byte won't display (spacer padding artifact left in place, not needed!)
   2769  e34b							;-- -- -- see how the R in the ready player one banner below never shows up:
   2770  e34b
   2771  e34b				   ReadyPlayerOneBanner 		; 20x10 grid (3 bytes) is read from a larger play area 5x as wide (12 bytes) and twice as tall
   2772  e34b							;	    1 0      4	2      12   3	  20	4    28    5	36     6   44	  7   52     8	  60	 9  68 72* 10	76    11    84	 12
   2773  e34b		       00 00 00 00*	      .byte.b	%00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001, %01000000, %00000000
   2774  e357		       00 00 00 00*	      .byte.b	%00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000010, %00100000, %01111110
   2775  e363		       67 76 28 c8*	      .byte.b	%01100111, %01110110, %00101000, %11001000, %11101010, %11100110, %00011101, %00101110, %01010000, %00000100, %00010000, %00111100
   2776  e36f		       54 55 10 a8*	      .byte.b	%01010100, %01010101, %00010000, %10101000, %10100100, %10000101, %00010101, %10101000, %01010000, %00001000, %00001000, %00011000
   2777  e37b		       67 74 90 c8*	      .byte.b	%01100111, %01110100, %10010000, %11001000, %11100100, %11100110, %00010101, %01101110, %01010000, %00010000, %00000100, %00000000
   2778  e387		       54 55 10 88*	      .byte.b	%01010100, %01010101, %00010000, %10001000, %10100100, %10000101, %00010101, %00101000, %00000000, %00001000, %00001000, %11000010
   2779  e393		       57 56 10 8e*	      .byte.b	%01010111, %01010110, %00010000, %10001110, %10100100, %11100101, %00011101, %00101110, %01010000, %00000100, %00010011, %11000110
   2780  e39f		       00 00 00 00*	      .byte.b	%00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000010, %00100111, %11001110
   2781  e3ab		       00 00 00 00*	      .byte.b	%00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001, %01000000, %00011110
   2782  e3b7		       00 00 00 00*	      .byte.b	%00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %10000000, %00111110
   2783  e3c3							;-- next 10 rows is another screen down and 5 across:
   2784  e3c3		       0f ff ff ff*	      .byte.b	%00001111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   2785  e3cf		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %11010111
   2786  e3db		       08 00 00 f0*	      .byte.b	%00001000, %00000000, %00000000, %11110000, %00011000, %00000000, %11111100, %00000000, %00000000, %00000000, %00000001, %01010111
   2787  e3e7		       08 00 00 e0*	      .byte.b	%00001000, %00000000, %00000000, %11100000, %00111100, %00000000, %10000101, %11110111, %11011111, %00100000, %00000000, %11010111
   2788  e3f3		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00011000, %00000000, %11111100, %01000100, %01010001, %00100000, %00000001, %01010111
   2789  e3ff		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %11000100, %01100111, %11011111, %10110000, %00000000, %11010111
   2790  e40b		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %11000100, %01100110, %01011000, %10110000, %00000001, %01010111
   2791  e417		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %11000100, %01100110, %01011000, %10110000, %01110111, %11010111
   2792  e423		       08 00 00 00*	      .byte.b	%00001000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %01110111, %01010111
   2793  e42f		       0f ff ff ff*	      .byte.b	%00001111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111
   2794  e43b
   2795  e43b							;; -- game screen:
   2796  e43b				   GameScreenBitmap		; 20x10 grid (3 bytes) is read from a larger play area 5x as wide (12 bytes) and twice as tall
   2797  e43b							;	    1 0      4	2      12   3	  20	4    28    5	36     6   44	  7   52     8	  60	 9  68 72* 10	76    11    84	 12
   2798  e43b		       00 00 2d 61*	      .byte.b	%00000000, %00000000, %00101101, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2799  e447		       00 00 2d 61*	      .byte.b	%00000000, %00000000, %00101101, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2800  e453		       00 00 29 61*	      .byte.b	%00000000, %00000000, %00101001, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2801  e45f		       00 00 29 61*	      .byte.b	%00000000, %00000000, %00101001, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2802  e46b		       00 00 29 61*	      .byte.b	%00000000, %00000000, %00101001, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2803  e477		       00 00 25 61*	      .byte.b	%00000000, %00000000, %00100101, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2804  e483		       00 00 25 61*	      .byte.b	%00000000, %00000000, %00100101, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2805  e48f		       00 00 25 61*	      .byte.b	%00000000, %00000000, %00100101, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2806  e49b		       00 00 29 61*	      .byte.b	%00000000, %00000000, %00101001, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2807  e4a7		       00 00 29 61*	      .byte.b	%00000000, %00000000, %00101001, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2808  e4b3							;-- next 10 rows is another screen down and 5 across:
   2809  e4b3		       00 00 2d 61*	      .byte.b	%00000000, %00000000, %00101101, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2810  e4bf		       00 00 29 61*	      .byte.b	%00000000, %00000000, %00101001, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2811  e4cb		       00 00 29 61*	      .byte.b	%00000000, %00000000, %00101001, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2812  e4d7		       00 00 2d 61*	      .byte.b	%00000000, %00000000, %00101101, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2813  e4e3		       00 00 25 61*	      .byte.b	%00000000, %00000000, %00100101, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2814  e4ef		       00 00 25 61*	      .byte.b	%00000000, %00000000, %00100101, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2815  e4fb		       00 00 29 61*	      .byte.b	%00000000, %00000000, %00101001, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2816  e507		       00 00 29 61*	      .byte.b	%00000000, %00000000, %00101001, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2817  e513		       00 00 25 61*	      .byte.b	%00000000, %00000000, %00100101, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2818  e51f		       00 00 29 61*	      .byte.b	%00000000, %00000000, %00101001, %01100001, %00000111, %00000001, %00010111, %00001111, %00001111, %00000000, %00000000, %00000111
   2819  e52b
   2820  e52b
   2821  e52b							;-------------------------------------------------------------
   2822  e52b							; Background Music Engine -------------------------
   2823  e52b							;-------------------------------------------------------------
   2824  e52b				   PlayMusic
   2825  e52b
   2826  e52b							;   pha ; push a
   2827  e52b							;   tya
   2828  e52b							;   pha ; push y
   2829  e52b
   2830  e52b							;jmp musicfinish ;fix timing? yes, reduce it!
   2831  e52b
   2832  e52b		       a5 81		      lda	SUSTAINFORFRAMES
   2833  e52d
   2834  e52d		       c9 00		      cmp	#0
   2835  e52f		       d0 45		      bne	waitnextnote
   2836  e531
   2837  e531							;get next notes:
   2838  e531		       a5 86		      lda	e
   2839  e533		       c9 01		      cmp	#1
   2840  e535		       d0 07		      bne	continuenote
   2841  e537		       a4 80		      ldy	MUSICINDEX
   2842  e539		       c8		      iny
   2843  e53a		       c8		      iny
   2844  e53b		       4c 52 f5 	      jmp	skipnote
   2845  e53e				   continuenote
   2846  e53e
   2847  e53e
   2848  e53e
   2849  e53e		       a5 80		      lda	MUSICINDEX
   2850  e540		       a8		      tay
   2851  e541		       b9 8e f5 	      lda	MusicData,y
   2852  e544		       85 19		      sta	AUDV0	; volume Oscillator 0
   2853  e546		       c8		      iny
   2854  e547		       b9 8e f5 	      lda	MusicData,y
   2855  e54a		       85 15		      sta	AUDC0	; audio wave type Oscillator 0
   2856  e54c		       c8		      iny
   2857  e54d		       b9 8e f5 	      lda	MusicData,y
   2858  e550		       85 17		      sta	AUDF0	;audio frequency Oscillator 0
   2859  e552							;-------------
   2860  e552				   skipnote		;-- substitute sound fx forvoice 0 (overwrite)?
   2861  e552		       c8		      iny
   2862  e553		       b9 8e f5 	      lda	MusicData,y
   2863  e556		       85 1a		      sta	AUDV1	; volume Oscillator 0
   2864  e558		       c8		      iny
   2865  e559		       b9 8e f5 	      lda	MusicData,y
   2866  e55c		       85 16		      sta	AUDC1	; audio wave type Oscillator 0
   2867  e55e		       c8		      iny
   2868  e55f		       b9 8e f5 	      lda	MusicData,y
   2869  e562		       85 18		      sta	AUDF1	;audio frequency Oscillator 0
   2870  e564		       c8		      iny
   2871  e565		       b9 8e f5 	      lda	MusicData,y
   2872  e568		       85 81		      sta	SUSTAINFORFRAMES
   2873  e56a		       c9 00		      cmp	#0	; 0 duration signals reset to start of tune
   2874  e56c		       d0 05		      bne	jump1
   2875  e56e		       85 80		      sta	MUSICINDEX	;initialize and start over
   2876  e570
   2877  e570		       4c 2b f5 	      jmp	PlayMusic
   2878  e573
   2879  e573				   jump1
   2880  e573
   2881  e573
   2882  e573		       c8		      iny		; point to next data line (for musical score) in the table
   2883  e574		       84 80		      sty	MUSICINDEX
   2884  e576
   2885  e576				   waitnextnote
   2886  e576		       a4 81		      ldy	SUSTAINFORFRAMES
   2887  e578		       88		      dey
   2888  e579		       84 81		      sty	SUSTAINFORFRAMES	;decrement framedelay counter
   2889  e57b		       d0 04		      bne	continuewaitnextnote
   2890  e57d		       a0 00		      ldy	#0
   2891  e57f		       84 86		      sty	e	; clear sound effect if set
   2892  e581				   continuewaitnextnote
   2893  e581		       a4 86		      ldy	e
   2894  e583		       f0 08		      beq	musicfinish
   2895  e585		       a0 01		      ldy	#1
   2896  e587		       c4 81		      cpy	SUSTAINFORFRAMES
   2897  e589		       b0 02		      bcs	musicfinish
   2898  e58b		       84 81		      sty	SUSTAINFORFRAMES
   2899  e58d		       60	   musicfinish rts
   2900  e58e
   2901  e58e							;-------------------------------------
   2902  e58e							; Music Data -------------------------
   2903  e58e							;-------------------------------------------------------------
   2904  e58e							; volume0,wave,freq,volume1,wave,freq,framesduration (0 duration loops it) 
   2905  e58e							;-------------------------------------------------------------
   2906  e58e				   MusicData
   2907  e58e		       0e 06 08 0e*	      .byte.b	14,6,8,14,6,11,10
   2908  e595		       0e 06 1d 0e*	      .byte.b	14,6,29,14,6,20,80
   2909  e59c		       07 06 07 0e*	      .byte.b	7,6,7,14,6,20,10
   2910  e5a3		       03 06 1d 03*	      .byte.b	3,6,29,3,6,20,15
   2911  e5aa		       01 0f 03 01*	      .byte.b	1,15,3,1,7,24,10
   2912  e5b1		       0e 08 19 0e*	      .byte.b	14,8,25,14,8,31,5
   2913  e5b8		       01 08 19 01*	      .byte.b	1,8,25,1,8,31,2
   2914  e5bf		       0e 08 19 0e*	      .byte.b	14,8,25,14,8,31,5
   2915  e5c6		       01 08 19 01*	      .byte.b	1,8,25,1,8,31,2
   2916  e5cd		       0e 08 19 0e*	      .byte.b	14,8,25,14,8,31,5
   2917  e5d4		       01 08 19 01*	      .byte.b	1,8,25,1,8,31,2
   2918  e5db		       0e 08 19 0e*	      .byte.b	14,8,25,14,8,31,5
   2919  e5e2		       01 08 19 01*	      .byte.b	1,8,25,1,8,31,2
   2920  e5e9		       0e 06 08 0e*	      .byte.b	14,6,8,14,6,8,5
   2921  e5f0		       0e 06 08 0e*	      .byte.b	14,6,8,14,6,8,5
   2922  e5f7		       01 08 19 01*	      .byte.b	1,8,25,1,8,31,2
   2923  e5fe		       0e 06 0b 0e*	      .byte.b	14,6,11,14,6,11,5
   2924  e605		       01 08 19 01*	      .byte.b	1,8,25,1,8,31,2
   2925  e60c		       0e 06 08 0e*	      .byte.b	14,6,8,14,6,11,10
   2926  e613		       01 08 19 01*	      .byte.b	1,8,25,1,8,31,50
   2927  e61a		       01 08 19 01*	      .byte.b	1,8,25,1,8,31,0
   2928  e621
   2929  e621
   2930  e621
   2931  e621
   2932  e621							;  .byte 3,8,1,3,3,1,21
   2933  e621							;  .byte 14,2,2,14,2,1,20
   2934  e621							;  .byte 1,15,10,1,7,4,0
   2935  e621							;  .byte 5,5,1,4,3,21,0    ; ,0 loops!
   2936  e621							;  .byte 5,8,1,4,3,21,20
   2937  e621							;  .byte 5,11,1,4,3,21,30
   2938  e621							;  .byte 5,15,10,3,7,24,40
   2939  e621							;  .byte 10,5,1,4,3,21,50
   2940  e621							;  .byte 10,8,1,4,3,21,70
   2941  e621							;  .byte 15,21,1,10,21,1,90
   2942  e621							;  .byte 10,11,1,4,3,1,0 ; ,0 - and loop
   2943  e621
   2944  e621
   2945  e621							;---------------------------------- end bank 1 code
   2946  e621
   2947  e621
   2948  e621
   2949  e621
   2950  effc					      org	$EFFC
   2951  effc					      rorg	$FFFC
   2952  effc		       00 f2		      .word.w	Bank1
   2953  effe		       42 31		      .byte.b	"B1"
   2954  f000
   2955  f000							;----------------BANK2, NOT IN USE:
   2956  10000 ????				       seg	bank_2
   2957  f000					      org	$F000
   2958  f000					      rorg	$F000
   2959  f000
   2960  f000					      repeat	512
   2961  f000		       00		      .byte.b	$00
   2960  f000					      repend
   2961  f001		       00		      .byte.b	$00
   2960  f001					      repend
   2961  f002		       00		      .byte.b	$00
   2960  f002					      repend
   2961  f003		       00		      .byte.b	$00
   2960  f003					      repend
   2961  f004		       00		      .byte.b	$00
   2960  f004					      repend
   2961  f005		       00		      .byte.b	$00
   2960  f005					      repend
   2961  f006		       00		      .byte.b	$00
   2960  f006					      repend
   2961  f007		       00		      .byte.b	$00
   2960  f007					      repend
   2961  f008		       00		      .byte.b	$00
   2960  f008					      repend
   2961  f009		       00		      .byte.b	$00
   2960  f009					      repend
   2961  f00a		       00		      .byte.b	$00
   2960  f00a					      repend
   2961  f00b		       00		      .byte.b	$00
   2960  f00b					      repend
   2961  f00c		       00		      .byte.b	$00
   2960  f00c					      repend
   2961  f00d		       00		      .byte.b	$00
   2960  f00d					      repend
   2961  f00e		       00		      .byte.b	$00
   2960  f00e					      repend
   2961  f00f		       00		      .byte.b	$00
   2960  f00f					      repend
   2961  f010		       00		      .byte.b	$00
   2960  f010					      repend
   2961  f011		       00		      .byte.b	$00
   2960  f011					      repend
   2961  f012		       00		      .byte.b	$00
   2960  f012					      repend
   2961  f013		       00		      .byte.b	$00
   2960  f013					      repend
   2961  f014		       00		      .byte.b	$00
   2960  f014					      repend
   2961  f015		       00		      .byte.b	$00
   2960  f015					      repend
   2961  f016		       00		      .byte.b	$00
   2960  f016					      repend
   2961  f017		       00		      .byte.b	$00
   2960  f017					      repend
   2961  f018		       00		      .byte.b	$00
   2960  f018					      repend
   2961  f019		       00		      .byte.b	$00
   2960  f019					      repend
   2961  f01a		       00		      .byte.b	$00
   2960  f01a					      repend
   2961  f01b		       00		      .byte.b	$00
   2960  f01b					      repend
   2961  f01c		       00		      .byte.b	$00
   2960  f01c					      repend
   2961  f01d		       00		      .byte.b	$00
   2960  f01d					      repend
   2961  f01e		       00		      .byte.b	$00
   2960  f01e					      repend
   2961  f01f		       00		      .byte.b	$00
   2960  f01f					      repend
   2961  f020		       00		      .byte.b	$00
   2960  f020					      repend
   2961  f021		       00		      .byte.b	$00
   2960  f021					      repend
   2961  f022		       00		      .byte.b	$00
   2960  f022					      repend
   2961  f023		       00		      .byte.b	$00
   2960  f023					      repend
   2961  f024		       00		      .byte.b	$00
   2960  f024					      repend
   2961  f025		       00		      .byte.b	$00
   2960  f025					      repend
   2961  f026		       00		      .byte.b	$00
   2960  f026					      repend
   2961  f027		       00		      .byte.b	$00
   2960  f027					      repend
   2961  f028		       00		      .byte.b	$00
   2960  f028					      repend
   2961  f029		       00		      .byte.b	$00
   2960  f029					      repend
   2961  f02a		       00		      .byte.b	$00
   2960  f02a					      repend
   2961  f02b		       00		      .byte.b	$00
   2960  f02b					      repend
   2961  f02c		       00		      .byte.b	$00
   2960  f02c					      repend
   2961  f02d		       00		      .byte.b	$00
   2960  f02d					      repend
   2961  f02e		       00		      .byte.b	$00
   2960  f02e					      repend
   2961  f02f		       00		      .byte.b	$00
   2960  f02f					      repend
   2961  f030		       00		      .byte.b	$00
   2960  f030					      repend
   2961  f031		       00		      .byte.b	$00
   2960  f031					      repend
   2961  f032		       00		      .byte.b	$00
   2960  f032					      repend
   2961  f033		       00		      .byte.b	$00
   2960  f033					      repend
   2961  f034		       00		      .byte.b	$00
   2960  f034					      repend
   2961  f035		       00		      .byte.b	$00
   2960  f035					      repend
   2961  f036		       00		      .byte.b	$00
   2960  f036					      repend
   2961  f037		       00		      .byte.b	$00
   2960  f037					      repend
   2961  f038		       00		      .byte.b	$00
   2960  f038					      repend
   2961  f039		       00		      .byte.b	$00
   2960  f039					      repend
   2961  f03a		       00		      .byte.b	$00
   2960  f03a					      repend
   2961  f03b		       00		      .byte.b	$00
   2960  f03b					      repend
   2961  f03c		       00		      .byte.b	$00
   2960  f03c					      repend
   2961  f03d		       00		      .byte.b	$00
   2960  f03d					      repend
   2961  f03e		       00		      .byte.b	$00
   2960  f03e					      repend
   2961  f03f		       00		      .byte.b	$00
   2960  f03f					      repend
   2961  f040		       00		      .byte.b	$00
   2960  f040					      repend
   2961  f041		       00		      .byte.b	$00
   2960  f041					      repend
   2961  f042		       00		      .byte.b	$00
   2960  f042					      repend
   2961  f043		       00		      .byte.b	$00
   2960  f043					      repend
   2961  f044		       00		      .byte.b	$00
   2960  f044					      repend
   2961  f045		       00		      .byte.b	$00
   2960  f045					      repend
   2961  f046		       00		      .byte.b	$00
   2960  f046					      repend
   2961  f047		       00		      .byte.b	$00
   2960  f047					      repend
   2961  f048		       00		      .byte.b	$00
   2960  f048					      repend
   2961  f049		       00		      .byte.b	$00
   2960  f049					      repend
   2961  f04a		       00		      .byte.b	$00
   2960  f04a					      repend
   2961  f04b		       00		      .byte.b	$00
   2960  f04b					      repend
   2961  f04c		       00		      .byte.b	$00
   2960  f04c					      repend
   2961  f04d		       00		      .byte.b	$00
   2960  f04d					      repend
   2961  f04e		       00		      .byte.b	$00
   2960  f04e					      repend
   2961  f04f		       00		      .byte.b	$00
   2960  f04f					      repend
   2961  f050		       00		      .byte.b	$00
   2960  f050					      repend
   2961  f051		       00		      .byte.b	$00
   2960  f051					      repend
   2961  f052		       00		      .byte.b	$00
   2960  f052					      repend
   2961  f053		       00		      .byte.b	$00
   2960  f053					      repend
   2961  f054		       00		      .byte.b	$00
   2960  f054					      repend
   2961  f055		       00		      .byte.b	$00
   2960  f055					      repend
   2961  f056		       00		      .byte.b	$00
   2960  f056					      repend
   2961  f057		       00		      .byte.b	$00
   2960  f057					      repend
   2961  f058		       00		      .byte.b	$00
   2960  f058					      repend
   2961  f059		       00		      .byte.b	$00
   2960  f059					      repend
   2961  f05a		       00		      .byte.b	$00
   2960  f05a					      repend
   2961  f05b		       00		      .byte.b	$00
   2960  f05b					      repend
   2961  f05c		       00		      .byte.b	$00
   2960  f05c					      repend
   2961  f05d		       00		      .byte.b	$00
   2960  f05d					      repend
   2961  f05e		       00		      .byte.b	$00
   2960  f05e					      repend
   2961  f05f		       00		      .byte.b	$00
   2960  f05f					      repend
   2961  f060		       00		      .byte.b	$00
   2960  f060					      repend
   2961  f061		       00		      .byte.b	$00
   2960  f061					      repend
   2961  f062		       00		      .byte.b	$00
   2960  f062					      repend
   2961  f063		       00		      .byte.b	$00
   2960  f063					      repend
   2961  f064		       00		      .byte.b	$00
   2960  f064					      repend
   2961  f065		       00		      .byte.b	$00
   2960  f065					      repend
   2961  f066		       00		      .byte.b	$00
   2960  f066					      repend
   2961  f067		       00		      .byte.b	$00
   2960  f067					      repend
   2961  f068		       00		      .byte.b	$00
   2960  f068					      repend
   2961  f069		       00		      .byte.b	$00
   2960  f069					      repend
   2961  f06a		       00		      .byte.b	$00
   2960  f06a					      repend
   2961  f06b		       00		      .byte.b	$00
   2960  f06b					      repend
   2961  f06c		       00		      .byte.b	$00
   2960  f06c					      repend
   2961  f06d		       00		      .byte.b	$00
   2960  f06d					      repend
   2961  f06e		       00		      .byte.b	$00
   2960  f06e					      repend
   2961  f06f		       00		      .byte.b	$00
   2960  f06f					      repend
   2961  f070		       00		      .byte.b	$00
   2960  f070					      repend
   2961  f071		       00		      .byte.b	$00
   2960  f071					      repend
   2961  f072		       00		      .byte.b	$00
   2960  f072					      repend
   2961  f073		       00		      .byte.b	$00
   2960  f073					      repend
   2961  f074		       00		      .byte.b	$00
   2960  f074					      repend
   2961  f075		       00		      .byte.b	$00
   2960  f075					      repend
   2961  f076		       00		      .byte.b	$00
   2960  f076					      repend
   2961  f077		       00		      .byte.b	$00
   2960  f077					      repend
   2961  f078		       00		      .byte.b	$00
   2960  f078					      repend
   2961  f079		       00		      .byte.b	$00
   2960  f079					      repend
   2961  f07a		       00		      .byte.b	$00
   2960  f07a					      repend
   2961  f07b		       00		      .byte.b	$00
   2960  f07b					      repend
   2961  f07c		       00		      .byte.b	$00
   2960  f07c					      repend
   2961  f07d		       00		      .byte.b	$00
   2960  f07d					      repend
   2961  f07e		       00		      .byte.b	$00
   2960  f07e					      repend
   2961  f07f		       00		      .byte.b	$00
   2960  f07f					      repend
   2961  f080		       00		      .byte.b	$00
   2960  f080					      repend
   2961  f081		       00		      .byte.b	$00
   2960  f081					      repend
   2961  f082		       00		      .byte.b	$00
   2960  f082					      repend
   2961  f083		       00		      .byte.b	$00
   2960  f083					      repend
   2961  f084		       00		      .byte.b	$00
   2960  f084					      repend
   2961  f085		       00		      .byte.b	$00
   2960  f085					      repend
   2961  f086		       00		      .byte.b	$00
   2960  f086					      repend
   2961  f087		       00		      .byte.b	$00
   2960  f087					      repend
   2961  f088		       00		      .byte.b	$00
   2960  f088					      repend
   2961  f089		       00		      .byte.b	$00
   2960  f089					      repend
   2961  f08a		       00		      .byte.b	$00
   2960  f08a					      repend
   2961  f08b		       00		      .byte.b	$00
   2960  f08b					      repend
   2961  f08c		       00		      .byte.b	$00
   2960  f08c					      repend
   2961  f08d		       00		      .byte.b	$00
   2960  f08d					      repend
   2961  f08e		       00		      .byte.b	$00
   2960  f08e					      repend
   2961  f08f		       00		      .byte.b	$00
   2960  f08f					      repend
   2961  f090		       00		      .byte.b	$00
   2960  f090					      repend
   2961  f091		       00		      .byte.b	$00
   2960  f091					      repend
   2961  f092		       00		      .byte.b	$00
   2960  f092					      repend
   2961  f093		       00		      .byte.b	$00
   2960  f093					      repend
   2961  f094		       00		      .byte.b	$00
   2960  f094					      repend
   2961  f095		       00		      .byte.b	$00
   2960  f095					      repend
   2961  f096		       00		      .byte.b	$00
   2960  f096					      repend
   2961  f097		       00		      .byte.b	$00
   2960  f097					      repend
   2961  f098		       00		      .byte.b	$00
   2960  f098					      repend
   2961  f099		       00		      .byte.b	$00
   2960  f099					      repend
   2961  f09a		       00		      .byte.b	$00
   2960  f09a					      repend
   2961  f09b		       00		      .byte.b	$00
   2960  f09b					      repend
   2961  f09c		       00		      .byte.b	$00
   2960  f09c					      repend
   2961  f09d		       00		      .byte.b	$00
   2960  f09d					      repend
   2961  f09e		       00		      .byte.b	$00
   2960  f09e					      repend
   2961  f09f		       00		      .byte.b	$00
   2960  f09f					      repend
   2961  f0a0		       00		      .byte.b	$00
   2960  f0a0					      repend
   2961  f0a1		       00		      .byte.b	$00
   2960  f0a1					      repend
   2961  f0a2		       00		      .byte.b	$00
   2960  f0a2					      repend
   2961  f0a3		       00		      .byte.b	$00
   2960  f0a3					      repend
   2961  f0a4		       00		      .byte.b	$00
   2960  f0a4					      repend
   2961  f0a5		       00		      .byte.b	$00
   2960  f0a5					      repend
   2961  f0a6		       00		      .byte.b	$00
   2960  f0a6					      repend
   2961  f0a7		       00		      .byte.b	$00
   2960  f0a7					      repend
   2961  f0a8		       00		      .byte.b	$00
   2960  f0a8					      repend
   2961  f0a9		       00		      .byte.b	$00
   2960  f0a9					      repend
   2961  f0aa		       00		      .byte.b	$00
   2960  f0aa					      repend
   2961  f0ab		       00		      .byte.b	$00
   2960  f0ab					      repend
   2961  f0ac		       00		      .byte.b	$00
   2960  f0ac					      repend
   2961  f0ad		       00		      .byte.b	$00
   2960  f0ad					      repend
   2961  f0ae		       00		      .byte.b	$00
   2960  f0ae					      repend
   2961  f0af		       00		      .byte.b	$00
   2960  f0af					      repend
   2961  f0b0		       00		      .byte.b	$00
   2960  f0b0					      repend
   2961  f0b1		       00		      .byte.b	$00
   2960  f0b1					      repend
   2961  f0b2		       00		      .byte.b	$00
   2960  f0b2					      repend
   2961  f0b3		       00		      .byte.b	$00
   2960  f0b3					      repend
   2961  f0b4		       00		      .byte.b	$00
   2960  f0b4					      repend
   2961  f0b5		       00		      .byte.b	$00
   2960  f0b5					      repend
   2961  f0b6		       00		      .byte.b	$00
   2960  f0b6					      repend
   2961  f0b7		       00		      .byte.b	$00
   2960  f0b7					      repend
   2961  f0b8		       00		      .byte.b	$00
   2960  f0b8					      repend
   2961  f0b9		       00		      .byte.b	$00
   2960  f0b9					      repend
   2961  f0ba		       00		      .byte.b	$00
   2960  f0ba					      repend
   2961  f0bb		       00		      .byte.b	$00
   2960  f0bb					      repend
   2961  f0bc		       00		      .byte.b	$00
   2960  f0bc					      repend
   2961  f0bd		       00		      .byte.b	$00
   2960  f0bd					      repend
   2961  f0be		       00		      .byte.b	$00
   2960  f0be					      repend
   2961  f0bf		       00		      .byte.b	$00
   2960  f0bf					      repend
   2961  f0c0		       00		      .byte.b	$00
   2960  f0c0					      repend
   2961  f0c1		       00		      .byte.b	$00
   2960  f0c1					      repend
   2961  f0c2		       00		      .byte.b	$00
   2960  f0c2					      repend
   2961  f0c3		       00		      .byte.b	$00
   2960  f0c3					      repend
   2961  f0c4		       00		      .byte.b	$00
   2960  f0c4					      repend
   2961  f0c5		       00		      .byte.b	$00
   2960  f0c5					      repend
   2961  f0c6		       00		      .byte.b	$00
   2960  f0c6					      repend
   2961  f0c7		       00		      .byte.b	$00
   2960  f0c7					      repend
   2961  f0c8		       00		      .byte.b	$00
   2960  f0c8					      repend
   2961  f0c9		       00		      .byte.b	$00
   2960  f0c9					      repend
   2961  f0ca		       00		      .byte.b	$00
   2960  f0ca					      repend
   2961  f0cb		       00		      .byte.b	$00
   2960  f0cb					      repend
   2961  f0cc		       00		      .byte.b	$00
   2960  f0cc					      repend
   2961  f0cd		       00		      .byte.b	$00
   2960  f0cd					      repend
   2961  f0ce		       00		      .byte.b	$00
   2960  f0ce					      repend
   2961  f0cf		       00		      .byte.b	$00
   2960  f0cf					      repend
   2961  f0d0		       00		      .byte.b	$00
   2960  f0d0					      repend
   2961  f0d1		       00		      .byte.b	$00
   2960  f0d1					      repend
   2961  f0d2		       00		      .byte.b	$00
   2960  f0d2					      repend
   2961  f0d3		       00		      .byte.b	$00
   2960  f0d3					      repend
   2961  f0d4		       00		      .byte.b	$00
   2960  f0d4					      repend
   2961  f0d5		       00		      .byte.b	$00
   2960  f0d5					      repend
   2961  f0d6		       00		      .byte.b	$00
   2960  f0d6					      repend
   2961  f0d7		       00		      .byte.b	$00
   2960  f0d7					      repend
   2961  f0d8		       00		      .byte.b	$00
   2960  f0d8					      repend
   2961  f0d9		       00		      .byte.b	$00
   2960  f0d9					      repend
   2961  f0da		       00		      .byte.b	$00
   2960  f0da					      repend
   2961  f0db		       00		      .byte.b	$00
   2960  f0db					      repend
   2961  f0dc		       00		      .byte.b	$00
   2960  f0dc					      repend
   2961  f0dd		       00		      .byte.b	$00
   2960  f0dd					      repend
   2961  f0de		       00		      .byte.b	$00
   2960  f0de					      repend
   2961  f0df		       00		      .byte.b	$00
   2960  f0df					      repend
   2961  f0e0		       00		      .byte.b	$00
   2960  f0e0					      repend
   2961  f0e1		       00		      .byte.b	$00
   2960  f0e1					      repend
   2961  f0e2		       00		      .byte.b	$00
   2960  f0e2					      repend
   2961  f0e3		       00		      .byte.b	$00
   2960  f0e3					      repend
   2961  f0e4		       00		      .byte.b	$00
   2960  f0e4					      repend
   2961  f0e5		       00		      .byte.b	$00
   2960  f0e5					      repend
   2961  f0e6		       00		      .byte.b	$00
   2960  f0e6					      repend
   2961  f0e7		       00		      .byte.b	$00
   2960  f0e7					      repend
   2961  f0e8		       00		      .byte.b	$00
   2960  f0e8					      repend
   2961  f0e9		       00		      .byte.b	$00
   2960  f0e9					      repend
   2961  f0ea		       00		      .byte.b	$00
   2960  f0ea					      repend
   2961  f0eb		       00		      .byte.b	$00
   2960  f0eb					      repend
   2961  f0ec		       00		      .byte.b	$00
   2960  f0ec					      repend
   2961  f0ed		       00		      .byte.b	$00
   2960  f0ed					      repend
   2961  f0ee		       00		      .byte.b	$00
   2960  f0ee					      repend
   2961  f0ef		       00		      .byte.b	$00
   2960  f0ef					      repend
   2961  f0f0		       00		      .byte.b	$00
   2960  f0f0					      repend
   2961  f0f1		       00		      .byte.b	$00
   2960  f0f1					      repend
   2961  f0f2		       00		      .byte.b	$00
   2960  f0f2					      repend
   2961  f0f3		       00		      .byte.b	$00
   2960  f0f3					      repend
   2961  f0f4		       00		      .byte.b	$00
   2960  f0f4					      repend
   2961  f0f5		       00		      .byte.b	$00
   2960  f0f5					      repend
   2961  f0f6		       00		      .byte.b	$00
   2960  f0f6					      repend
   2961  f0f7		       00		      .byte.b	$00
   2960  f0f7					      repend
   2961  f0f8		       00		      .byte.b	$00
   2960  f0f8					      repend
   2961  f0f9		       00		      .byte.b	$00
   2960  f0f9					      repend
   2961  f0fa		       00		      .byte.b	$00
   2960  f0fa					      repend
   2961  f0fb		       00		      .byte.b	$00
   2960  f0fb					      repend
   2961  f0fc		       00		      .byte.b	$00
   2960  f0fc					      repend
   2961  f0fd		       00		      .byte.b	$00
   2960  f0fd					      repend
   2961  f0fe		       00		      .byte.b	$00
   2960  f0fe					      repend
   2961  f0ff		       00		      .byte.b	$00
   2960  f0ff					      repend
   2961  f100		       00		      .byte.b	$00
   2960  f100					      repend
   2961  f101		       00		      .byte.b	$00
   2960  f101					      repend
   2961  f102		       00		      .byte.b	$00
   2960  f102					      repend
   2961  f103		       00		      .byte.b	$00
   2960  f103					      repend
   2961  f104		       00		      .byte.b	$00
   2960  f104					      repend
   2961  f105		       00		      .byte.b	$00
   2960  f105					      repend
   2961  f106		       00		      .byte.b	$00
   2960  f106					      repend
   2961  f107		       00		      .byte.b	$00
   2960  f107					      repend
   2961  f108		       00		      .byte.b	$00
   2960  f108					      repend
   2961  f109		       00		      .byte.b	$00
   2960  f109					      repend
   2961  f10a		       00		      .byte.b	$00
   2960  f10a					      repend
   2961  f10b		       00		      .byte.b	$00
   2960  f10b					      repend
   2961  f10c		       00		      .byte.b	$00
   2960  f10c					      repend
   2961  f10d		       00		      .byte.b	$00
   2960  f10d					      repend
   2961  f10e		       00		      .byte.b	$00
   2960  f10e					      repend
   2961  f10f		       00		      .byte.b	$00
   2960  f10f					      repend
   2961  f110		       00		      .byte.b	$00
   2960  f110					      repend
   2961  f111		       00		      .byte.b	$00
   2960  f111					      repend
   2961  f112		       00		      .byte.b	$00
   2960  f112					      repend
   2961  f113		       00		      .byte.b	$00
   2960  f113					      repend
   2961  f114		       00		      .byte.b	$00
   2960  f114					      repend
   2961  f115		       00		      .byte.b	$00
   2960  f115					      repend
   2961  f116		       00		      .byte.b	$00
   2960  f116					      repend
   2961  f117		       00		      .byte.b	$00
   2960  f117					      repend
   2961  f118		       00		      .byte.b	$00
   2960  f118					      repend
   2961  f119		       00		      .byte.b	$00
   2960  f119					      repend
   2961  f11a		       00		      .byte.b	$00
   2960  f11a					      repend
   2961  f11b		       00		      .byte.b	$00
   2960  f11b					      repend
   2961  f11c		       00		      .byte.b	$00
   2960  f11c					      repend
   2961  f11d		       00		      .byte.b	$00
   2960  f11d					      repend
   2961  f11e		       00		      .byte.b	$00
   2960  f11e					      repend
   2961  f11f		       00		      .byte.b	$00
   2960  f11f					      repend
   2961  f120		       00		      .byte.b	$00
   2960  f120					      repend
   2961  f121		       00		      .byte.b	$00
   2960  f121					      repend
   2961  f122		       00		      .byte.b	$00
   2960  f122					      repend
   2961  f123		       00		      .byte.b	$00
   2960  f123					      repend
   2961  f124		       00		      .byte.b	$00
   2960  f124					      repend
   2961  f125		       00		      .byte.b	$00
   2960  f125					      repend
   2961  f126		       00		      .byte.b	$00
   2960  f126					      repend
   2961  f127		       00		      .byte.b	$00
   2960  f127					      repend
   2961  f128		       00		      .byte.b	$00
   2960  f128					      repend
   2961  f129		       00		      .byte.b	$00
   2960  f129					      repend
   2961  f12a		       00		      .byte.b	$00
   2960  f12a					      repend
   2961  f12b		       00		      .byte.b	$00
   2960  f12b					      repend
   2961  f12c		       00		      .byte.b	$00
   2960  f12c					      repend
   2961  f12d		       00		      .byte.b	$00
   2960  f12d					      repend
   2961  f12e		       00		      .byte.b	$00
   2960  f12e					      repend
   2961  f12f		       00		      .byte.b	$00
   2960  f12f					      repend
   2961  f130		       00		      .byte.b	$00
   2960  f130					      repend
   2961  f131		       00		      .byte.b	$00
   2960  f131					      repend
   2961  f132		       00		      .byte.b	$00
   2960  f132					      repend
   2961  f133		       00		      .byte.b	$00
   2960  f133					      repend
   2961  f134		       00		      .byte.b	$00
   2960  f134					      repend
   2961  f135		       00		      .byte.b	$00
   2960  f135					      repend
   2961  f136		       00		      .byte.b	$00
   2960  f136					      repend
   2961  f137		       00		      .byte.b	$00
   2960  f137					      repend
   2961  f138		       00		      .byte.b	$00
   2960  f138					      repend
   2961  f139		       00		      .byte.b	$00
   2960  f139					      repend
   2961  f13a		       00		      .byte.b	$00
   2960  f13a					      repend
   2961  f13b		       00		      .byte.b	$00
   2960  f13b					      repend
   2961  f13c		       00		      .byte.b	$00
   2960  f13c					      repend
   2961  f13d		       00		      .byte.b	$00
   2960  f13d					      repend
   2961  f13e		       00		      .byte.b	$00
   2960  f13e					      repend
   2961  f13f		       00		      .byte.b	$00
   2960  f13f					      repend
   2961  f140		       00		      .byte.b	$00
   2960  f140					      repend
   2961  f141		       00		      .byte.b	$00
   2960  f141					      repend
   2961  f142		       00		      .byte.b	$00
   2960  f142					      repend
   2961  f143		       00		      .byte.b	$00
   2960  f143					      repend
   2961  f144		       00		      .byte.b	$00
   2960  f144					      repend
   2961  f145		       00		      .byte.b	$00
   2960  f145					      repend
   2961  f146		       00		      .byte.b	$00
   2960  f146					      repend
   2961  f147		       00		      .byte.b	$00
   2960  f147					      repend
   2961  f148		       00		      .byte.b	$00
   2960  f148					      repend
   2961  f149		       00		      .byte.b	$00
   2960  f149					      repend
   2961  f14a		       00		      .byte.b	$00
   2960  f14a					      repend
   2961  f14b		       00		      .byte.b	$00
   2960  f14b					      repend
   2961  f14c		       00		      .byte.b	$00
   2960  f14c					      repend
   2961  f14d		       00		      .byte.b	$00
   2960  f14d					      repend
   2961  f14e		       00		      .byte.b	$00
   2960  f14e					      repend
   2961  f14f		       00		      .byte.b	$00
   2960  f14f					      repend
   2961  f150		       00		      .byte.b	$00
   2960  f150					      repend
   2961  f151		       00		      .byte.b	$00
   2960  f151					      repend
   2961  f152		       00		      .byte.b	$00
   2960  f152					      repend
   2961  f153		       00		      .byte.b	$00
   2960  f153					      repend
   2961  f154		       00		      .byte.b	$00
   2960  f154					      repend
   2961  f155		       00		      .byte.b	$00
   2960  f155					      repend
   2961  f156		       00		      .byte.b	$00
   2960  f156					      repend
   2961  f157		       00		      .byte.b	$00
   2960  f157					      repend
   2961  f158		       00		      .byte.b	$00
   2960  f158					      repend
   2961  f159		       00		      .byte.b	$00
   2960  f159					      repend
   2961  f15a		       00		      .byte.b	$00
   2960  f15a					      repend
   2961  f15b		       00		      .byte.b	$00
   2960  f15b					      repend
   2961  f15c		       00		      .byte.b	$00
   2960  f15c					      repend
   2961  f15d		       00		      .byte.b	$00
   2960  f15d					      repend
   2961  f15e		       00		      .byte.b	$00
   2960  f15e					      repend
   2961  f15f		       00		      .byte.b	$00
   2960  f15f					      repend
   2961  f160		       00		      .byte.b	$00
   2960  f160					      repend
   2961  f161		       00		      .byte.b	$00
   2960  f161					      repend
   2961  f162		       00		      .byte.b	$00
   2960  f162					      repend
   2961  f163		       00		      .byte.b	$00
   2960  f163					      repend
   2961  f164		       00		      .byte.b	$00
   2960  f164					      repend
   2961  f165		       00		      .byte.b	$00
   2960  f165					      repend
   2961  f166		       00		      .byte.b	$00
   2960  f166					      repend
   2961  f167		       00		      .byte.b	$00
   2960  f167					      repend
   2961  f168		       00		      .byte.b	$00
   2960  f168					      repend
   2961  f169		       00		      .byte.b	$00
   2960  f169					      repend
   2961  f16a		       00		      .byte.b	$00
   2960  f16a					      repend
   2961  f16b		       00		      .byte.b	$00
   2960  f16b					      repend
   2961  f16c		       00		      .byte.b	$00
   2960  f16c					      repend
   2961  f16d		       00		      .byte.b	$00
   2960  f16d					      repend
   2961  f16e		       00		      .byte.b	$00
   2960  f16e					      repend
   2961  f16f		       00		      .byte.b	$00
   2960  f16f					      repend
   2961  f170		       00		      .byte.b	$00
   2960  f170					      repend
   2961  f171		       00		      .byte.b	$00
   2960  f171					      repend
   2961  f172		       00		      .byte.b	$00
   2960  f172					      repend
   2961  f173		       00		      .byte.b	$00
   2960  f173					      repend
   2961  f174		       00		      .byte.b	$00
   2960  f174					      repend
   2961  f175		       00		      .byte.b	$00
   2960  f175					      repend
   2961  f176		       00		      .byte.b	$00
   2960  f176					      repend
   2961  f177		       00		      .byte.b	$00
   2960  f177					      repend
   2961  f178		       00		      .byte.b	$00
   2960  f178					      repend
   2961  f179		       00		      .byte.b	$00
   2960  f179					      repend
   2961  f17a		       00		      .byte.b	$00
   2960  f17a					      repend
   2961  f17b		       00		      .byte.b	$00
   2960  f17b					      repend
   2961  f17c		       00		      .byte.b	$00
   2960  f17c					      repend
   2961  f17d		       00		      .byte.b	$00
   2960  f17d					      repend
   2961  f17e		       00		      .byte.b	$00
   2960  f17e					      repend
   2961  f17f		       00		      .byte.b	$00
   2960  f17f					      repend
   2961  f180		       00		      .byte.b	$00
   2960  f180					      repend
   2961  f181		       00		      .byte.b	$00
   2960  f181					      repend
   2961  f182		       00		      .byte.b	$00
   2960  f182					      repend
   2961  f183		       00		      .byte.b	$00
   2960  f183					      repend
   2961  f184		       00		      .byte.b	$00
   2960  f184					      repend
   2961  f185		       00		      .byte.b	$00
   2960  f185					      repend
   2961  f186		       00		      .byte.b	$00
   2960  f186					      repend
   2961  f187		       00		      .byte.b	$00
   2960  f187					      repend
   2961  f188		       00		      .byte.b	$00
   2960  f188					      repend
   2961  f189		       00		      .byte.b	$00
   2960  f189					      repend
   2961  f18a		       00		      .byte.b	$00
   2960  f18a					      repend
   2961  f18b		       00		      .byte.b	$00
   2960  f18b					      repend
   2961  f18c		       00		      .byte.b	$00
   2960  f18c					      repend
   2961  f18d		       00		      .byte.b	$00
   2960  f18d					      repend
   2961  f18e		       00		      .byte.b	$00
   2960  f18e					      repend
   2961  f18f		       00		      .byte.b	$00
   2960  f18f					      repend
   2961  f190		       00		      .byte.b	$00
   2960  f190					      repend
   2961  f191		       00		      .byte.b	$00
   2960  f191					      repend
   2961  f192		       00		      .byte.b	$00
   2960  f192					      repend
   2961  f193		       00		      .byte.b	$00
   2960  f193					      repend
   2961  f194		       00		      .byte.b	$00
   2960  f194					      repend
   2961  f195		       00		      .byte.b	$00
   2960  f195					      repend
   2961  f196		       00		      .byte.b	$00
   2960  f196					      repend
   2961  f197		       00		      .byte.b	$00
   2960  f197					      repend
   2961  f198		       00		      .byte.b	$00
   2960  f198					      repend
   2961  f199		       00		      .byte.b	$00
   2960  f199					      repend
   2961  f19a		       00		      .byte.b	$00
   2960  f19a					      repend
   2961  f19b		       00		      .byte.b	$00
   2960  f19b					      repend
   2961  f19c		       00		      .byte.b	$00
   2960  f19c					      repend
   2961  f19d		       00		      .byte.b	$00
   2960  f19d					      repend
   2961  f19e		       00		      .byte.b	$00
   2960  f19e					      repend
   2961  f19f		       00		      .byte.b	$00
   2960  f19f					      repend
   2961  f1a0		       00		      .byte.b	$00
   2960  f1a0					      repend
   2961  f1a1		       00		      .byte.b	$00
   2960  f1a1					      repend
   2961  f1a2		       00		      .byte.b	$00
   2960  f1a2					      repend
   2961  f1a3		       00		      .byte.b	$00
   2960  f1a3					      repend
   2961  f1a4		       00		      .byte.b	$00
   2960  f1a4					      repend
   2961  f1a5		       00		      .byte.b	$00
   2960  f1a5					      repend
   2961  f1a6		       00		      .byte.b	$00
   2960  f1a6					      repend
   2961  f1a7		       00		      .byte.b	$00
   2960  f1a7					      repend
   2961  f1a8		       00		      .byte.b	$00
   2960  f1a8					      repend
   2961  f1a9		       00		      .byte.b	$00
   2960  f1a9					      repend
   2961  f1aa		       00		      .byte.b	$00
   2960  f1aa					      repend
   2961  f1ab		       00		      .byte.b	$00
   2960  f1ab					      repend
   2961  f1ac		       00		      .byte.b	$00
   2960  f1ac					      repend
   2961  f1ad		       00		      .byte.b	$00
   2960  f1ad					      repend
   2961  f1ae		       00		      .byte.b	$00
   2960  f1ae					      repend
   2961  f1af		       00		      .byte.b	$00
   2960  f1af					      repend
   2961  f1b0		       00		      .byte.b	$00
   2960  f1b0					      repend
   2961  f1b1		       00		      .byte.b	$00
   2960  f1b1					      repend
   2961  f1b2		       00		      .byte.b	$00
   2960  f1b2					      repend
   2961  f1b3		       00		      .byte.b	$00
   2960  f1b3					      repend
   2961  f1b4		       00		      .byte.b	$00
   2960  f1b4					      repend
   2961  f1b5		       00		      .byte.b	$00
   2960  f1b5					      repend
   2961  f1b6		       00		      .byte.b	$00
   2960  f1b6					      repend
   2961  f1b7		       00		      .byte.b	$00
   2960  f1b7					      repend
   2961  f1b8		       00		      .byte.b	$00
   2960  f1b8					      repend
   2961  f1b9		       00		      .byte.b	$00
   2960  f1b9					      repend
   2961  f1ba		       00		      .byte.b	$00
   2960  f1ba					      repend
   2961  f1bb		       00		      .byte.b	$00
   2960  f1bb					      repend
   2961  f1bc		       00		      .byte.b	$00
   2960  f1bc					      repend
   2961  f1bd		       00		      .byte.b	$00
   2960  f1bd					      repend
   2961  f1be		       00		      .byte.b	$00
   2960  f1be					      repend
   2961  f1bf		       00		      .byte.b	$00
   2960  f1bf					      repend
   2961  f1c0		       00		      .byte.b	$00
   2960  f1c0					      repend
   2961  f1c1		       00		      .byte.b	$00
   2960  f1c1					      repend
   2961  f1c2		       00		      .byte.b	$00
   2960  f1c2					      repend
   2961  f1c3		       00		      .byte.b	$00
   2960  f1c3					      repend
   2961  f1c4		       00		      .byte.b	$00
   2960  f1c4					      repend
   2961  f1c5		       00		      .byte.b	$00
   2960  f1c5					      repend
   2961  f1c6		       00		      .byte.b	$00
   2960  f1c6					      repend
   2961  f1c7		       00		      .byte.b	$00
   2960  f1c7					      repend
   2961  f1c8		       00		      .byte.b	$00
   2960  f1c8					      repend
   2961  f1c9		       00		      .byte.b	$00
   2960  f1c9					      repend
   2961  f1ca		       00		      .byte.b	$00
   2960  f1ca					      repend
   2961  f1cb		       00		      .byte.b	$00
   2960  f1cb					      repend
   2961  f1cc		       00		      .byte.b	$00
   2960  f1cc					      repend
   2961  f1cd		       00		      .byte.b	$00
   2960  f1cd					      repend
   2961  f1ce		       00		      .byte.b	$00
   2960  f1ce					      repend
   2961  f1cf		       00		      .byte.b	$00
   2960  f1cf					      repend
   2961  f1d0		       00		      .byte.b	$00
   2960  f1d0					      repend
   2961  f1d1		       00		      .byte.b	$00
   2960  f1d1					      repend
   2961  f1d2		       00		      .byte.b	$00
   2960  f1d2					      repend
   2961  f1d3		       00		      .byte.b	$00
   2960  f1d3					      repend
   2961  f1d4		       00		      .byte.b	$00
   2960  f1d4					      repend
   2961  f1d5		       00		      .byte.b	$00
   2960  f1d5					      repend
   2961  f1d6		       00		      .byte.b	$00
   2960  f1d6					      repend
   2961  f1d7		       00		      .byte.b	$00
   2960  f1d7					      repend
   2961  f1d8		       00		      .byte.b	$00
   2960  f1d8					      repend
   2961  f1d9		       00		      .byte.b	$00
   2960  f1d9					      repend
   2961  f1da		       00		      .byte.b	$00
   2960  f1da					      repend
   2961  f1db		       00		      .byte.b	$00
   2960  f1db					      repend
   2961  f1dc		       00		      .byte.b	$00
   2960  f1dc					      repend
   2961  f1dd		       00		      .byte.b	$00
   2960  f1dd					      repend
   2961  f1de		       00		      .byte.b	$00
   2960  f1de					      repend
   2961  f1df		       00		      .byte.b	$00
   2960  f1df					      repend
   2961  f1e0		       00		      .byte.b	$00
   2960  f1e0					      repend
   2961  f1e1		       00		      .byte.b	$00
   2960  f1e1					      repend
   2961  f1e2		       00		      .byte.b	$00
   2960  f1e2					      repend
   2961  f1e3		       00		      .byte.b	$00
   2960  f1e3					      repend
   2961  f1e4		       00		      .byte.b	$00
   2960  f1e4					      repend
   2961  f1e5		       00		      .byte.b	$00
   2960  f1e5					      repend
   2961  f1e6		       00		      .byte.b	$00
   2960  f1e6					      repend
   2961  f1e7		       00		      .byte.b	$00
   2960  f1e7					      repend
   2961  f1e8		       00		      .byte.b	$00
   2960  f1e8					      repend
   2961  f1e9		       00		      .byte.b	$00
   2960  f1e9					      repend
   2961  f1ea		       00		      .byte.b	$00
   2960  f1ea					      repend
   2961  f1eb		       00		      .byte.b	$00
   2960  f1eb					      repend
   2961  f1ec		       00		      .byte.b	$00
   2960  f1ec					      repend
   2961  f1ed		       00		      .byte.b	$00
   2960  f1ed					      repend
   2961  f1ee		       00		      .byte.b	$00
   2960  f1ee					      repend
   2961  f1ef		       00		      .byte.b	$00
   2960  f1ef					      repend
   2961  f1f0		       00		      .byte.b	$00
   2960  f1f0					      repend
   2961  f1f1		       00		      .byte.b	$00
   2960  f1f1					      repend
   2961  f1f2		       00		      .byte.b	$00
   2960  f1f2					      repend
   2961  f1f3		       00		      .byte.b	$00
   2960  f1f3					      repend
   2961  f1f4		       00		      .byte.b	$00
   2960  f1f4					      repend
   2961  f1f5		       00		      .byte.b	$00
   2960  f1f5					      repend
   2961  f1f6		       00		      .byte.b	$00
   2960  f1f6					      repend
   2961  f1f7		       00		      .byte.b	$00
   2960  f1f7					      repend
   2961  f1f8		       00		      .byte.b	$00
   2960  f1f8					      repend
   2961  f1f9		       00		      .byte.b	$00
   2960  f1f9					      repend
   2961  f1fa		       00		      .byte.b	$00
   2960  f1fa					      repend
   2961  f1fb		       00		      .byte.b	$00
   2960  f1fb					      repend
   2961  f1fc		       00		      .byte.b	$00
   2960  f1fc					      repend
   2961  f1fd		       00		      .byte.b	$00
   2960  f1fd					      repend
   2961  f1fe		       00		      .byte.b	$00
   2960  f1fe					      repend
   2961  f1ff		       00		      .byte.b	$00
   2962  f200					      repend
   2963  f200
   2964  f200				   Bank2
   2965  f200
   2966  f200		       ad f8 ff 	      lda	$FFF8
   2967  f203
   2968  f203
   2969  fffc					      org	$FFFC
   2970  fffc					      rorg	$FFFC
   2971  fffc		       00 f2		      .word.w	Bank2
   2972  fffe		       42 32		      .byte.b	"B2"

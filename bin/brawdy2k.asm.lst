------- FILE brawdy2k.asm LEVEL 1 PASS 2
      1  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2  10000 ????						;  Brawdy2k
      3  10000 ????						;  Game programed by R. Scharmen
      4  10000 ????						;  March 2024
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      6  10000 ????				       processor	6502
      7  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE brawdy2k.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE brawdy2k.asm
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????						;-------------------------------------------------------
      2  0000 ????						; Usage: TIMER_SETUP lines
      3  0000 ????						; where lines is the number of scanlines to skip (> 2).
      4  0000 ????						; The timer will be set so that it expires before this number
      5  0000 ????						; of scanlines. A WSYNC will be done first.
      6  0000 ????
      7  0000 ????				      MAC	timer_setup
      8  0000 ????			   .lines     SET	{1}
      9  0000 ????			   .cycles    SET	((.lines * 76) - 13)
     10  0000 ????						; special case for when we have two timer events in a line
     11  0000 ????						; and our 2nd event straddles the WSYNC boundary
     12  0000 ????				      if	(.cycles % 64) < 12
     13  0000 ????				      lda	#(.cycles / 64) - 1
     14  0000 ????				      sta	WSYNC
     15  0000 ????				      else
     16  0000 ????				      lda	#(.cycles / 64)
     17  0000 ????				      sta	WSYNC
     18  0000 ????				      endif
     19  0000 ????				      sta	TIM64T
     20  0000 ????				      ENDM
     21  0000 ????
     22  0000 ????						;-------------------------------------------------------
     23  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     24  0000 ????						; Performs a WSYNC afterwards.
     25  0000 ????
     26  0000 ????				      MAC	timer_wait
     27  0000 ????			   .waittimer
     28  0000 ????				      lda	INTIM
     29  0000 ????				      bne	.waittimer
     30  0000 ????				      sta	WSYNC
     31  0000 ????				      ENDM
------- FILE brawdy2k.asm
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12  0000 ????						;; Start an uninitialized segment at $80 for var declaration.
     13  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     14 U00b9 ????				      seg.u	Variables
     15 U0080					      org	$80
     16 U0080							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     17 U0080							;  Variables
     18 U0080							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     19 U0080				   _Variables
     20 U0080
     21 U0080		       00	   Player0y   .byte.b
     22 U0081		       00	   Player0x   .byte.b
     23 U0082		       00	   Player1y   .byte.b
     24 U0083		       00	   Player1x   .byte.b
     25 U0084		       00	   EnemyXLoc  .byte.b
     26 U0085		       00	   Random     .byte.b
     27 U0086		       00 00	   rand16     .word.w
     28 U0088		       00 00	   EnemySpritePtr .word.w
     29 U008a		       00 00	   EnemyColorPtr .word.w
     30 U008c		       00 00	   P0SpritePtr .word.w
     31 U008e		       00 00	   P0ColorPtr .Word.w
     32 U0090		       00 00	   DamageClrPtr .word.w
     33 U0092		       00	   DestroyAnim .byte.b
     34 U0093		       00	   AnimCounter .byte.b
     35 U0094		       00 00	   EnemyAnimOffset .word.w
     36 U0096		       00	   Missile0x  .byte.b
     37 U0097		       00	   Missile0y  .byte.b
     38 U0098		       00 00	   OnesDigitOffset .word.w
     39 U009a		       00 00	   TensDigitOffset .word.w
     40 U009c		       00	   Score      .byte.b
     41 U009d		       00	   HP	      .byte.b
     42 U009e		       00	   Temp       .byte.b
     43 U009f		       00	   ScoreSprite .byte.b
     44 U00a0		       00	   TimerSprite .byte.b
     45 U00a1		       00	   Gameover   .byte.b
     46 U00a2		       00	   BackgroundClr .byte.b
     47 U00a3		       00	   EnemyCount .byte.b
     48 U00a4		       00 00	   P0AnimOffset .word.w
     49 U00a6		       00	   EnemyDropLevel .byte.b
     50 U00a7		       00	   Level      .byte.b
     51 U00a8		       00	   Center     .byte.b
     52 U00a9		       00	   CenterLevel .byte.b
     53 U00aa		       00	   Exp	      .byte.b
     54 U00ab		       00	   AddHP      .byte.b
     55 U00ac		       00	   EFFECT1    .byte.b
     56 U00ad		       00	   SoundOff   .byte.b
     57 U00ae		       00	   MUSIC1     .byte.b
     58 U00af		       00	   EFFECT2    .byte.b
     59 U00b0		       00	   ExpOff     .byte.b
     60 U00b1		       00	   Pause      .byte.b
     61 U00b2		       00	   Stop       .byte.b
     62 U00b3		       00	   StopMove   .byte.b
     63 U00b4		       00	   Delay      .byte.b
     64 U00b5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     65 U00b5							;CONSTANTS
     66 U00b5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     67 U00b5		       00 08	   P0SPRITEHGT =	8
     68 U00b5		       00 08	   P1SPRITEHGT =	8
     69 U00b5		       00 05	   DIGITS_HEIGHT =	5
     70 U00b5		       a9 01		      lda	#1
     71 U00b7		       85 b1		      sta	Pause
     72 U00b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     73 U00b9							;MACROS
     74 U00b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     75 U00b9					      MAC	fire_missile
     76 U00b9					      lda	#%00000000
     77 U00b9					      bne	SkipMissile
     78 U00b9					      cpx	Missile0y
     79 U00b9					      bne	SkipMissile
     80 U00b9					      lda	#%00000010
     81 U00b9					      inc	Missile0y
     82 U00b9					      inc	Missile0y
     83 U00b9				   SkipMissile
     84 U00b9					      sta	ENAM0
     85 U00b9					      ENDM
     86 U00b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     87 U00b9							;; Start our ROM code segment for 2k game at $F800
     88 U00b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     89  10000 ????				       seg	Code
     90  f800					      org	$F800
     91  f800				   Reset
      0  f800					      CLEAN_START
      1  f800		       78		      sei
      2  f801		       d8		      cld
      3  f802
      4  f802		       a2 00		      ldx	#0
      5  f804		       8a		      txa
      6  f805		       a8		      tay
      7  f806		       ca	   .CLEAR_STACK dex
      8  f807		       9a		      txs
      9  f808		       48		      pha
     10  f809		       d0 fb		      bne	.CLEAR_STACK
     11  f80b
     93  f80b		       a9 ca		      lda	#$CA
     94  f80d		       85 a2		      sta	BackgroundClr
     95  f80f		       20 55 fc 	      jsr	GetRandomPos
     96  f812		       20 87 fc 	      jsr	GetRandomCenter
     97  f815		       20 6e fc 	      jsr	GetRandomLevel
     98  f818		       4c 29 f8 	      jmp	SetVar
     99  f81b				   Unpause
    100  f81b		       a9 0a		      lda	#$0A
    101  f81d		       85 a2		      sta	BackgroundClr
    102  f81f		       f0 fa		      beq	Unpause
    103  f821		       a9 01		      lda	#1
    104  f823		       85 b1		      sta	Pause
    105  f825		       a9 52		      lda	#82
    106  f827		       85 83		      sta	Player1x
    107  f829				   SetVar
    108  f829		       85 83		      sta	Player1x
    109  f82b		       a9 01		      lda	#1
    110  f82d		       85 80		      sta	Player0y
    111  f82f		       a9 52		      lda	#82
    112  f831		       85 81		      sta	Player0x
    113  f833		       a9 5f		      lda	#95
    114  f835		       85 82		      sta	Player1y
    115  f837		       a9 d4		      lda	#212
    116  f839		       85 85		      sta	Random
    117  f83b		       a9 14		      lda	#20
    118  f83d		       85 a7		      sta	Level
    119  f83f		       85 a8		      sta	Center
    120  f841		       a9 00		      lda	#0
    121  f843		       85 94		      sta	EnemyAnimOffset
    122  f845		       8d c1 fc 	      sta	GameOver
    123  f848		       85 a4		      sta	P0AnimOffset
    124  f84a		       85 ab		      sta	AddHP
    125  f84c		       85 a3		      sta	EnemyCount
    126  f84e		       85 9c		      sta	Score
    127  f850		       85 ad		      sta	SoundOff
    128  f852		       85 b0		      sta	ExpOff
    129  f854		       a9 32		      lda	#50
    130  f856		       85 93		      sta	AnimCounter
    131  f858		       a9 10		      lda	#16
    132  f85a		       85 92		      sta	DestroyAnim
    133  f85c		       a9 25		      lda	#$25
    134  f85e		       85 9d		      sta	HP
    135  f860		       a9 14		      lda	#20
    136  f862		       85 b2		      sta	Stop
    137  f864		       a9 05		      lda	#5
    138  f866		       85 b4		      sta	Delay
    139  f868							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    140  f868							; Set Pointer Variaibles
    141  f868							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    142  f868				   Pointers
    143  f868		       a9 55		      lda	#<P1Frame0
    144  f86a		       85 88		      sta	EnemySpritePtr
    145  f86c		       a9 fd		      lda	#>P1Frame0
    146  f86e		       85 89		      sta	EnemySpritePtr+1
    147  f870
    148  f870		       a9 70		      lda	#<P1ColorFrame0
    149  f872		       85 8a		      sta	EnemyColorPtr
    150  f874		       a9 fd		      lda	#>P1ColorFrame0
    151  f876		       85 8b		      sta	EnemyColorPtr+1
    152  f878
    153  f878		       a9 16		      lda	#<P0Frame0
    154  f87a		       85 8c		      sta	P0SpritePtr
    155  f87c		       a9 fd		      lda	#>P0Frame0
    156  f87e		       85 8d		      sta	P0SpritePtr+1
    157  f880
    158  f880		       a9 31		      lda	#<P0ColorFrame0
    159  f882		       85 8e		      sta	P0ColorPtr
    160  f884		       a9 fd		      lda	#>P0ColorFrame0
    161  f886		       85 8f		      sta	P0ColorPtr+1
    162  f888
    163  f888		       a9 03		      lda	#<DateColorPF0
    164  f88a		       85 90		      sta	DamageClrPtr
    165  f88c		       a9 fe		      lda	#>DateColorPF0
    166  f88e		       85 91		      sta	DamageClrPtr+1
    167  f890							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    168  f890							; Game Start
    169  f890							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    170  f890				   Start
    171  f890		       a9 02		      lda	#2
    172  f892		       85 01		      sta	VBLANK
    173  f894		       85 00		      sta	VSYNC
    174  f896		       4e 82 02 	      lsr	SWCHB
    175  f899		       90 80		      bcc	Unpause
    176  f89b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    177  f89b				   _VSYNC
    178  f89b					      REPEAT	3
    179  f89b		       85 02		      sta	WSYNC
    178  f89b					      REPEND
    179  f89d		       85 02		      sta	WSYNC
    178  f89d					      REPEND
    179  f89f		       85 02		      sta	WSYNC
    180  f8a1					      REPEND
    181  f8a1		       a9 00		      lda	#0
    182  f8a3		       85 00		      sta	VSYNC
    183  f8a5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    184  f8a5							;; Let the TIA output the 37 recommended lines of VBLANK
    185  f8a5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0  f8a5					      TIMER_SETUP	37
      1  f8a5				   .lines     SET	37
      2  f8a5				   .cycles    SET	((.lines * 76) - 13)
      3  f8a5
      4  f8a5
      5  f8a5				  -	      if	(.cycles % 64) < 12
      6  f8a5				  -	      lda	#(.cycles / 64) - 1
      7  f8a5				  -	      sta	WSYNC
      8  f8a5					      else
      9  f8a5		       a9 2b		      lda	#(.cycles / 64)
     10  f8a7		       85 02		      sta	WSYNC
     11  f8a9					      endif
     12  f8a9		       8d 96 02 	      sta	TIM64T
    187  f8ac				   ExpSound
    188  f8ac		       a5 b0		      lda	ExpOff
    189  f8ae		       c9 01		      cmp	#1
    190  f8b0		       b0 1c		      bcs	ExpSoundOff
    191  f8b2		       a5 af		      LDA	EFFECT2
    192  f8b4		       f0 18		      BEQ	ExpSoundOff
    193  f8b6				   MakeExpSound
    194  f8b6		       a5 af		      LDA	EFFECT2
    195  f8b8		       f0 14		      BEQ	ExpSoundOff
    196  f8ba		       c6 af		      DEC	EFFECT2
    197  f8bc		       4a		      LSR
    198  f8bd		       4a		      LSR
    199  f8be		       85 1a		      STA	AUDV1
    200  f8c0		       4a		      LSR
    201  f8c1		       49 07		      EOR	#7
    202  f8c3		       69 01		      ADC	#1
    203  f8c5		       85 18		      STA	AUDF1
    204  f8c7		       a9 08		      LDA	#8
    205  f8c9		       85 16		      STA	AUDC1
    206  f8cb		       4c d6 f8 	      JMP	GameSettings
    207  f8ce				   ExpSoundOff
    208  f8ce		       a9 00		      LDA	#0
    209  f8d0		       85 b0		      sta	ExpOff
    210  f8d2		       a9 00		      LDA	#0
    211  f8d4		       85 1a		      STA	AUDV1
    212  f8d6				   GameSettings
    213  f8d6		       a9 f0		      lda	#$F0
    214  f8d8		       85 08		      sta	COLUPF
    215  f8da				   NewStart1
    216  f8da		       a5 b1		      lda	Pause
    217  f8dc		       c9 00		      cmp	#0
    218  f8de		       f0 03		      beq	Resume1
    219  f8e0		       20 f8 fb 	      jsr	Joystick
    220  f8e3				   Resume1
    221  f8e3		       18		      clc
    222  f8e4		       a5 93		      lda	AnimCounter
    223  f8e6		       69 01		      adc	#1
    224  f8e8		       85 93		      sta	AnimCounter
    225  f8ea		       c9 08		      cmp	#8
    226  f8ec		       90 44		      bcc	.SkipAnim
    227  f8ee		       a9 00		      lda	#0
    228  f8f0		       85 93		      sta	AnimCounter
    229  f8f2		       85 a4		      sta	P0AnimOffset
    230  f8f4		       a5 9c		      lda	Score
    231  f8f6		       c9 05		      cmp	#5
    232  f8f8		       f0 11		      beq	.AddHP
    233  f8fa		       c9 25		      cmp	#37
    234  f8fc		       f0 0d		      beq	.AddHP
    235  f8fe		       c9 50		      cmp	#80
    236  f900		       f0 09		      beq	.AddHP
    237  f902		       a5 9c		      lda	Score
    238  f904		       c9 75		      cmp	#117
    239  f906		       f0 03		      beq	.AddHP
    240  f908		       4c 1e f9 	      jmp	EnemyAnim
    241  f90b				   .AddHP
    242  f90b		       a9 01		      lda	#1
    243  f90d		       e6 ab		      inc	AddHP
    244  f90f		       f8		      SED
    245  f910		       a5 9d		      lda	HP
    246  f912		       18		      clc
    247  f913		       69 05		      adc	#5
    248  f915		       85 9d		      sta	HP
    249  f917		       a5 9c		      lda	Score
    250  f919		       69 01		      adc	#1
    251  f91b		       85 9c		      sta	Score
    252  f91d		       d8		      cld
    253  f91e				   EnemyAnim
    254  f91e		       a5 94		      lda	EnemyAnimOffset
    255  f920		       c5 92		      cmp	DestroyAnim
    256  f922		       90 07		      bcc	.Enemyadd
    257  f924		       a9 00		      lda	#0
    258  f926		       85 94		      sta	EnemyAnimOffset
    259  f928		       4c 32 f9 	      jmp	.SkipAnim
    260  f92b				   .Enemyadd
    261  f92b		       18		      clc
    262  f92c		       a5 94		      lda	EnemyAnimOffset
    263  f92e		       69 09		      adc	#9
    264  f930		       85 94		      sta	EnemyAnimOffset
    265  f932				   .SkipAnim
    266  f932		       ad c1 fc 	      lda	GameOver
    267  f935		       c9 00		      cmp	#0
    268  f937		       f0 15		      beq	.GameoverScreen
    269  f939		       a5 81		      lda	Player0x
    270  f93b		       a2 00		      ldx	#0
    271  f93d		       20 e6 fb 	      jsr	SetHorizPos
    272  f940		       a5 83		      lda	Player1x
    273  f942		       a2 01		      ldx	#1
    274  f944		       20 e6 fb 	      jsr	SetHorizPos
    275  f947		       a5 96		      lda	Missile0x
    276  f949		       a2 02		      ldx	#2
    277  f94b		       20 e6 fb 	      jsr	SetHorizPos
    278  f94e				   .GameoverScreen
    279  f94e		       20 a0 fc 	      jsr	CalculateDigitOffset
    280  f951		       85 02		      sta	WSYNC
    281  f953		       85 2a		      sta	HMOVE
    282  f955		       85 02		      sta	WSYNC
    283  f957
      0  f957					      TIMER_WAIT
      1  f957				   .waittimer
      2  f957		       ad 84 02 	      lda	INTIM
      3  f95a		       d0 fb		      bne	.waittimer
      4  f95c		       85 02		      sta	WSYNC
    285  f95e		       a9 00		      lda	#0
    286  f960		       85 01		      sta	VBLANK
    287  f962							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    288  f962							;; Display the scoreboard lines
    289  f962							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    290  f962				   Scoreboard
    291  f962		       a9 00		      lda	#0
    292  f964		       85 09		      sta	COLUBK
    293  f966		       85 0d		      sta	PF0
    294  f968		       85 0e		      sta	PF1
    295  f96a		       85 0f		      sta	PF2
    296  f96c		       85 1b		      sta	GRP0
    297  f96e		       85 1c		      sta	GRP1
    298  f970		       a9 02		      lda	#%00000010
    299  f972		       85 0a		      sta	CTRLPF
    300  f974		       a9 1e		      lda	#$1E
    301  f976		       85 06		      sta	COLUP0
    302  f978		       a9 0e		      lda	#$0E
    303  f97a		       85 07		      sta	COLUP1
    304  f97c		       85 02		      sta	WSYNC
    305  f97e		       a9 1e		      lda	#$1E
    306  f980		       85 08		      sta	COLUPF
    307  f982		       a5 9d		      lda	HP
    308  f984		       c9 0b		      cmp	#11
    309  f986		       b0 04		      bcs	.ScoreCOLUBK
    310  f988		       a9 34		      lda	#$34
    311  f98a		       85 07		      sta	COLUP1
    312  f98c				   .ScoreCOLUBK
    313  f98c		       a9 72		      lda	#$72
    314  f98e		       85 09		      sta	COLUBK
    315  f990		       a2 05		      ldx	#DIGITS_HEIGHT
    316  f992				   .ScoreDigitLoop
    317  f992		       a4 9a		      ldy	TensDigitOffset	; get the tens digit offset for the Score
    318  f994		       b9 1f fe 	      lda	Digits,Y	; load the bit pattern from lookup table
    319  f997		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    320  f999		       85 9f		      sta	ScoreSprite	; save the score tens digit pattern in a variable
    321  f99b		       a4 98		      ldy	OnesDigitOffset	; get the ones digit offset for the Score
    322  f99d		       b9 1f fe 	      lda	Digits,Y	; load the digit bit pattern from lookup table
    323  f9a0		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    324  f9a2		       05 9f		      ora	ScoreSprite	; merge it with the saved tens digit sprite
    325  f9a4		       85 9f		      sta	ScoreSprite	; and save it
    326  f9a6		       85 02		      sta	WSYNC	; wait for the end of scanline
    327  f9a8		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    328  f9aa		       a4 9b		      ldy	TensDigitOffset+1	; get the left digit offset for the HitPoints
    329  f9ac		       b9 1f fe 	      lda	Digits,Y	; load the digit pattern from lookup table
    330  f9af		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    331  f9b1		       85 a0		      sta	TimerSprite	; save the Wavetens digit pattern in a variable
    332  f9b3		       a4 99		      ldy	OnesDigitOffset+1	; get the ones digit offset for the HitPoints
    333  f9b5		       b9 1f fe 	      lda	Digits,Y	; load digit pattern from the lookup table
    334  f9b8		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    335  f9ba		       05 a0		      ora	TimerSprite	; merge with the saved tens digit graphics
    336  f9bc		       85 a0		      sta	TimerSprite	; and save it
    337  f9be		       20 c0 fc 	      jsr	Sleep12Cycles	; wastes some cycles
    338  f9c1		       85 0e		      sta	PF1	; update the playfield for Wavedisplay
    339  f9c3		       a4 9f		      ldy	ScoreSprite	; preload for the next scanline
    340  f9c5		       85 02		      sta	WSYNC	; wait for next scanline
    341  f9c7		       84 0e		      sty	PF1	; update playfield for the score display
    342  f9c9		       e6 9a		      inc	TensDigitOffset
    343  f9cb		       e6 9b		      inc	TensDigitOffset+1
    344  f9cd		       e6 98		      inc	OnesDigitOffset
    345  f9cf		       e6 99		      inc	OnesDigitOffset+1	; increment all digits for the next line of data
    346  f9d1		       20 c0 fc 	      jsr	Sleep12Cycles	; waste some cycles
    347  f9d4		       ca		      dex
    348  f9d5		       85 0e		      sta	PF1
    349  f9d7		       d0 b9		      bne	.ScoreDigitLoop
    350  f9d9		       85 02		      sta	WSYNC
    351  f9db				   SetScreen
    352  f9db		       a9 00		      lda	#0
    353  f9dd		       85 0d		      sta	PF0
    354  f9df		       85 0e		      sta	PF1
    355  f9e1		       85 0f		      sta	PF2
    356  f9e3		       85 02		      sta	WSYNC
    357  f9e5		       85 02		      sta	WSYNC
    358  f9e7		       a9 00		      lda	#0
    359  f9e9		       85 1d		      sta	ENAM0
    360  f9eb		       a9 32		      lda	#50
    361  f9ed		       85 84		      sta	EnemyXLoc
    362  f9ef		       a5 a2		      lda	BackgroundClr
    363  f9f1		       85 09		      sta	COLUBK
    364  f9f3		       a9 01		      lda	#1
    365  f9f5		       85 0a		      sta	CTRLPF
    366  f9f7				   FireSoundCheck
    367  f9f7		       a5 ad		      lda	SoundOff
    368  f9f9		       c9 01		      cmp	#1
    369  f9fb		       b0 15		      bcs	NoSound
    370  f9fd		       a5 ac		      LDA	EFFECT1	; Read effect 1 counter.
    371  f9ff		       f0 11		      BEQ	NoSound	; Jump if zero.
    372  fa01		       c6 ac		      DEC	EFFECT1	; Count towards zero.
    373  fa03		       18		      CLC
    374  fa04		       69 0a		      ADC	#10	; Volume based on counter (12-2)
    375  fa06		       85 19		      STA	AUDV0
    376  fa08		       4a		      LSR
    377  fa09		       85 17		      STA	AUDF0
    378  fa0b		       a9 01		      LDA	#1
    379  fa0d		       85 15		      STA	AUDC0
    380  fa0f		       4c 1a fa 	      JMP	EndSoundEffects
    381  fa12				   NoSound
    382  fa12		       a9 00		      LDA	#0
    383  fa14		       85 19		      STA	AUDV0	; Turn off sound.
    384  fa16		       a9 00		      LDA	#0
    385  fa18		       85 ad		      sta	SoundOff
    386  fa1a				   EndSoundEffects
    387  fa1a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    388  fa1a							; Game Kernal 2 Scan Lines
    389  fa1a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    390  fa1a				   GameScreen
    391  fa1a		       a2 58		      ldx	# 88
    392  fa1c				   PlayField
    393  fa1c		       8a		      txa
    394  fa1d		       a8		      tay
    395  fa1e		       b1 90		      lda	(DamageClrPtr),y
    396  fa20		       85 08		      sta	COLUPF
    397  fa22		       b9 8b fd 	      lda	DataPF2,y
    398  fa25		       85 0f		      sta	PF2
    399  fa27				   EnemySprite
    400  fa27				   .Sprite1Scan
    401  fa27		       8a		      txa		; X -> A
    402  fa28		       38		      sec		; set carry for subtract
    403  fa29		       e5 82		      sbc	Player1y	; local coordinate
    404  fa2b		       c9 08		      cmp	#P1SPRITEHGT	; in sprite?
    405  fa2d		       90 02		      bcc	.InSprite1	; yes, skip over next
    406  fa2f		       a9 00		      lda	#0	; not in sprite, load 0
    407  fa31				   .InSprite1
    408  fa31		       18		      clc
    409  fa32		       65 94		      adc	EnemyAnimOffset
    410  fa34		       a8		      tay		; local coord -> Y
    411  fa35		       b1 88		      lda	(EnemySpritePtr),Y	; lookup color
    412  fa37		       85 02		      sta	WSYNC	; sync w/ scanline
    413  fa39		       85 1c		      sta	GRP1	; store bitmap
    414  fa3b		       b1 8a		      lda	(EnemyColorPtr),Y	; lookup color
    415  fa3d		       85 07		      sta	COLUP1	; store color
    416  fa3f				   FireMissileMacro
      0  fa3f					      FIRE_MISSILE
      1  fa3f		       a9 00		      lda	#%00000000
      2  fa41		       d0 0a		      bne	SkipMissile
      3  fa43		       e4 97		      cpx	Missile0y
      4  fa45		       d0 06		      bne	SkipMissile
      5  fa47		       a9 02		      lda	#%00000010
      6  fa49		       e6 97		      inc	Missile0y
      7  fa4b		       e6 97		      inc	Missile0y
      8  fa4d				   SkipMissile
      9  fa4d		       85 1d		      sta	ENAM0
    418  fa4f				   P0Sprite
    419  fa4f				   .Sprite0Scan
    420  fa4f		       8a		      txa		; X -> A
    421  fa50		       38		      sec		; set carry for subtract
    422  fa51		       e5 80		      sbc	Player0y	; local coordinate
    423  fa53		       c9 08		      cmp	#P0SPRITEHGT	; in sprite?
    424  fa55		       90 02		      bcc	.InSprite0	; yes, skip over next
    425  fa57		       a9 00		      lda	#0	; not in sprite, load 0
    426  fa59				   .InSprite0
    427  fa59		       18		      clc
    428  fa5a		       65 a4		      adc	P0AnimOffset
    429  fa5c		       a8		      tay		; local coord -> Y
    430  fa5d		       b1 8c		      lda	(P0SpritePtr),y	; lookup color
    431  fa5f		       85 02		      sta	WSYNC	; sync w/ scanline
    432  fa61		       85 1b		      sta	GRP0	; store bitmap
    433  fa63		       b1 8e		      lda	(P0ColorPtr),y	; lookup color
    434  fa65		       85 06		      sta	COLUP0	; store color
    435  fa67		       ca		      dex		; decrement X
    436  fa68		       d0 b2		      bne	PlayField	;
    437  fa6a				   NewStart2
    438  fa6a		       a5 b1		      lda	Pause
    439  fa6c		       c9 00		      cmp	#0
    440  fa6e		       f0 03		      beq	_Resume1
    441  fa70		       20 62 fb 	      jsr	EnemyDrop
    442  fa73				   _Resume1
    443  fa73		       a9 00		      lda	#$00
    444  fa75		       85 09		      sta	COLUBK
    445  fa77		       85 0d		      sta	PF0
    446  fa79		       85 0e		      sta	PF1
    447  fa7b		       85 0f		      sta	PF2
    448  fa7d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    449  fa7d							; Collisions
    450  fa7d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    451  fa7d				   Combat
    452  fa7d				   .P1PFCollision
    453  fa7d		       a9 80		      lda	#%10000000
    454  fa7f		       24 03		      bit	CXP1FB
    455  fa81		       d0 0f		      bne	.CollisionPF
    456  fa83				   .P1P0Collision
    457  fa83		       a9 80		      lda	#%10000000
    458  fa85		       24 07		      bit	CXPPMM
    459  fa87		       d0 38		      bne	.CollisionP0
    460  fa89				   .MissileCol
    461  fa89		       a9 80		      lda	#%10000000
    462  fa8b		       24 00		      bit	CXM0P
    463  fa8d		       d0 61		      bne	.EnemyHit
    464  fa8f		       4c 1d fb 	      jmp	.SetFrame
    465  fa92				   .CollisionPF
    466  fa92		       a9 01		      lda	#1
    467  fa94		       85 b0		      sta	ExpOff
    468  fa96		       a9 32		      LDA	#50	; Counter for effect 1.
    469  fa98		       85 af		      STA	EFFECT2
    470  fa9a		       20 6e fc 	      jsr	GetRandomLevel
    471  fa9d		       a5 a3		      lda	EnemyCount
    472  fa9f		       18		      clc
    473  faa0		       69 01		      adc	#1
    474  faa2		       85 a3		      sta	EnemyCount
    475  faa4		       20 55 fc 	      jsr	GetRandomPos
    476  faa7		       85 83		      sta	Player1x
    477  faa9		       a2 64		      ldx	#100
    478  faab		       86 82		      stx	Player1y
    479  faad		       f8		      sed
    480  faae		       a5 9d		      lda	HP
    481  fab0		       38		      sec
    482  fab1		       e9 02		      sbc	#2
    483  fab3		       85 9d		      sta	HP
    484  fab5		       d8		      cld
    485  fab6		       c9 01		      cmp	#1
    486  fab8		       10 67		      bpl	.EndCollisionCheck
    487  faba		       a9 00		      lda	#0
    488  fabc		       85 b1		      sta	Pause
    489  fabe		       4c c1 fc 	      jmp	GameOver
    490  fac1				   .CollisionP0
    491  fac1		       a9 01		      lda	#1
    492  fac3		       85 b0		      sta	ExpOff
    493  fac5		       a9 32		      LDA	#50	; Counter for effect 1.
    494  fac7		       85 af		      STA	EFFECT2
    495  fac9		       20 6e fc 	      jsr	GetRandomLevel
    496  facc		       a5 a3		      lda	EnemyCount
    497  face		       18		      clc
    498  facf		       69 01		      adc	#1
    499  fad1		       85 a3		      sta	EnemyCount
    500  fad3		       20 55 fc 	      jsr	GetRandomPos
    501  fad6		       85 83		      sta	Player1x
    502  fad8		       a2 50		      ldx	#80
    503  fada		       86 82		      stx	Player1y
    504  fadc		       f8		      sed
    505  fadd		       a5 9d		      lda	HP
    506  fadf		       38		      sec
    507  fae0		       e9 01		      sbc	#1
    508  fae2		       85 9d		      sta	HP
    509  fae4		       d8		      cld
    510  fae5		       c9 01		      cmp	#1
    511  fae7		       10 38		      bpl	.EndCollisionCheck
    512  fae9		       a9 00		      lda	#0
    513  faeb		       85 b1		      sta	Pause
    514  faed		       4c c1 fc 	      jmp	GameOver
    515  faf0				   .EnemyHit
    516  faf0		       a9 01		      lda	#1
    517  faf2		       85 b0		      sta	ExpOff
    518  faf4		       a9 32		      LDA	#50	; Counter for effect 1.
    519  faf6		       85 af		      STA	EFFECT2
    520  faf8		       20 6e fc 	      jsr	GetRandomLevel
    521  fafb		       a5 a3		      lda	EnemyCount
    522  fafd		       18		      clc
    523  fafe		       69 01		      adc	#1
    524  fb00		       85 a3		      sta	EnemyCount
    525  fb02		       f8		      sed
    526  fb03		       a5 9c		      lda	Score
    527  fb05		       18		      clc
    528  fb06		       69 01		      adc	#1
    529  fb08		       85 9c		      sta	Score
    530  fb0a		       d8		      cld
    531  fb0b		       a9 00		      lda	#0
    532  fb0d		       85 97		      sta	Missile0y
    533  fb0f		       85 1d		      sta	ENAM0
    534  fb11		       20 55 fc 	      jsr	GetRandomPos
    535  fb14		       85 83		      sta	Player1x
    536  fb16		       a2 50		      ldx	#80
    537  fb18		       86 82		      stx	Player1y
    538  fb1a		       4c 21 fb 	      jmp	.EndCollisionCheck
    539  fb1d				   .SetFrame
    540  fb1d		       85 02		      sta	WSYNC
    541  fb1f		       85 02		      sta	WSYNC
    542  fb21
    543  fb21				   .EndCollisionCheck
    544  fb21		       85 2c		      sta	CXCLR
    545  fb23				   Vblank
    546  fb23		       85 02		      sta	WSYNC
    547  fb25		       a9 b2		      lda	#$B2
    548  fb27		       85 09		      sta	COLUBK
    549  fb29							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    550  fb29							;; Output 27 more VBLANK overscan lines to complete our frame
    551  fb29							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    552  fb29					      REPEAT	27
    553  fb29		       85 02		      sta	WSYNC
    552  fb29					      REPEND
    553  fb2b		       85 02		      sta	WSYNC
    552  fb2b					      REPEND
    553  fb2d		       85 02		      sta	WSYNC
    552  fb2d					      REPEND
    553  fb2f		       85 02		      sta	WSYNC
    552  fb2f					      REPEND
    553  fb31		       85 02		      sta	WSYNC
    552  fb31					      REPEND
    553  fb33		       85 02		      sta	WSYNC
    552  fb33					      REPEND
    553  fb35		       85 02		      sta	WSYNC
    552  fb35					      REPEND
    553  fb37		       85 02		      sta	WSYNC
    552  fb37					      REPEND
    553  fb39		       85 02		      sta	WSYNC
    552  fb39					      REPEND
    553  fb3b		       85 02		      sta	WSYNC
    552  fb3b					      REPEND
    553  fb3d		       85 02		      sta	WSYNC
    552  fb3d					      REPEND
    553  fb3f		       85 02		      sta	WSYNC
    552  fb3f					      REPEND
    553  fb41		       85 02		      sta	WSYNC
    552  fb41					      REPEND
    553  fb43		       85 02		      sta	WSYNC
    552  fb43					      REPEND
    553  fb45		       85 02		      sta	WSYNC
    552  fb45					      REPEND
    553  fb47		       85 02		      sta	WSYNC
    552  fb47					      REPEND
    553  fb49		       85 02		      sta	WSYNC
    552  fb49					      REPEND
    553  fb4b		       85 02		      sta	WSYNC
    552  fb4b					      REPEND
    553  fb4d		       85 02		      sta	WSYNC
    552  fb4d					      REPEND
    553  fb4f		       85 02		      sta	WSYNC
    552  fb4f					      REPEND
    553  fb51		       85 02		      sta	WSYNC
    552  fb51					      REPEND
    553  fb53		       85 02		      sta	WSYNC
    552  fb53					      REPEND
    553  fb55		       85 02		      sta	WSYNC
    552  fb55					      REPEND
    553  fb57		       85 02		      sta	WSYNC
    552  fb57					      REPEND
    553  fb59		       85 02		      sta	WSYNC
    552  fb59					      REPEND
    553  fb5b		       85 02		      sta	WSYNC
    552  fb5b					      REPEND
    553  fb5d		       85 02		      sta	WSYNC
    554  fb5f					      REPEND
    555  fb5f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    556  fb5f							;; Loop to next frame
    557  fb5f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    558  fb5f		       4c 90 f8 	      jmp	Start
    559  fb62							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    560  fb62							; Subroutines
    561  fb62							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    562  fb62				   EnemyDrop  subroutine
    563  fb62		       a6 82		      ldx	Player1y
    564  fb64		       e4 a6		      cpx	EnemyDropLevel
    565  fb66		       f0 2e		      beq	.Move
    566  fb68				   .Drop
    567  fb68		       a9 05		      lda	#%00000101
    568  fb6a		       85 05		      sta	NUSIZ1
    569  fb6c		       a6 82		      ldx	Player1y
    570  fb6e		       e0 02		      cpx	#2
    571  fb70		       90 24		      bcc	.Move
    572  fb72		       ca		      dex
    573  fb73		       a5 a3		      lda	EnemyCount
    574  fb75		       c9 1e		      cmp	#30
    575  fb77		       90 18		      bcc	.Slow
    576  fb79		       a9 20		      lda	#%00100000
    577  fb7b		       85 04		      sta	NUSIZ0
    578  fb7d		       a5 a3		      lda	EnemyCount
    579  fb7f		       c9 3c		      cmp	#60
    580  fb81		       90 0e		      bcc	.Slow
    581  fb83		       a9 00		      lda	#%00000000
    582  fb85		       85 05		      sta	NUSIZ1
    583  fb87		       a5 a3		      lda	EnemyCount
    584  fb89		       c9 5a		      cmp	#90
    585  fb8b		       90 04		      bcc	.Slow
    586  fb8d		       a9 00		      lda	#%00000000
    587  fb8f		       85 04		      sta	NUSIZ0
    588  fb91				   .Slow
    589  fb91		       85 02		      sta	WSYNC
    590  fb93		       86 82		      stx	Player1y
    591  fb95				   .SkipDrop
    592  fb95		       60		      rts
    593  fb96				   Movement
    594  fb96				   .Move
    595  fb96		       a5 83		      lda	Player1x
    596  fb98		       c9 52		      cmp	#82
    597  fb9a		       f0 cc		      beq	.Drop
    598  fb9c		       c9 52		      cmp	#82
    599  fb9e		       b0 18		      bcs	.MoveLeft
    600  fba0				   .MoveRight
    601  fba0		       a6 82		      ldx	Player1y
    602  fba2		       e0 a6		      cpx	#EnemyDropLevel
    603  fba4		       b0 02		      bcs	.Right
    604  fba6		       86 82		      stx	Player1y
    605  fba8				   .Right
    606  fba8		       a6 83		      ldx	Player1x
    607  fbaa		       e0 a9		      cpx	#CenterLevel
    608  fbac		       b0 ba		      bcs	.Drop
    609  fbae		       a6 83		      ldx	Player1x
    610  fbb0		       e0 96		      cpx	#150
    611  fbb2		       b0 1e		      bcs	OffScreen
    612  fbb4		       e8		      inx
    613  fbb5		       86 83		      stx	Player1x
    614  fbb7		       60		      rts
    615  fbb8				   .MoveLeft
    616  fbb8		       a6 82		      ldx	Player1y
    617  fbba		       e0 a9		      cpx	#CenterLevel
    618  fbbc		       90 04		      bcc	.Left
    619  fbbe		       a2 02		      ldx	#2
    620  fbc0		       86 82		      stx	Player1y
    621  fbc2				   .Left
    622  fbc2		       a6 83		      ldx	Player1x
    623  fbc4		       c9 a9		      cmp	#CenterLevel
    624  fbc6		       b0 a0		      bcs	.Drop
    625  fbc8		       a6 83		      ldx	Player1x
    626  fbca		       e0 12		      cpx	#18
    627  fbcc		       90 04		      bcc	OffScreen
    628  fbce		       ca		      dex
    629  fbcf		       86 83		      stx	Player1x
    630  fbd1				   .SkipAllMoves
    631  fbd1		       60		      rts
    632  fbd2				   OffScreen  subroutine
    633  fbd2		       a9 fa		      lda	#250
    634  fbd4		       85 83		      sta	Player1x
    635  fbd6		       85 82		      sta	Player1y
    636  fbd8		       20 55 fc 	      jsr	GetRandomPos
    637  fbdb		       85 83		      sta	Player1x
    638  fbdd		       a2 50		      ldx	#80
    639  fbdf		       86 82		      stx	Player1y
    640  fbe1		       a9 37		      lda	#55
    641  fbe3		       85 a6		      sta	EnemyDropLevel
    642  fbe5		       60		      rts
    643  fbe6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    644  fbe6							;Horizontial Movement
    645  fbe6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    646  fbe6				   SetHorizPos subroutine
    647  fbe6		       85 02		      sta	WSYNC
    648  fbe8		       38		      sec
    649  fbe9				   .DivideLoop
    650  fbe9		       e9 0f		      sbc	#15
    651  fbeb		       b0 fc		      bcs	.DivideLoop
    652  fbed		       49 07		      eor	#7
    653  fbef		       0a		      asl
    654  fbf0		       0a		      asl
    655  fbf1		       0a		      asl
    656  fbf2		       0a		      asl
    657  fbf3		       95 10		      sta	RESP0,x
    658  fbf5		       95 20		      sta	HMP0,x
    659  fbf7		       60		      rts
    660  fbf8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    661  fbf8							;Joystick Controls
    662  fbf8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    663  fbf8				   Joystick   subroutine
    664  fbf8		       a5 97		      lda	Missile0y
    665  fbfa		       c9 5a		      cmp	#90
    666  fbfc		       90 04		      bcc	.MissileinAir
    667  fbfe		       a9 00		      lda	#0
    668  fc00		       85 97		      sta	Missile0y
    669  fc02				   .MissileinAir
    670  fc02		       a6 81		      ldx	Player0x
    671  fc04		       a5 97		      lda	Missile0y
    672  fc06		       c9 06		      cmp	#6
    673  fc08		       b0 22		      bcs	.MoveJoystick
    674  fc0a				   .FireButton
    675  fc0a		       a9 01		      lda	#1
    676  fc0c		       85 ad		      sta	SoundOff
    677  fc0e		       a9 0f		      lda	#15
    678  fc10		       85 ac		      STA	EFFECT1
    679  fc12		       a6 81		      ldx	Player0x
    680  fc14		       a9 80		      lda	#%10000000
    681  fc16		       24 0c		      bit	INPT4
    682  fc18		       d0 12		      bne	.MoveJoystick
    683  fc1a		       a5 81		      lda	Player0x
    684  fc1c		       18		      clc
    685  fc1d		       69 02		      adc	#2
    686  fc1f		       85 96		      sta	Missile0x
    687  fc21		       a5 80		      lda	Player0y
    688  fc23		       18		      clc
    689  fc24		       69 05		      adc	#5
    690  fc26		       85 97		      sta	Missile0y
    691  fc28		       a0 30		      ldy	#%00110000
    692  fc2a		       84 04		      sty	NUSIZ0
    693  fc2c				   .MoveJoystick
    694  fc2c		       a9 40		      lda	#%01000000	;Left?
    695  fc2e		       2c 80 02 	      bit	SWCHA
    696  fc31		       d0 0c		      bne	.SkipMoveLeft
    697  fc33		       e0 10		      cpx	#16
    698  fc35		       90 08		      bcc	.SkipMoveLeft
    699  fc37		       a0 30		      ldy	#%00110000
    700  fc39		       ca		      dex
    701  fc3a		       ca		      dex
    702  fc3b		       a9 09		      lda	#9
    703  fc3d		       85 a4		      sta	P0AnimOffset
    704  fc3f				   .SkipMoveLeft
    705  fc3f		       a9 80		      lda	#%10000000	;Right?
    706  fc41		       2c 80 02 	      bit	SWCHA
    707  fc44		       d0 0c		      bne	.SkipMoveRight
    708  fc46		       e0 99		      cpx	#153
    709  fc48		       b0 08		      bcs	.SkipMoveRight
    710  fc4a		       a0 30		      ldy	#%00110000
    711  fc4c		       e8		      inx
    712  fc4d		       e8		      inx
    713  fc4e		       a9 12		      lda	#18
    714  fc50		       85 a4		      sta	P0AnimOffset
    715  fc52				   .SkipMoveRight
    716  fc52		       86 81		      stx	Player0x
    717  fc54		       60		      rts
    718  fc55							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    719  fc55							; Random Position
    720  fc55							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    721  fc55				   GetRandomPos subroutine
    722  fc55		       a5 85		      lda	Random
    723  fc57		       0a		      asl
    724  fc58		       45 85		      eor	Random
    725  fc5a		       0a		      asl
    726  fc5b		       45 85		      eor	Random
    727  fc5d		       0a		      asl
    728  fc5e		       0a		      asl
    729  fc5f		       45 85		      eor	Random
    730  fc61		       0a		      asl
    731  fc62		       26 85		      rol	Random
    732  fc64		       4a		      lsr
    733  fc65		       85 84		      sta	EnemyXLoc
    734  fc67		       a9 0f		      lda	#15
    735  fc69		       65 84		      adc	EnemyXLoc
    736  fc6b		       85 84		      sta	EnemyXLoc
    737  fc6d		       60		      rts
    738  fc6e				   GetRandomLevel subroutine
    739  fc6e		       a5 a7		      lda	Level
    740  fc70		       0a		      asl
    741  fc71		       45 a7		      eor	Level
    742  fc73		       0a		      asl
    743  fc74		       45 a7		      eor	Level
    744  fc76		       0a		      asl
    745  fc77		       0a		      asl
    746  fc78		       45 a7		      eor	Level
    747  fc7a		       0a		      asl
    748  fc7b		       26 a7		      rol	Level
    749  fc7d		       4a		      lsr
    750  fc7e		       85 a6		      sta	EnemyDropLevel
    751  fc80		       a9 05		      lda	#5
    752  fc82		       65 a6		      adc	EnemyDropLevel
    753  fc84		       85 a6		      sta	EnemyDropLevel
    754  fc86		       60		      rts
    755  fc87				   GetRandomCenter subroutine
    756  fc87		       a5 a8		      lda	Center
    757  fc89		       0a		      asl
    758  fc8a		       45 a8		      eor	Center
    759  fc8c		       0a		      asl
    760  fc8d		       45 a8		      eor	Center
    761  fc8f		       0a		      asl
    762  fc90		       0a		      asl
    763  fc91		       45 a8		      eor	Center
    764  fc93		       0a		      asl
    765  fc94		       26 a8		      rol	Center
    766  fc96		       4a		      lsr
    767  fc97		       85 a9		      sta	CenterLevel
    768  fc99		       a9 3c		      lda	#60
    769  fc9b		       65 a9		      adc	CenterLevel
    770  fc9d		       85 a9		      sta	CenterLevel
    771  fc9f		       60		      rts
    772  fca0				   CalculateDigitOffset subroutine
    773  fca0		       a2 01		      ldx	#1
    774  fca2				   ScoreLoop  subroutine
    775  fca2		       b5 9c		      lda	Score,X
    776  fca4		       29 0f		      and	#$0F
    777  fca6		       85 9e		      sta	Temp
    778  fca8		       0a		      asl
    779  fca9		       0a		      asl
    780  fcaa		       65 9e		      adc	Temp
    781  fcac		       95 98		      sta	OnesDigitOffset,X
    782  fcae		       b5 9c		      lda	Score,X
    783  fcb0		       29 f0		      and	#$F0
    784  fcb2		       4a		      lsr
    785  fcb3		       4a		      lsr
    786  fcb4		       85 9e		      sta	Temp
    787  fcb6		       4a		      lsr
    788  fcb7		       4a		      lsr
    789  fcb8		       65 9e		      adc	Temp
    790  fcba		       95 9a		      sta	TensDigitOffset,X
    791  fcbc		       ca		      dex
    792  fcbd		       10 e3		      bpl	ScoreLoop
    793  fcbf		       60		      rts
    794  fcc0				   Sleep12Cycles subroutine
    795  fcc0		       60		      rts
    796  fcc1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    797  fcc1							; Gameover
    798  fcc1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    799  fcc1				   GameOver   subroutine
    800  fcc1		       a9 00		      lda	#0
    801  fcc3		       85 b1		      sta	Pause
    802  fcc5		       85 9d		      sta	HP
    803  fcc7		       a9 30		      lda	#$30
    804  fcc9		       85 a2		      sta	BackgroundClr
    805  fccb		       a9 01		      lda	#%0000001
    806  fccd		       85 05		      sta	NUSIZ1
    807  fccf		       a9 4d		      lda	#77
    808  fcd1		       85 83		      sta	Player1x
    809  fcd3		       a9 0a		      lda	#10
    810  fcd5		       85 82		      sta	Player1y
    811  fcd7		       a9 c8		      lda	#200
    812  fcd9		       85 80		      sta	Player0y
    813  fcdb					      REPEAT	28
    814  fcdb		       85 02		      sta	WSYNC
    813  fcdb					      REPEND
    814  fcdd		       85 02		      sta	WSYNC
    813  fcdd					      REPEND
    814  fcdf		       85 02		      sta	WSYNC
    813  fcdf					      REPEND
    814  fce1		       85 02		      sta	WSYNC
    813  fce1					      REPEND
    814  fce3		       85 02		      sta	WSYNC
    813  fce3					      REPEND
    814  fce5		       85 02		      sta	WSYNC
    813  fce5					      REPEND
    814  fce7		       85 02		      sta	WSYNC
    813  fce7					      REPEND
    814  fce9		       85 02		      sta	WSYNC
    813  fce9					      REPEND
    814  fceb		       85 02		      sta	WSYNC
    813  fceb					      REPEND
    814  fced		       85 02		      sta	WSYNC
    813  fced					      REPEND
    814  fcef		       85 02		      sta	WSYNC
    813  fcef					      REPEND
    814  fcf1		       85 02		      sta	WSYNC
    813  fcf1					      REPEND
    814  fcf3		       85 02		      sta	WSYNC
    813  fcf3					      REPEND
    814  fcf5		       85 02		      sta	WSYNC
    813  fcf5					      REPEND
    814  fcf7		       85 02		      sta	WSYNC
    813  fcf7					      REPEND
    814  fcf9		       85 02		      sta	WSYNC
    813  fcf9					      REPEND
    814  fcfb		       85 02		      sta	WSYNC
    813  fcfb					      REPEND
    814  fcfd		       85 02		      sta	WSYNC
    813  fcfd					      REPEND
    814  fcff		       85 02		      sta	WSYNC
    813  fcff					      REPEND
    814  fd01		       85 02		      sta	WSYNC
    813  fd01					      REPEND
    814  fd03		       85 02		      sta	WSYNC
    813  fd03					      REPEND
    814  fd05		       85 02		      sta	WSYNC
    813  fd05					      REPEND
    814  fd07		       85 02		      sta	WSYNC
    813  fd07					      REPEND
    814  fd09		       85 02		      sta	WSYNC
    813  fd09					      REPEND
    814  fd0b		       85 02		      sta	WSYNC
    813  fd0b					      REPEND
    814  fd0d		       85 02		      sta	WSYNC
    813  fd0d					      REPEND
    814  fd0f		       85 02		      sta	WSYNC
    813  fd0f					      REPEND
    814  fd11		       85 02		      sta	WSYNC
    815  fd13					      REPEND
    816  fd13		       4c 90 f8 	      jmp	Start
    817  fd16							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    818  fd16							; Graphics Data
    819  fd16							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    820  fd16				   Player0
    821  fd16				   P0Frame0
    822  fd16		       00		      .byte.b	#%00000000
    823  fd17		       24		      .byte.b	#%00100100	;$80
    824  fd18		       3c		      .byte.b	#%00111100	;$80
    825  fd19		       18		      .byte.b	#%00011000	;$80
    826  fd1a		       24		      .byte.b	#%00100100	;$32
    827  fd1b		       24		      .byte.b	#%00100100	;$32
    828  fd1c		       3c		      .byte.b	#%00111100	;$32
    829  fd1d		       5a		      .byte.b	#%01011010	;$70
    830  fd1e		       00		      .byte.b	#%00000000	;--
    831  fd1f				   P0Frame1
    832  fd1f		       00		      .byte.b	#%00000000
    833  fd20		       24		      .byte.b	#%00100100	;$80
    834  fd21		       3c		      .byte.b	#%00111100	;$80
    835  fd22		       98		      .byte.b	#%10011000	;$80
    836  fd23		       a4		      .byte.b	#%10100100	;$32
    837  fd24		       e4		      .byte.b	#%11100100	;$32
    838  fd25		       bc		      .byte.b	#%10111100	;$32
    839  fd26		       ba		      .byte.b	#%10111010	;$70
    840  fd27		       00		      .byte.b	#%00000000	;--
    841  fd28				   P0Frame2
    842  fd28		       00		      .byte.b	#%00000000
    843  fd29		       24		      .byte.b	#%00100100	;$80
    844  fd2a		       3c		      .byte.b	#%00111100	;$80
    845  fd2b		       19		      .byte.b	#%00011001	;$80
    846  fd2c		       25		      .byte.b	#%00100101	;$32
    847  fd2d		       27		      .byte.b	#%00100111	;$32
    848  fd2e		       3d		      .byte.b	#%00111101	;$32
    849  fd2f		       5d		      .byte.b	#%01011101	;$70
    850  fd30		       00		      .byte.b	#%00000000	;--
    851  fd31							;---End Graphics Data---
    852  fd31				   P0ColorFrame0
    853  fd31		       00		      .byte.b	#%00000000
    854  fd32		       80		      .byte.b	#$80	;
    855  fd33		       80		      .byte.b	#$80	;
    856  fd34		       80		      .byte.b	#$80	;
    857  fd35		       80		      .byte.b	#$80	;
    858  fd36		       80		      .byte.b	#$80	;
    859  fd37		       80		      .byte.b	#$80	;
    860  fd38		       70		      .byte.b	#$70	;
    861  fd39		       0e		      .byte.b	#$0E	;
    862  fd3a				   P0ColorFrame1
    863  fd3a		       00		      .byte.b	#%00000000
    864  fd3b		       80		      .byte.b	#$80	;
    865  fd3c		       80		      .byte.b	#$80	;
    866  fd3d		       80		      .byte.b	#$80	;
    867  fd3e		       32		      .byte.b	#$32	;
    868  fd3f		       32		      .byte.b	#$32	;
    869  fd40		       32		      .byte.b	#$32	;
    870  fd41		       70		      .byte.b	#$70	;
    871  fd42		       0e		      .byte.b	#$0E	;
    872  fd43				   P0ColorFrame2
    873  fd43		       00		      .byte.b	#%00000000
    874  fd44		       80		      .byte.b	#$80	;
    875  fd45		       80		      .byte.b	#$80	;
    876  fd46		       80		      .byte.b	#$80	;
    877  fd47		       32		      .byte.b	#$32	;
    878  fd48		       32		      .byte.b	#$32	;
    879  fd49		       32		      .byte.b	#$32	;
    880  fd4a		       70		      .byte.b	#$70	;
    881  fd4b		       0e		      .byte.b	#$0E	;
    882  fd4c				   P0ColorFrame4
    883  fd4c		       00		      .byte.b	#%00000000
    884  fd4d		       40		      .byte.b	#$40	;
    885  fd4e		       40		      .byte.b	#$40	;
    886  fd4f		       40		      .byte.b	#$40	;
    887  fd50		       40		      .byte.b	#$40	;
    888  fd51		       40		      .byte.b	#$40	;
    889  fd52		       40		      .byte.b	#$40	;
    890  fd53		       40		      .byte.b	#$40	;
    891  fd54		       40		      .byte.b	#$40	;
    892  fd55							;---End Color Data---
    893  fd55
    894  fd55				   P1Frame0
    895  fd55		       00		      .byte.b	#%00000000
    896  fd56		       81		      .byte.b	#%10000001
    897  fd57		       42		      .byte.b	#%01000010
    898  fd58		       5a		      .byte.b	#%01011010
    899  fd59		       db		      .byte.b	#%11011011
    900  fd5a		       24		      .byte.b	#%00100100
    901  fd5b		       99		      .byte.b	#%10011001
    902  fd5c		       5a		      .byte.b	#%01011010
    903  fd5d		       24		      .byte.b	#%00100100
    904  fd5e				   P1Frame1
    905  fd5e		       00		      .byte.b	#%00000000
    906  fd5f		       42		      .byte.b	#%01000010
    907  fd60		       42		      .byte.b	#%01000010
    908  fd61		       5a		      .byte.b	#%01011010
    909  fd62		       5a		      .byte.b	#%01011010
    910  fd63		       24		      .byte.b	#%00100100
    911  fd64		       18		      .byte.b	#%00011000
    912  fd65		       db		      .byte.b	#%11011011
    913  fd66		       24		      .byte.b	#%00100100
    914  fd67				   P1Frame2
    915  fd67		       00		      .byte.b	#%00000000
    916  fd68		       24		      .byte.b	#%00100100
    917  fd69		       42		      .byte.b	#%01000010
    918  fd6a		       5a		      .byte.b	#%01011010
    919  fd6b		       db		      .byte.b	#%11011011
    920  fd6c		       24		      .byte.b	#%00100100
    921  fd6d		       99		      .byte.b	#%10011001
    922  fd6e		       5a		      .byte.b	#%01011010
    923  fd6f		       24		      .byte.b	#%00100100
    924  fd70				   P1ColorFrame0
    925  fd70		       00		      .byte.b	#%00000000
    926  fd71		       30		      .byte.b	$30	;
    927  fd72		       44		      .byte.b	$44	;
    928  fd73		       b2		      .byte.b	$B2	;
    929  fd74		       c4		      .byte.b	$C4	;
    930  fd75		       42		      .byte.b	$42	;
    931  fd76		       c0		      .byte.b	$C0	;
    932  fd77		       30		      .byte.b	$30	;
    933  fd78		       0e		      .byte.b	$0E	;
    934  fd79				   P1ColorFrame1
    935  fd79		       00		      .byte.b	#%00000000
    936  fd7a		       30		      .byte.b	$30	;
    937  fd7b		       44		      .byte.b	$44	;
    938  fd7c		       b2		      .byte.b	$B2	;
    939  fd7d		       c4		      .byte.b	$C4	;
    940  fd7e		       42		      .byte.b	$42	;
    941  fd7f		       c0		      .byte.b	$C0	;
    942  fd80		       30		      .byte.b	$30	;
    943  fd81		       0e		      .byte.b	$0E	;
    944  fd82				   P1ColorFrame2
    945  fd82		       00		      .byte.b	#%00000000
    946  fd83		       30		      .byte.b	$30	;
    947  fd84		       44		      .byte.b	$44	;
    948  fd85		       b2		      .byte.b	$B2	;
    949  fd86		       c4		      .byte.b	$C4	;
    950  fd87		       42		      .byte.b	$42	;
    951  fd88		       c0		      .byte.b	$C0	;
    952  fd89		       30		      .byte.b	$30	;
    953  fd8a		       0e		      .byte.b	$0E	;
    954  fd8b							;---End Color Data---
    955  fd8b
    956  fd8b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    957  fd8b							;PlayField Data
    958  fd8b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    959  fd8b				   DataPF2
    960  fd8b		       fc fc fc fc*	      .byte.b	$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
    961  fd93		       8c 8c 8c 8c*	      .byte.b	$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C
    962  fd9b		       8c 8c 8c fc*	      .byte.b	$8C,$8C,$8C,$FC,$FC,$FC,$FE,$00
    963  fda3		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    964  fdab		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    965  fdb3		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    966  fdbb		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    967  fdc3		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    968  fdcb		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    969  fdd3		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    970  fddb		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    971  fde3		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    972  fdeb		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    973  fdf3		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    974  fdfb		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    975  fe03				   DateColorPF0
    976  fe03		       00		      .byte.b	$00
    977  fe04		       00		      .byte.b	$00
    978  fe05		       10		      .byte.b	$10
    979  fe06		       12		      .byte.b	$12
    980  fe07		       10		      .byte.b	$10
    981  fe08		       12		      .byte.b	$12
    982  fe09		       10		      .byte.b	$10
    983  fe0a		       12		      .byte.b	$12
    984  fe0b		       10		      .byte.b	$10
    985  fe0c		       12		      .byte.b	$12
    986  fe0d		       10		      .byte.b	$10
    987  fe0e		       12		      .byte.b	$12
    988  fe0f		       10		      .byte.b	$10
    989  fe10		       12		      .byte.b	$12
    990  fe11		       10		      .byte.b	$10
    991  fe12		       12		      .byte.b	$12
    992  fe13		       10		      .byte.b	$10
    993  fe14		       12		      .byte.b	$12
    994  fe15		       10		      .byte.b	$10
    995  fe16		       12		      .byte.b	$12
    996  fe17		       10		      .byte.b	$10
    997  fe18		       00		      .byte.b	$00
    998  fe19		       00		      .byte.b	$00
    999  fe1a		       00		      .byte.b	$00
   1000  fe1b		       00		      .byte.b	$00
   1001  fe1c		       00		      .byte.b	$00
   1002  fe1d		       00		      .byte.b	$00
   1003  fe1e		       00		      .byte.b	$00
   1004  fe1f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1005  fe1f							;Digit Graphics
   1006  fe1f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1007  fe1f				   Digits
   1008  fe1f		       77		      .byte.b	%01110111	; ### ###
   1009  fe20		       55		      .byte.b	%01010101	; # # # #
   1010  fe21		       55		      .byte.b	%01010101	; # # # #
   1011  fe22		       55		      .byte.b	%01010101	; # # # #
   1012  fe23		       77		      .byte.b	%01110111	; ### ###
   1013  fe24
   1014  fe24		       11		      .byte.b	%00010001	;   #	 #
   1015  fe25		       11		      .byte.b	%00010001	;   #	 #
   1016  fe26		       11		      .byte.b	%00010001	;   #	 #
   1017  fe27		       11		      .byte.b	%00010001	;   #	 #
   1018  fe28		       11		      .byte.b	%00010001	;   #	 #
   1019  fe29
   1020  fe29		       77		      .byte.b	%01110111	; ### ###
   1021  fe2a		       11		      .byte.b	%00010001	;   #	 #
   1022  fe2b		       77		      .byte.b	%01110111	; ### ###
   1023  fe2c		       44		      .byte.b	%01000100	; #   #
   1024  fe2d		       77		      .byte.b	%01110111	; ### ###
   1025  fe2e
   1026  fe2e		       77		      .byte.b	%01110111	; ### ###
   1027  fe2f		       11		      .byte.b	%00010001	;   #	 #
   1028  fe30		       33		      .byte.b	%00110011	;  ##	##
   1029  fe31		       11		      .byte.b	%00010001	;   #	 #
   1030  fe32		       77		      .byte.b	%01110111	; ### ###
   1031  fe33
   1032  fe33		       55		      .byte.b	%01010101	; # # # #
   1033  fe34		       55		      .byte.b	%01010101	; # # # #
   1034  fe35		       77		      .byte.b	%01110111	; ### ###
   1035  fe36		       11		      .byte.b	%00010001	;   #	 #
   1036  fe37		       11		      .byte.b	%00010001	;   #	 #
   1037  fe38
   1038  fe38		       77		      .byte.b	%01110111	; ### ###
   1039  fe39		       44		      .byte.b	%01000100	; #   #
   1040  fe3a		       77		      .byte.b	%01110111	; ### ###
   1041  fe3b		       11		      .byte.b	%00010001	;   #	 #
   1042  fe3c		       77		      .byte.b	%01110111	; ### ###
   1043  fe3d
   1044  fe3d		       77		      .byte.b	%01110111	; ### ###
   1045  fe3e		       44		      .byte.b	%01000100	; #   #
   1046  fe3f		       77		      .byte.b	%01110111	; ### ###
   1047  fe40		       55		      .byte.b	%01010101	; # # # #
   1048  fe41		       77		      .byte.b	%01110111	; ### ###
   1049  fe42
   1050  fe42		       77		      .byte.b	%01110111	; ### ###
   1051  fe43		       11		      .byte.b	%00010001	;   #	 #
   1052  fe44		       11		      .byte.b	%00010001	;   #	 #
   1053  fe45		       11		      .byte.b	%00010001	;   #	 #
   1054  fe46		       11		      .byte.b	%00010001	;   #	 #
   1055  fe47
   1056  fe47		       77		      .byte.b	%01110111	; ### ###
   1057  fe48		       55		      .byte.b	%01010101	; # # # #
   1058  fe49		       77		      .byte.b	%01110111	; ### ###
   1059  fe4a		       55		      .byte.b	%01010101	; # # # #
   1060  fe4b		       77		      .byte.b	%01110111	; ### ###
   1061  fe4c
   1062  fe4c		       77		      .byte.b	%01110111	; ### ###
   1063  fe4d		       55		      .byte.b	%01010101	; # # # #
   1064  fe4e		       77		      .byte.b	%01110111	; ### ###
   1065  fe4f		       11		      .byte.b	%00010001	;   #	 #
   1066  fe50		       77		      .byte.b	%01110111	; ### ###
   1067  fe51							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1068  fe51							;; Complete ROM size
   1069  fe51							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 175 bytes free
   1070  fe51					      ECHO	([$FF00-*]d), "bytes free"
   1071  fffc					      org	$FFFC
   1072  fffc		       00 f8		      .word.w	Reset
   1073  fffe		       00 f8		      .word.w	Reset
